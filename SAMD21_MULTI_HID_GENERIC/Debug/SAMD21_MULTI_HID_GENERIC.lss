
SAMD21_MULTI_HID_GENERIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000068b0  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000003b8  20000000  000068b0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000a40  200003b8  00006c68  000103b8  2**2
                  ALLOC
  3 .stack        00002000  20000df8  000076a8  000103b8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000103b8  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000103e0  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001801a  00000000  00000000  0001043b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002461  00000000  00000000  00028455  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003c7e  00000000  00000000  0002a8b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b20  00000000  00000000  0002e534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009f8  00000000  00000000  0002f054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001abc5  00000000  00000000  0002fa4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e2a3  00000000  00000000  0004a611  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008f85d  00000000  00000000  000588b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000025a4  00000000  00000000  000e8114  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20002df8 	.word	0x20002df8
       4:	000063a9 	.word	0x000063a9
       8:	00006499 	.word	0x00006499
       c:	00006499 	.word	0x00006499
	...
      2c:	00006499 	.word	0x00006499
	...
      38:	00006499 	.word	0x00006499
      3c:	00006499 	.word	0x00006499
      40:	00006499 	.word	0x00006499
      44:	00006499 	.word	0x00006499
      48:	00006499 	.word	0x00006499
      4c:	00006499 	.word	0x00006499
      50:	000053e5 	.word	0x000053e5
      54:	00006499 	.word	0x00006499
      58:	00006499 	.word	0x00006499
      5c:	00004f89 	.word	0x00004f89
      60:	00006499 	.word	0x00006499
      64:	00006499 	.word	0x00006499
      68:	00006499 	.word	0x00006499
      6c:	00006499 	.word	0x00006499
      70:	00006499 	.word	0x00006499
      74:	00006499 	.word	0x00006499
      78:	00006499 	.word	0x00006499
      7c:	00006499 	.word	0x00006499
      80:	00006499 	.word	0x00006499
      84:	00006499 	.word	0x00006499
      88:	00006499 	.word	0x00006499
      8c:	00006499 	.word	0x00006499
      90:	00006499 	.word	0x00006499
      94:	00006499 	.word	0x00006499
      98:	00006499 	.word	0x00006499
      9c:	00006499 	.word	0x00006499
      a0:	00006499 	.word	0x00006499
      a4:	00006499 	.word	0x00006499
      a8:	00006499 	.word	0x00006499
      ac:	00006499 	.word	0x00006499

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	200003b8 	.word	0x200003b8
      d0:	00000000 	.word	0x00000000
      d4:	000068b0 	.word	0x000068b0

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	000068b0 	.word	0x000068b0
     104:	200003bc 	.word	0x200003bc
     108:	000068b0 	.word	0x000068b0
     10c:	00000000 	.word	0x00000000

00000110 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     110:	b580      	push	{r7, lr}
     112:	b082      	sub	sp, #8
     114:	af00      	add	r7, sp, #0
     116:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     118:	687b      	ldr	r3, [r7, #4]
     11a:	2b00      	cmp	r3, #0
     11c:	d00c      	beq.n	138 <delay_cycles+0x28>
		SysTick->LOAD = n;
     11e:	4b08      	ldr	r3, [pc, #32]	; (140 <delay_cycles+0x30>)
     120:	687a      	ldr	r2, [r7, #4]
     122:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     124:	4b06      	ldr	r3, [pc, #24]	; (140 <delay_cycles+0x30>)
     126:	2200      	movs	r2, #0
     128:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	4b04      	ldr	r3, [pc, #16]	; (140 <delay_cycles+0x30>)
     12e:	681a      	ldr	r2, [r3, #0]
     130:	2380      	movs	r3, #128	; 0x80
     132:	025b      	lsls	r3, r3, #9
     134:	4013      	ands	r3, r2
     136:	d0f9      	beq.n	12c <delay_cycles+0x1c>
		};
	}
}
     138:	46bd      	mov	sp, r7
     13a:	b002      	add	sp, #8
     13c:	bd80      	pop	{r7, pc}
     13e:	46c0      	nop			; (mov r8, r8)
     140:	e000e010 	.word	0xe000e010

00000144 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     144:	b580      	push	{r7, lr}
     146:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     148:	2000      	movs	r0, #0
     14a:	4b10      	ldr	r3, [pc, #64]	; (18c <delay_init+0x48>)
     14c:	4798      	blx	r3
     14e:	1c02      	adds	r2, r0, #0
     150:	4b0f      	ldr	r3, [pc, #60]	; (190 <delay_init+0x4c>)
     152:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x4c>)
     156:	681a      	ldr	r2, [r3, #0]
     158:	4b0e      	ldr	r3, [pc, #56]	; (194 <delay_init+0x50>)
     15a:	1c10      	adds	r0, r2, #0
     15c:	22fa      	movs	r2, #250	; 0xfa
     15e:	0091      	lsls	r1, r2, #2
     160:	4798      	blx	r3
     162:	1c03      	adds	r3, r0, #0
     164:	1c1a      	adds	r2, r3, #0
     166:	4b0a      	ldr	r3, [pc, #40]	; (190 <delay_init+0x4c>)
     168:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16a:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x4c>)
     16c:	681a      	ldr	r2, [r3, #0]
     16e:	4b09      	ldr	r3, [pc, #36]	; (194 <delay_init+0x50>)
     170:	1c10      	adds	r0, r2, #0
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	1c03      	adds	r3, r0, #0
     17a:	1c1a      	adds	r2, r3, #0
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x54>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x58>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46bd      	mov	sp, r7
     188:	bd80      	pop	{r7, pc}
     18a:	46c0      	nop			; (mov r8, r8)
     18c:	00005f51 	.word	0x00005f51
     190:	20000000 	.word	0x20000000
     194:	00006595 	.word	0x00006595
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b06      	ldr	r3, [pc, #24]	; (1c4 <delay_cycles_ms+0x24>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	1c18      	adds	r0, r3, #0
     1b0:	4b05      	ldr	r3, [pc, #20]	; (1c8 <delay_cycles_ms+0x28>)
     1b2:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     1be:	46bd      	mov	sp, r7
     1c0:	b002      	add	sp, #8
     1c2:	bd80      	pop	{r7, pc}
     1c4:	20000000 	.word	0x20000000
     1c8:	00000111 	.word	0x00000111

000001cc <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
     1cc:	b580      	push	{r7, lr}
     1ce:	b082      	sub	sp, #8
     1d0:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1d2:	f3ef 8310 	mrs	r3, PRIMASK
     1d6:	603b      	str	r3, [r7, #0]
  return(result);
     1d8:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
     1da:	425a      	negs	r2, r3
     1dc:	4153      	adcs	r3, r2
     1de:	b2db      	uxtb	r3, r3
     1e0:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     1e2:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1e4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
     1e8:	4b03      	ldr	r3, [pc, #12]	; (1f8 <cpu_irq_save+0x2c>)
     1ea:	2200      	movs	r2, #0
     1ec:	701a      	strb	r2, [r3, #0]
	return flags;
     1ee:	687b      	ldr	r3, [r7, #4]
}
     1f0:	1c18      	adds	r0, r3, #0
     1f2:	46bd      	mov	sp, r7
     1f4:	b002      	add	sp, #8
     1f6:	bd80      	pop	{r7, pc}
     1f8:	200003b4 	.word	0x200003b4

000001fc <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b082      	sub	sp, #8
     200:	af00      	add	r7, sp, #0
     202:	6078      	str	r0, [r7, #4]
	return (flags);
     204:	687b      	ldr	r3, [r7, #4]
     206:	1e5a      	subs	r2, r3, #1
     208:	4193      	sbcs	r3, r2
     20a:	b2db      	uxtb	r3, r3
}
     20c:	1c18      	adds	r0, r3, #0
     20e:	46bd      	mov	sp, r7
     210:	b002      	add	sp, #8
     212:	bd80      	pop	{r7, pc}

00000214 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
     214:	b580      	push	{r7, lr}
     216:	b082      	sub	sp, #8
     218:	af00      	add	r7, sp, #0
     21a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	1c18      	adds	r0, r3, #0
     220:	4b06      	ldr	r3, [pc, #24]	; (23c <cpu_irq_restore+0x28>)
     222:	4798      	blx	r3
     224:	1c03      	adds	r3, r0, #0
     226:	2b00      	cmp	r3, #0
     228:	d005      	beq.n	236 <cpu_irq_restore+0x22>
		cpu_irq_enable();
     22a:	4b05      	ldr	r3, [pc, #20]	; (240 <cpu_irq_restore+0x2c>)
     22c:	2201      	movs	r2, #1
     22e:	701a      	strb	r2, [r3, #0]
     230:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     234:	b662      	cpsie	i
}
     236:	46bd      	mov	sp, r7
     238:	b002      	add	sp, #8
     23a:	bd80      	pop	{r7, pc}
     23c:	000001fd 	.word	0x000001fd
     240:	200003b4 	.word	0x200003b4

00000244 <udi_hid_generic_charger_enable>:
	UNUSED(ep);
	udi_hid_generic_b_report_in_free = true;
}
#else
bool udi_hid_generic_charger_enable(void)
{
     244:	b580      	push	{r7, lr}
     246:	af00      	add	r7, sp, #0
	// Initialize internal values
	udi_hid_generic_charger_rate = 0;
     248:	4b07      	ldr	r3, [pc, #28]	; (268 <udi_hid_generic_charger_enable+0x24>)
     24a:	2200      	movs	r2, #0
     24c:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_charger_protocol = 0;
     24e:	4b07      	ldr	r3, [pc, #28]	; (26c <udi_hid_generic_charger_enable+0x28>)
     250:	2200      	movs	r2, #0
     252:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_b_charger_report_in_free = true;
     254:	4b06      	ldr	r3, [pc, #24]	; (270 <udi_hid_generic_charger_enable+0x2c>)
     256:	2201      	movs	r2, #1
     258:	701a      	strb	r2, [r3, #0]
	#ifndef HID_GENERIC_SINGLE_IN_ENDPOINT
	if (!udi_hid_generic_report_out_enable())
	return false;
	#endif
	return UDI_HID_GENERIC_CHARGER_ENABLE_EXT();
     25a:	4b06      	ldr	r3, [pc, #24]	; (274 <udi_hid_generic_charger_enable+0x30>)
     25c:	4798      	blx	r3
     25e:	1c03      	adds	r3, r0, #0
}
     260:	1c18      	adds	r0, r3, #0
     262:	46bd      	mov	sp, r7
     264:	bd80      	pop	{r7, pc}
     266:	46c0      	nop			; (mov r8, r8)
     268:	200003d4 	.word	0x200003d4
     26c:	200003f0 	.word	0x200003f0
     270:	2000040c 	.word	0x2000040c
     274:	000034b1 	.word	0x000034b1

00000278 <udi_hid_generic_battery1_enable>:

bool udi_hid_generic_battery1_enable(void)
{
     278:	b580      	push	{r7, lr}
     27a:	af00      	add	r7, sp, #0
	// Initialize internal values
	udi_hid_generic_battery1_rate = 0;
     27c:	4b07      	ldr	r3, [pc, #28]	; (29c <udi_hid_generic_battery1_enable+0x24>)
     27e:	2200      	movs	r2, #0
     280:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_battery1_protocol = 0;
     282:	4b07      	ldr	r3, [pc, #28]	; (2a0 <udi_hid_generic_battery1_enable+0x28>)
     284:	2200      	movs	r2, #0
     286:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_b_battery1_report_in_free = true;
     288:	4b06      	ldr	r3, [pc, #24]	; (2a4 <udi_hid_generic_battery1_enable+0x2c>)
     28a:	2201      	movs	r2, #1
     28c:	701a      	strb	r2, [r3, #0]
	#ifndef HID_GENERIC_SINGLE_IN_ENDPOINT
	if (!udi_hid_generic_report_out_enable())
	return false;
	#endif
	return UDI_HID_GENERIC_BATTERY1_ENABLE_EXT();
     28e:	4b06      	ldr	r3, [pc, #24]	; (2a8 <udi_hid_generic_battery1_enable+0x30>)
     290:	4798      	blx	r3
     292:	1c03      	adds	r3, r0, #0
}
     294:	1c18      	adds	r0, r3, #0
     296:	46bd      	mov	sp, r7
     298:	bd80      	pop	{r7, pc}
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	200003d8 	.word	0x200003d8
     2a0:	200003f4 	.word	0x200003f4
     2a4:	2000040d 	.word	0x2000040d
     2a8:	000034c9 	.word	0x000034c9

000002ac <udi_hid_generic_battery2_enable>:

bool udi_hid_generic_battery2_enable(void)
{
     2ac:	b580      	push	{r7, lr}
     2ae:	af00      	add	r7, sp, #0
	// Initialize internal values
	udi_hid_generic_battery2_rate = 0;
     2b0:	4b07      	ldr	r3, [pc, #28]	; (2d0 <udi_hid_generic_battery2_enable+0x24>)
     2b2:	2200      	movs	r2, #0
     2b4:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_battery2_protocol = 0;
     2b6:	4b07      	ldr	r3, [pc, #28]	; (2d4 <udi_hid_generic_battery2_enable+0x28>)
     2b8:	2200      	movs	r2, #0
     2ba:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_b_battery2_report_in_free = true;
     2bc:	4b06      	ldr	r3, [pc, #24]	; (2d8 <udi_hid_generic_battery2_enable+0x2c>)
     2be:	2201      	movs	r2, #1
     2c0:	701a      	strb	r2, [r3, #0]
	#ifndef HID_GENERIC_SINGLE_IN_ENDPOINT
	if (!udi_hid_generic_report_out_enable())
	return false;
	#endif
	return UDI_HID_GENERIC_BATTERY2_ENABLE_EXT();
     2c2:	4b06      	ldr	r3, [pc, #24]	; (2dc <udi_hid_generic_battery2_enable+0x30>)
     2c4:	4798      	blx	r3
     2c6:	1c03      	adds	r3, r0, #0
}
     2c8:	1c18      	adds	r0, r3, #0
     2ca:	46bd      	mov	sp, r7
     2cc:	bd80      	pop	{r7, pc}
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	200003dc 	.word	0x200003dc
     2d4:	200003f8 	.word	0x200003f8
     2d8:	2000040e 	.word	0x2000040e
     2dc:	000034e1 	.word	0x000034e1

000002e0 <udi_hid_generic_battery3_enable>:

bool udi_hid_generic_battery3_enable(void)
{
     2e0:	b580      	push	{r7, lr}
     2e2:	af00      	add	r7, sp, #0
	// Initialize internal values
	udi_hid_generic_battery3_rate = 0;
     2e4:	4b07      	ldr	r3, [pc, #28]	; (304 <udi_hid_generic_battery3_enable+0x24>)
     2e6:	2200      	movs	r2, #0
     2e8:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_battery3_protocol = 0;
     2ea:	4b07      	ldr	r3, [pc, #28]	; (308 <udi_hid_generic_battery3_enable+0x28>)
     2ec:	2200      	movs	r2, #0
     2ee:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_b_battery3_report_in_free = true;
     2f0:	4b06      	ldr	r3, [pc, #24]	; (30c <udi_hid_generic_battery3_enable+0x2c>)
     2f2:	2201      	movs	r2, #1
     2f4:	701a      	strb	r2, [r3, #0]
	#ifndef HID_GENERIC_SINGLE_IN_ENDPOINT
	if (!udi_hid_generic_report_out_enable())
	return false;
	#endif
	return UDI_HID_GENERIC_BATTERY3_ENABLE_EXT();
     2f6:	4b06      	ldr	r3, [pc, #24]	; (310 <udi_hid_generic_battery3_enable+0x30>)
     2f8:	4798      	blx	r3
     2fa:	1c03      	adds	r3, r0, #0
}
     2fc:	1c18      	adds	r0, r3, #0
     2fe:	46bd      	mov	sp, r7
     300:	bd80      	pop	{r7, pc}
     302:	46c0      	nop			; (mov r8, r8)
     304:	200003e0 	.word	0x200003e0
     308:	200003fc 	.word	0x200003fc
     30c:	2000040f 	.word	0x2000040f
     310:	000034f9 	.word	0x000034f9

00000314 <udi_hid_generic_battery4_enable>:

bool udi_hid_generic_battery4_enable(void)
{
     314:	b580      	push	{r7, lr}
     316:	af00      	add	r7, sp, #0
	// Initialize internal values
	udi_hid_generic_battery4_rate = 0;
     318:	4b07      	ldr	r3, [pc, #28]	; (338 <udi_hid_generic_battery4_enable+0x24>)
     31a:	2200      	movs	r2, #0
     31c:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_battery4_protocol = 0;
     31e:	4b07      	ldr	r3, [pc, #28]	; (33c <udi_hid_generic_battery4_enable+0x28>)
     320:	2200      	movs	r2, #0
     322:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_b_battery4_report_in_free = true;
     324:	4b06      	ldr	r3, [pc, #24]	; (340 <udi_hid_generic_battery4_enable+0x2c>)
     326:	2201      	movs	r2, #1
     328:	701a      	strb	r2, [r3, #0]
	#ifndef HID_GENERIC_SINGLE_IN_ENDPOINT
	if (!udi_hid_generic_report_out_enable())
	return false;
	#endif
	return UDI_HID_GENERIC_BATTERY4_ENABLE_EXT();
     32a:	4b06      	ldr	r3, [pc, #24]	; (344 <udi_hid_generic_battery4_enable+0x30>)
     32c:	4798      	blx	r3
     32e:	1c03      	adds	r3, r0, #0
}
     330:	1c18      	adds	r0, r3, #0
     332:	46bd      	mov	sp, r7
     334:	bd80      	pop	{r7, pc}
     336:	46c0      	nop			; (mov r8, r8)
     338:	200003e4 	.word	0x200003e4
     33c:	20000400 	.word	0x20000400
     340:	20000410 	.word	0x20000410
     344:	00003511 	.word	0x00003511

00000348 <udi_hid_generic_battery5_enable>:

bool udi_hid_generic_battery5_enable(void)
{
     348:	b580      	push	{r7, lr}
     34a:	af00      	add	r7, sp, #0
	// Initialize internal values
	udi_hid_generic_battery5_rate = 0;
     34c:	4b07      	ldr	r3, [pc, #28]	; (36c <udi_hid_generic_battery5_enable+0x24>)
     34e:	2200      	movs	r2, #0
     350:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_battery5_protocol = 0;
     352:	4b07      	ldr	r3, [pc, #28]	; (370 <udi_hid_generic_battery5_enable+0x28>)
     354:	2200      	movs	r2, #0
     356:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_b_battery5_report_in_free = true;
     358:	4b06      	ldr	r3, [pc, #24]	; (374 <udi_hid_generic_battery5_enable+0x2c>)
     35a:	2201      	movs	r2, #1
     35c:	701a      	strb	r2, [r3, #0]
	#ifndef HID_GENERIC_SINGLE_IN_ENDPOINT
	if (!udi_hid_generic_report_out_enable())
	return false;
	#endif
	return UDI_HID_GENERIC_BATTERY5_ENABLE_EXT();
     35e:	4b06      	ldr	r3, [pc, #24]	; (378 <udi_hid_generic_battery5_enable+0x30>)
     360:	4798      	blx	r3
     362:	1c03      	adds	r3, r0, #0
}
     364:	1c18      	adds	r0, r3, #0
     366:	46bd      	mov	sp, r7
     368:	bd80      	pop	{r7, pc}
     36a:	46c0      	nop			; (mov r8, r8)
     36c:	200003e8 	.word	0x200003e8
     370:	20000404 	.word	0x20000404
     374:	20000411 	.word	0x20000411
     378:	00003529 	.word	0x00003529

0000037c <udi_hid_generic_battery6_enable>:

bool udi_hid_generic_battery6_enable(void)
{
     37c:	b580      	push	{r7, lr}
     37e:	af00      	add	r7, sp, #0
	// Initialize internal values
	udi_hid_generic_battery6_rate = 0;
     380:	4b07      	ldr	r3, [pc, #28]	; (3a0 <udi_hid_generic_battery6_enable+0x24>)
     382:	2200      	movs	r2, #0
     384:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_battery6_protocol = 0;
     386:	4b07      	ldr	r3, [pc, #28]	; (3a4 <udi_hid_generic_battery6_enable+0x28>)
     388:	2200      	movs	r2, #0
     38a:	701a      	strb	r2, [r3, #0]
	udi_hid_generic_b_battery6_report_in_free = true;
     38c:	4b06      	ldr	r3, [pc, #24]	; (3a8 <udi_hid_generic_battery6_enable+0x2c>)
     38e:	2201      	movs	r2, #1
     390:	701a      	strb	r2, [r3, #0]
	#ifndef HID_GENERIC_SINGLE_IN_ENDPOINT
	if (!udi_hid_generic_report_out_enable())
	return false;
	#endif
	return UDI_HID_GENERIC_BATTERY6_ENABLE_EXT();
     392:	4b06      	ldr	r3, [pc, #24]	; (3ac <udi_hid_generic_battery6_enable+0x30>)
     394:	4798      	blx	r3
     396:	1c03      	adds	r3, r0, #0
}
     398:	1c18      	adds	r0, r3, #0
     39a:	46bd      	mov	sp, r7
     39c:	bd80      	pop	{r7, pc}
     39e:	46c0      	nop			; (mov r8, r8)
     3a0:	200003ec 	.word	0x200003ec
     3a4:	20000408 	.word	0x20000408
     3a8:	20000412 	.word	0x20000412
     3ac:	00003541 	.word	0x00003541

000003b0 <udi_hid_generic_charger_disable>:

void udi_hid_generic_charger_disable(void)
{
     3b0:	b580      	push	{r7, lr}
     3b2:	af00      	add	r7, sp, #0
	UDI_HID_GENERIC_CHARGER_DISABLE_EXT();
     3b4:	4b01      	ldr	r3, [pc, #4]	; (3bc <udi_hid_generic_charger_disable+0xc>)
     3b6:	4798      	blx	r3
}
     3b8:	46bd      	mov	sp, r7
     3ba:	bd80      	pop	{r7, pc}
     3bc:	00003559 	.word	0x00003559

000003c0 <udi_hid_generic_battery1_disable>:

void udi_hid_generic_battery1_disable(void)
{
     3c0:	b580      	push	{r7, lr}
     3c2:	af00      	add	r7, sp, #0
	UDI_HID_GENERIC_BATTERY1_DISABLE_EXT();
     3c4:	4b01      	ldr	r3, [pc, #4]	; (3cc <udi_hid_generic_battery1_disable+0xc>)
     3c6:	4798      	blx	r3
}
     3c8:	46bd      	mov	sp, r7
     3ca:	bd80      	pop	{r7, pc}
     3cc:	0000356d 	.word	0x0000356d

000003d0 <udi_hid_generic_battery2_disable>:

void udi_hid_generic_battery2_disable(void)
{
     3d0:	b580      	push	{r7, lr}
     3d2:	af00      	add	r7, sp, #0
	UDI_HID_GENERIC_BATTERY2_DISABLE_EXT();
     3d4:	4b01      	ldr	r3, [pc, #4]	; (3dc <udi_hid_generic_battery2_disable+0xc>)
     3d6:	4798      	blx	r3
}
     3d8:	46bd      	mov	sp, r7
     3da:	bd80      	pop	{r7, pc}
     3dc:	00003581 	.word	0x00003581

000003e0 <udi_hid_generic_battery3_disable>:

void udi_hid_generic_battery3_disable(void)
{
     3e0:	b580      	push	{r7, lr}
     3e2:	af00      	add	r7, sp, #0
	UDI_HID_GENERIC_BATTERY3_DISABLE_EXT();
     3e4:	4b01      	ldr	r3, [pc, #4]	; (3ec <udi_hid_generic_battery3_disable+0xc>)
     3e6:	4798      	blx	r3
}
     3e8:	46bd      	mov	sp, r7
     3ea:	bd80      	pop	{r7, pc}
     3ec:	00003595 	.word	0x00003595

000003f0 <udi_hid_generic_battery4_disable>:

void udi_hid_generic_battery4_disable(void)
{
     3f0:	b580      	push	{r7, lr}
     3f2:	af00      	add	r7, sp, #0
	UDI_HID_GENERIC_BATTERY4_DISABLE_EXT();
     3f4:	4b01      	ldr	r3, [pc, #4]	; (3fc <udi_hid_generic_battery4_disable+0xc>)
     3f6:	4798      	blx	r3
}
     3f8:	46bd      	mov	sp, r7
     3fa:	bd80      	pop	{r7, pc}
     3fc:	000035a9 	.word	0x000035a9

00000400 <udi_hid_generic_battery5_disable>:

void udi_hid_generic_battery5_disable(void)
{
     400:	b580      	push	{r7, lr}
     402:	af00      	add	r7, sp, #0
	UDI_HID_GENERIC_BATTERY5_DISABLE_EXT();
     404:	4b01      	ldr	r3, [pc, #4]	; (40c <udi_hid_generic_battery5_disable+0xc>)
     406:	4798      	blx	r3
}
     408:	46bd      	mov	sp, r7
     40a:	bd80      	pop	{r7, pc}
     40c:	000035bd 	.word	0x000035bd

00000410 <udi_hid_generic_battery6_disable>:

void udi_hid_generic_battery6_disable(void)
{
     410:	b580      	push	{r7, lr}
     412:	af00      	add	r7, sp, #0
	UDI_HID_GENERIC_BATTERY6_DISABLE_EXT();
     414:	4b01      	ldr	r3, [pc, #4]	; (41c <udi_hid_generic_battery6_disable+0xc>)
     416:	4798      	blx	r3
}
     418:	46bd      	mov	sp, r7
     41a:	bd80      	pop	{r7, pc}
     41c:	000035d1 	.word	0x000035d1

00000420 <udi_hid_generic_charger_setup>:

bool udi_hid_generic_charger_setup(void)
{
     420:	b598      	push	{r3, r4, r7, lr}
     422:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_generic_charger_rate,
     424:	4804      	ldr	r0, [pc, #16]	; (438 <udi_hid_generic_charger_setup+0x18>)
     426:	4905      	ldr	r1, [pc, #20]	; (43c <udi_hid_generic_charger_setup+0x1c>)
     428:	4a05      	ldr	r2, [pc, #20]	; (440 <udi_hid_generic_charger_setup+0x20>)
     42a:	4b06      	ldr	r3, [pc, #24]	; (444 <udi_hid_generic_charger_setup+0x24>)
     42c:	4c06      	ldr	r4, [pc, #24]	; (448 <udi_hid_generic_charger_setup+0x28>)
     42e:	47a0      	blx	r4
     430:	1c03      	adds	r3, r0, #0
			&udi_hid_generic_charger_protocol,
			(uint8_t *) &udi_hid_generic_charger_report_desc,
			udi_hid_generic_charger_setreport);
}
     432:	1c18      	adds	r0, r3, #0
     434:	46bd      	mov	sp, r7
     436:	bd98      	pop	{r3, r4, r7, pc}
     438:	200003d4 	.word	0x200003d4
     43c:	200003f0 	.word	0x200003f0
     440:	20000190 	.word	0x20000190
     444:	000005a9 	.word	0x000005a9
     448:	00005451 	.word	0x00005451

0000044c <udi_hid_generic_battery1_setup>:

bool udi_hid_generic_battery1_setup(void)
{
     44c:	b598      	push	{r3, r4, r7, lr}
     44e:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_generic_battery1_rate,
     450:	4804      	ldr	r0, [pc, #16]	; (464 <udi_hid_generic_battery1_setup+0x18>)
     452:	4905      	ldr	r1, [pc, #20]	; (468 <udi_hid_generic_battery1_setup+0x1c>)
     454:	4a05      	ldr	r2, [pc, #20]	; (46c <udi_hid_generic_battery1_setup+0x20>)
     456:	4b06      	ldr	r3, [pc, #24]	; (470 <udi_hid_generic_battery1_setup+0x24>)
     458:	4c06      	ldr	r4, [pc, #24]	; (474 <udi_hid_generic_battery1_setup+0x28>)
     45a:	47a0      	blx	r4
     45c:	1c03      	adds	r3, r0, #0
			&udi_hid_generic_battery1_protocol,
			(uint8_t *) &udi_hid_generic_battery1_report_desc,
			udi_hid_generic_battery1_setreport);
}
     45e:	1c18      	adds	r0, r3, #0
     460:	46bd      	mov	sp, r7
     462:	bd98      	pop	{r3, r4, r7, pc}
     464:	200003d8 	.word	0x200003d8
     468:	200003f4 	.word	0x200003f4
     46c:	200001b8 	.word	0x200001b8
     470:	000005f9 	.word	0x000005f9
     474:	00005451 	.word	0x00005451

00000478 <udi_hid_generic_battery2_setup>:

bool udi_hid_generic_battery2_setup(void)
{
     478:	b598      	push	{r3, r4, r7, lr}
     47a:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_generic_battery2_rate,
     47c:	4804      	ldr	r0, [pc, #16]	; (490 <udi_hid_generic_battery2_setup+0x18>)
     47e:	4905      	ldr	r1, [pc, #20]	; (494 <udi_hid_generic_battery2_setup+0x1c>)
     480:	4a05      	ldr	r2, [pc, #20]	; (498 <udi_hid_generic_battery2_setup+0x20>)
     482:	4b06      	ldr	r3, [pc, #24]	; (49c <udi_hid_generic_battery2_setup+0x24>)
     484:	4c06      	ldr	r4, [pc, #24]	; (4a0 <udi_hid_generic_battery2_setup+0x28>)
     486:	47a0      	blx	r4
     488:	1c03      	adds	r3, r0, #0
			&udi_hid_generic_battery2_protocol,
			(uint8_t *) &udi_hid_generic_battery2_report_desc,
			udi_hid_generic_battery2_setreport);
}
     48a:	1c18      	adds	r0, r3, #0
     48c:	46bd      	mov	sp, r7
     48e:	bd98      	pop	{r3, r4, r7, pc}
     490:	200003dc 	.word	0x200003dc
     494:	200003f8 	.word	0x200003f8
     498:	200001e0 	.word	0x200001e0
     49c:	00000649 	.word	0x00000649
     4a0:	00005451 	.word	0x00005451

000004a4 <udi_hid_generic_battery3_setup>:

bool udi_hid_generic_battery3_setup(void)
{
     4a4:	b598      	push	{r3, r4, r7, lr}
     4a6:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_generic_battery3_rate,
     4a8:	4804      	ldr	r0, [pc, #16]	; (4bc <udi_hid_generic_battery3_setup+0x18>)
     4aa:	4905      	ldr	r1, [pc, #20]	; (4c0 <udi_hid_generic_battery3_setup+0x1c>)
     4ac:	4a05      	ldr	r2, [pc, #20]	; (4c4 <udi_hid_generic_battery3_setup+0x20>)
     4ae:	4b06      	ldr	r3, [pc, #24]	; (4c8 <udi_hid_generic_battery3_setup+0x24>)
     4b0:	4c06      	ldr	r4, [pc, #24]	; (4cc <udi_hid_generic_battery3_setup+0x28>)
     4b2:	47a0      	blx	r4
     4b4:	1c03      	adds	r3, r0, #0
			&udi_hid_generic_battery3_protocol,
			(uint8_t *) &udi_hid_generic_battery3_report_desc,
			udi_hid_generic_battery3_setreport);
}
     4b6:	1c18      	adds	r0, r3, #0
     4b8:	46bd      	mov	sp, r7
     4ba:	bd98      	pop	{r3, r4, r7, pc}
     4bc:	200003e0 	.word	0x200003e0
     4c0:	200003fc 	.word	0x200003fc
     4c4:	20000208 	.word	0x20000208
     4c8:	00000699 	.word	0x00000699
     4cc:	00005451 	.word	0x00005451

000004d0 <udi_hid_generic_battery4_setup>:

bool udi_hid_generic_battery4_setup(void)
{
     4d0:	b598      	push	{r3, r4, r7, lr}
     4d2:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_generic_battery4_rate,
     4d4:	4804      	ldr	r0, [pc, #16]	; (4e8 <udi_hid_generic_battery4_setup+0x18>)
     4d6:	4905      	ldr	r1, [pc, #20]	; (4ec <udi_hid_generic_battery4_setup+0x1c>)
     4d8:	4a05      	ldr	r2, [pc, #20]	; (4f0 <udi_hid_generic_battery4_setup+0x20>)
     4da:	4b06      	ldr	r3, [pc, #24]	; (4f4 <udi_hid_generic_battery4_setup+0x24>)
     4dc:	4c06      	ldr	r4, [pc, #24]	; (4f8 <udi_hid_generic_battery4_setup+0x28>)
     4de:	47a0      	blx	r4
     4e0:	1c03      	adds	r3, r0, #0
			&udi_hid_generic_battery4_protocol,
			(uint8_t *) &udi_hid_generic_battery4_report_desc,
			udi_hid_generic_battery4_setreport);
}
     4e2:	1c18      	adds	r0, r3, #0
     4e4:	46bd      	mov	sp, r7
     4e6:	bd98      	pop	{r3, r4, r7, pc}
     4e8:	200003e4 	.word	0x200003e4
     4ec:	20000400 	.word	0x20000400
     4f0:	20000230 	.word	0x20000230
     4f4:	000006e9 	.word	0x000006e9
     4f8:	00005451 	.word	0x00005451

000004fc <udi_hid_generic_battery5_setup>:

bool udi_hid_generic_battery5_setup(void)
{
     4fc:	b598      	push	{r3, r4, r7, lr}
     4fe:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_generic_battery5_rate,
     500:	4804      	ldr	r0, [pc, #16]	; (514 <udi_hid_generic_battery5_setup+0x18>)
     502:	4905      	ldr	r1, [pc, #20]	; (518 <udi_hid_generic_battery5_setup+0x1c>)
     504:	4a05      	ldr	r2, [pc, #20]	; (51c <udi_hid_generic_battery5_setup+0x20>)
     506:	4b06      	ldr	r3, [pc, #24]	; (520 <udi_hid_generic_battery5_setup+0x24>)
     508:	4c06      	ldr	r4, [pc, #24]	; (524 <udi_hid_generic_battery5_setup+0x28>)
     50a:	47a0      	blx	r4
     50c:	1c03      	adds	r3, r0, #0
			&udi_hid_generic_battery5_protocol,
			(uint8_t *) &udi_hid_generic_battery5_report_desc,
			udi_hid_generic_battery5_setreport);
}
     50e:	1c18      	adds	r0, r3, #0
     510:	46bd      	mov	sp, r7
     512:	bd98      	pop	{r3, r4, r7, pc}
     514:	200003e8 	.word	0x200003e8
     518:	20000404 	.word	0x20000404
     51c:	20000258 	.word	0x20000258
     520:	00000739 	.word	0x00000739
     524:	00005451 	.word	0x00005451

00000528 <udi_hid_generic_battery6_setup>:

bool udi_hid_generic_battery6_setup(void)
{
     528:	b598      	push	{r3, r4, r7, lr}
     52a:	af00      	add	r7, sp, #0
	return udi_hid_setup(&udi_hid_generic_battery6_rate,
     52c:	4804      	ldr	r0, [pc, #16]	; (540 <udi_hid_generic_battery6_setup+0x18>)
     52e:	4905      	ldr	r1, [pc, #20]	; (544 <udi_hid_generic_battery6_setup+0x1c>)
     530:	4a05      	ldr	r2, [pc, #20]	; (548 <udi_hid_generic_battery6_setup+0x20>)
     532:	4b06      	ldr	r3, [pc, #24]	; (54c <udi_hid_generic_battery6_setup+0x24>)
     534:	4c06      	ldr	r4, [pc, #24]	; (550 <udi_hid_generic_battery6_setup+0x28>)
     536:	47a0      	blx	r4
     538:	1c03      	adds	r3, r0, #0
			&udi_hid_generic_battery6_protocol,
			(uint8_t *) &udi_hid_generic_battery6_report_desc,
			udi_hid_generic_battery6_setreport);
}
     53a:	1c18      	adds	r0, r3, #0
     53c:	46bd      	mov	sp, r7
     53e:	bd98      	pop	{r3, r4, r7, pc}
     540:	200003ec 	.word	0x200003ec
     544:	20000408 	.word	0x20000408
     548:	20000280 	.word	0x20000280
     54c:	00000789 	.word	0x00000789
     550:	00005451 	.word	0x00005451

00000554 <udi_hid_generic_charger_getsetting>:


uint8_t udi_hid_generic_charger_getsetting(void)
{
     554:	b580      	push	{r7, lr}
     556:	af00      	add	r7, sp, #0
	return 0;
     558:	2300      	movs	r3, #0
}
     55a:	1c18      	adds	r0, r3, #0
     55c:	46bd      	mov	sp, r7
     55e:	bd80      	pop	{r7, pc}

00000560 <udi_hid_generic_battery1_getsetting>:

uint8_t udi_hid_generic_battery1_getsetting(void)
{
     560:	b580      	push	{r7, lr}
     562:	af00      	add	r7, sp, #0
	return 0;
     564:	2300      	movs	r3, #0
}
     566:	1c18      	adds	r0, r3, #0
     568:	46bd      	mov	sp, r7
     56a:	bd80      	pop	{r7, pc}

0000056c <udi_hid_generic_battery2_getsetting>:

uint8_t udi_hid_generic_battery2_getsetting(void)
{
     56c:	b580      	push	{r7, lr}
     56e:	af00      	add	r7, sp, #0
	return 0;
     570:	2300      	movs	r3, #0
}
     572:	1c18      	adds	r0, r3, #0
     574:	46bd      	mov	sp, r7
     576:	bd80      	pop	{r7, pc}

00000578 <udi_hid_generic_battery3_getsetting>:

uint8_t udi_hid_generic_battery3_getsetting(void)
{
     578:	b580      	push	{r7, lr}
     57a:	af00      	add	r7, sp, #0
	return 0;
     57c:	2300      	movs	r3, #0
}
     57e:	1c18      	adds	r0, r3, #0
     580:	46bd      	mov	sp, r7
     582:	bd80      	pop	{r7, pc}

00000584 <udi_hid_generic_battery4_getsetting>:

uint8_t udi_hid_generic_battery4_getsetting(void)
{
     584:	b580      	push	{r7, lr}
     586:	af00      	add	r7, sp, #0
	return 0;
     588:	2300      	movs	r3, #0
}
     58a:	1c18      	adds	r0, r3, #0
     58c:	46bd      	mov	sp, r7
     58e:	bd80      	pop	{r7, pc}

00000590 <udi_hid_generic_battery5_getsetting>:

uint8_t udi_hid_generic_battery5_getsetting(void)
{
     590:	b580      	push	{r7, lr}
     592:	af00      	add	r7, sp, #0
	return 0;
     594:	2300      	movs	r3, #0
}
     596:	1c18      	adds	r0, r3, #0
     598:	46bd      	mov	sp, r7
     59a:	bd80      	pop	{r7, pc}

0000059c <udi_hid_generic_battery6_getsetting>:

uint8_t udi_hid_generic_battery6_getsetting(void)
{
     59c:	b580      	push	{r7, lr}
     59e:	af00      	add	r7, sp, #0
	return 0;
     5a0:	2300      	movs	r3, #0
}
     5a2:	1c18      	adds	r0, r3, #0
     5a4:	46bd      	mov	sp, r7
     5a6:	bd80      	pop	{r7, pc}

000005a8 <udi_hid_generic_charger_setreport>:

static bool udi_hid_generic_charger_setreport(void)
{
     5a8:	b580      	push	{r7, lr}
     5aa:	af00      	add	r7, sp, #0
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     5ac:	4b0f      	ldr	r3, [pc, #60]	; (5ec <udi_hid_generic_charger_setreport+0x44>)
     5ae:	885b      	ldrh	r3, [r3, #2]
     5b0:	0a1b      	lsrs	r3, r3, #8
     5b2:	b29b      	uxth	r3, r3
     5b4:	2b03      	cmp	r3, #3
     5b6:	d115      	bne.n	5e4 <udi_hid_generic_charger_setreport+0x3c>
	&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     5b8:	4b0c      	ldr	r3, [pc, #48]	; (5ec <udi_hid_generic_charger_setreport+0x44>)
     5ba:	885a      	ldrh	r2, [r3, #2]
     5bc:	23ff      	movs	r3, #255	; 0xff
     5be:	4013      	ands	r3, r2
     5c0:	b29b      	uxth	r3, r3
     5c2:	2b00      	cmp	r3, #0
     5c4:	d10e      	bne.n	5e4 <udi_hid_generic_charger_setreport+0x3c>
	&& (sizeof(udi_hid_generic_charger_report_feature) ==
	udd_g_ctrlreq.req.wLength)) {
     5c6:	4b09      	ldr	r3, [pc, #36]	; (5ec <udi_hid_generic_charger_setreport+0x44>)
     5c8:	88db      	ldrh	r3, [r3, #6]

static bool udi_hid_generic_charger_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
	&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
	&& (sizeof(udi_hid_generic_charger_report_feature) ==
     5ca:	2b04      	cmp	r3, #4
     5cc:	d10a      	bne.n	5e4 <udi_hid_generic_charger_setreport+0x3c>
	udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     5ce:	4b07      	ldr	r3, [pc, #28]	; (5ec <udi_hid_generic_charger_setreport+0x44>)
     5d0:	4a07      	ldr	r2, [pc, #28]	; (5f0 <udi_hid_generic_charger_setreport+0x48>)
     5d2:	609a      	str	r2, [r3, #8]
		(uint8_t *) & udi_hid_generic_charger_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_charger_setfeature_valid;
     5d4:	4b05      	ldr	r3, [pc, #20]	; (5ec <udi_hid_generic_charger_setreport+0x44>)
     5d6:	4a07      	ldr	r2, [pc, #28]	; (5f4 <udi_hid_generic_charger_setreport+0x4c>)
     5d8:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size =
     5da:	4b04      	ldr	r3, [pc, #16]	; (5ec <udi_hid_generic_charger_setreport+0x44>)
     5dc:	2204      	movs	r2, #4
     5de:	819a      	strh	r2, [r3, #12]
		sizeof(udi_hid_generic_charger_report_feature);
		return true;
     5e0:	2301      	movs	r3, #1
     5e2:	e000      	b.n	5e6 <udi_hid_generic_charger_setreport+0x3e>
	}
	return false;
     5e4:	2300      	movs	r3, #0
}
     5e6:	1c18      	adds	r0, r3, #0
     5e8:	46bd      	mov	sp, r7
     5ea:	bd80      	pop	{r7, pc}
     5ec:	20000c9c 	.word	0x20000c9c
     5f0:	200005d4 	.word	0x200005d4
     5f4:	00000ce1 	.word	0x00000ce1

000005f8 <udi_hid_generic_battery1_setreport>:

static bool udi_hid_generic_battery1_setreport(void)
{
     5f8:	b580      	push	{r7, lr}
     5fa:	af00      	add	r7, sp, #0
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     5fc:	4b0f      	ldr	r3, [pc, #60]	; (63c <udi_hid_generic_battery1_setreport+0x44>)
     5fe:	885b      	ldrh	r3, [r3, #2]
     600:	0a1b      	lsrs	r3, r3, #8
     602:	b29b      	uxth	r3, r3
     604:	2b03      	cmp	r3, #3
     606:	d115      	bne.n	634 <udi_hid_generic_battery1_setreport+0x3c>
	&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     608:	4b0c      	ldr	r3, [pc, #48]	; (63c <udi_hid_generic_battery1_setreport+0x44>)
     60a:	885a      	ldrh	r2, [r3, #2]
     60c:	23ff      	movs	r3, #255	; 0xff
     60e:	4013      	ands	r3, r2
     610:	b29b      	uxth	r3, r3
     612:	2b00      	cmp	r3, #0
     614:	d10e      	bne.n	634 <udi_hid_generic_battery1_setreport+0x3c>
	&& (sizeof(udi_hid_generic_battery1_report_feature) ==
	udd_g_ctrlreq.req.wLength)) {
     616:	4b09      	ldr	r3, [pc, #36]	; (63c <udi_hid_generic_battery1_setreport+0x44>)
     618:	88db      	ldrh	r3, [r3, #6]

static bool udi_hid_generic_battery1_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
	&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
	&& (sizeof(udi_hid_generic_battery1_report_feature) ==
     61a:	2b04      	cmp	r3, #4
     61c:	d10a      	bne.n	634 <udi_hid_generic_battery1_setreport+0x3c>
	udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     61e:	4b07      	ldr	r3, [pc, #28]	; (63c <udi_hid_generic_battery1_setreport+0x44>)
     620:	4a07      	ldr	r2, [pc, #28]	; (640 <udi_hid_generic_battery1_setreport+0x48>)
     622:	609a      	str	r2, [r3, #8]
		(uint8_t *) & udi_hid_generic_battery1_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_battery1_setfeature_valid;
     624:	4b05      	ldr	r3, [pc, #20]	; (63c <udi_hid_generic_battery1_setreport+0x44>)
     626:	4a07      	ldr	r2, [pc, #28]	; (644 <udi_hid_generic_battery1_setreport+0x4c>)
     628:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size =
     62a:	4b04      	ldr	r3, [pc, #16]	; (63c <udi_hid_generic_battery1_setreport+0x44>)
     62c:	2204      	movs	r2, #4
     62e:	819a      	strh	r2, [r3, #12]
		sizeof(udi_hid_generic_battery1_report_feature);
		return true;
     630:	2301      	movs	r3, #1
     632:	e000      	b.n	636 <udi_hid_generic_battery1_setreport+0x3e>
	}
	return false;
     634:	2300      	movs	r3, #0
}
     636:	1c18      	adds	r0, r3, #0
     638:	46bd      	mov	sp, r7
     63a:	bd80      	pop	{r7, pc}
     63c:	20000c9c 	.word	0x20000c9c
     640:	200005d8 	.word	0x200005d8
     644:	00000d09 	.word	0x00000d09

00000648 <udi_hid_generic_battery2_setreport>:

static bool udi_hid_generic_battery2_setreport(void)
{
     648:	b580      	push	{r7, lr}
     64a:	af00      	add	r7, sp, #0
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     64c:	4b0f      	ldr	r3, [pc, #60]	; (68c <udi_hid_generic_battery2_setreport+0x44>)
     64e:	885b      	ldrh	r3, [r3, #2]
     650:	0a1b      	lsrs	r3, r3, #8
     652:	b29b      	uxth	r3, r3
     654:	2b03      	cmp	r3, #3
     656:	d115      	bne.n	684 <udi_hid_generic_battery2_setreport+0x3c>
	&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     658:	4b0c      	ldr	r3, [pc, #48]	; (68c <udi_hid_generic_battery2_setreport+0x44>)
     65a:	885a      	ldrh	r2, [r3, #2]
     65c:	23ff      	movs	r3, #255	; 0xff
     65e:	4013      	ands	r3, r2
     660:	b29b      	uxth	r3, r3
     662:	2b00      	cmp	r3, #0
     664:	d10e      	bne.n	684 <udi_hid_generic_battery2_setreport+0x3c>
	&& (sizeof(udi_hid_generic_battery2_report_feature) ==
	udd_g_ctrlreq.req.wLength)) {
     666:	4b09      	ldr	r3, [pc, #36]	; (68c <udi_hid_generic_battery2_setreport+0x44>)
     668:	88db      	ldrh	r3, [r3, #6]

static bool udi_hid_generic_battery2_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
	&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
	&& (sizeof(udi_hid_generic_battery2_report_feature) ==
     66a:	2b04      	cmp	r3, #4
     66c:	d10a      	bne.n	684 <udi_hid_generic_battery2_setreport+0x3c>
	udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     66e:	4b07      	ldr	r3, [pc, #28]	; (68c <udi_hid_generic_battery2_setreport+0x44>)
     670:	4a07      	ldr	r2, [pc, #28]	; (690 <udi_hid_generic_battery2_setreport+0x48>)
     672:	609a      	str	r2, [r3, #8]
		(uint8_t *) & udi_hid_generic_battery2_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_battery2_setfeature_valid;
     674:	4b05      	ldr	r3, [pc, #20]	; (68c <udi_hid_generic_battery2_setreport+0x44>)
     676:	4a07      	ldr	r2, [pc, #28]	; (694 <udi_hid_generic_battery2_setreport+0x4c>)
     678:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size =
     67a:	4b04      	ldr	r3, [pc, #16]	; (68c <udi_hid_generic_battery2_setreport+0x44>)
     67c:	2204      	movs	r2, #4
     67e:	819a      	strh	r2, [r3, #12]
		sizeof(udi_hid_generic_battery2_report_feature);
		return true;
     680:	2301      	movs	r3, #1
     682:	e000      	b.n	686 <udi_hid_generic_battery2_setreport+0x3e>
	}
	return false;
     684:	2300      	movs	r3, #0
}
     686:	1c18      	adds	r0, r3, #0
     688:	46bd      	mov	sp, r7
     68a:	bd80      	pop	{r7, pc}
     68c:	20000c9c 	.word	0x20000c9c
     690:	200005dc 	.word	0x200005dc
     694:	00000d31 	.word	0x00000d31

00000698 <udi_hid_generic_battery3_setreport>:

static bool udi_hid_generic_battery3_setreport(void)
{
     698:	b580      	push	{r7, lr}
     69a:	af00      	add	r7, sp, #0
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     69c:	4b0f      	ldr	r3, [pc, #60]	; (6dc <udi_hid_generic_battery3_setreport+0x44>)
     69e:	885b      	ldrh	r3, [r3, #2]
     6a0:	0a1b      	lsrs	r3, r3, #8
     6a2:	b29b      	uxth	r3, r3
     6a4:	2b03      	cmp	r3, #3
     6a6:	d115      	bne.n	6d4 <udi_hid_generic_battery3_setreport+0x3c>
	&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     6a8:	4b0c      	ldr	r3, [pc, #48]	; (6dc <udi_hid_generic_battery3_setreport+0x44>)
     6aa:	885a      	ldrh	r2, [r3, #2]
     6ac:	23ff      	movs	r3, #255	; 0xff
     6ae:	4013      	ands	r3, r2
     6b0:	b29b      	uxth	r3, r3
     6b2:	2b00      	cmp	r3, #0
     6b4:	d10e      	bne.n	6d4 <udi_hid_generic_battery3_setreport+0x3c>
	&& (sizeof(udi_hid_generic_battery3_report_feature) ==
	udd_g_ctrlreq.req.wLength)) {
     6b6:	4b09      	ldr	r3, [pc, #36]	; (6dc <udi_hid_generic_battery3_setreport+0x44>)
     6b8:	88db      	ldrh	r3, [r3, #6]

static bool udi_hid_generic_battery3_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
	&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
	&& (sizeof(udi_hid_generic_battery3_report_feature) ==
     6ba:	2b04      	cmp	r3, #4
     6bc:	d10a      	bne.n	6d4 <udi_hid_generic_battery3_setreport+0x3c>
	udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     6be:	4b07      	ldr	r3, [pc, #28]	; (6dc <udi_hid_generic_battery3_setreport+0x44>)
     6c0:	4a07      	ldr	r2, [pc, #28]	; (6e0 <udi_hid_generic_battery3_setreport+0x48>)
     6c2:	609a      	str	r2, [r3, #8]
		(uint8_t *) & udi_hid_generic_battery3_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_battery3_setfeature_valid;
     6c4:	4b05      	ldr	r3, [pc, #20]	; (6dc <udi_hid_generic_battery3_setreport+0x44>)
     6c6:	4a07      	ldr	r2, [pc, #28]	; (6e4 <udi_hid_generic_battery3_setreport+0x4c>)
     6c8:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size =
     6ca:	4b04      	ldr	r3, [pc, #16]	; (6dc <udi_hid_generic_battery3_setreport+0x44>)
     6cc:	2204      	movs	r2, #4
     6ce:	819a      	strh	r2, [r3, #12]
		sizeof(udi_hid_generic_battery3_report_feature);
		return true;
     6d0:	2301      	movs	r3, #1
     6d2:	e000      	b.n	6d6 <udi_hid_generic_battery3_setreport+0x3e>
	}
	return false;
     6d4:	2300      	movs	r3, #0
}
     6d6:	1c18      	adds	r0, r3, #0
     6d8:	46bd      	mov	sp, r7
     6da:	bd80      	pop	{r7, pc}
     6dc:	20000c9c 	.word	0x20000c9c
     6e0:	200005e0 	.word	0x200005e0
     6e4:	00000d59 	.word	0x00000d59

000006e8 <udi_hid_generic_battery4_setreport>:

static bool udi_hid_generic_battery4_setreport(void)
{
     6e8:	b580      	push	{r7, lr}
     6ea:	af00      	add	r7, sp, #0
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     6ec:	4b0f      	ldr	r3, [pc, #60]	; (72c <udi_hid_generic_battery4_setreport+0x44>)
     6ee:	885b      	ldrh	r3, [r3, #2]
     6f0:	0a1b      	lsrs	r3, r3, #8
     6f2:	b29b      	uxth	r3, r3
     6f4:	2b03      	cmp	r3, #3
     6f6:	d115      	bne.n	724 <udi_hid_generic_battery4_setreport+0x3c>
	&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     6f8:	4b0c      	ldr	r3, [pc, #48]	; (72c <udi_hid_generic_battery4_setreport+0x44>)
     6fa:	885a      	ldrh	r2, [r3, #2]
     6fc:	23ff      	movs	r3, #255	; 0xff
     6fe:	4013      	ands	r3, r2
     700:	b29b      	uxth	r3, r3
     702:	2b00      	cmp	r3, #0
     704:	d10e      	bne.n	724 <udi_hid_generic_battery4_setreport+0x3c>
	&& (sizeof(udi_hid_generic_battery4_report_feature) ==
	udd_g_ctrlreq.req.wLength)) {
     706:	4b09      	ldr	r3, [pc, #36]	; (72c <udi_hid_generic_battery4_setreport+0x44>)
     708:	88db      	ldrh	r3, [r3, #6]

static bool udi_hid_generic_battery4_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
	&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
	&& (sizeof(udi_hid_generic_battery4_report_feature) ==
     70a:	2b04      	cmp	r3, #4
     70c:	d10a      	bne.n	724 <udi_hid_generic_battery4_setreport+0x3c>
	udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     70e:	4b07      	ldr	r3, [pc, #28]	; (72c <udi_hid_generic_battery4_setreport+0x44>)
     710:	4a07      	ldr	r2, [pc, #28]	; (730 <udi_hid_generic_battery4_setreport+0x48>)
     712:	609a      	str	r2, [r3, #8]
		(uint8_t *) & udi_hid_generic_battery4_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_battery4_setfeature_valid;
     714:	4b05      	ldr	r3, [pc, #20]	; (72c <udi_hid_generic_battery4_setreport+0x44>)
     716:	4a07      	ldr	r2, [pc, #28]	; (734 <udi_hid_generic_battery4_setreport+0x4c>)
     718:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size =
     71a:	4b04      	ldr	r3, [pc, #16]	; (72c <udi_hid_generic_battery4_setreport+0x44>)
     71c:	2204      	movs	r2, #4
     71e:	819a      	strh	r2, [r3, #12]
		sizeof(udi_hid_generic_battery4_report_feature);
		return true;
     720:	2301      	movs	r3, #1
     722:	e000      	b.n	726 <udi_hid_generic_battery4_setreport+0x3e>
	}
	return false;
     724:	2300      	movs	r3, #0
}
     726:	1c18      	adds	r0, r3, #0
     728:	46bd      	mov	sp, r7
     72a:	bd80      	pop	{r7, pc}
     72c:	20000c9c 	.word	0x20000c9c
     730:	200005e4 	.word	0x200005e4
     734:	00000d81 	.word	0x00000d81

00000738 <udi_hid_generic_battery5_setreport>:

static bool udi_hid_generic_battery5_setreport(void)
{
     738:	b580      	push	{r7, lr}
     73a:	af00      	add	r7, sp, #0
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     73c:	4b0f      	ldr	r3, [pc, #60]	; (77c <udi_hid_generic_battery5_setreport+0x44>)
     73e:	885b      	ldrh	r3, [r3, #2]
     740:	0a1b      	lsrs	r3, r3, #8
     742:	b29b      	uxth	r3, r3
     744:	2b03      	cmp	r3, #3
     746:	d115      	bne.n	774 <udi_hid_generic_battery5_setreport+0x3c>
	&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     748:	4b0c      	ldr	r3, [pc, #48]	; (77c <udi_hid_generic_battery5_setreport+0x44>)
     74a:	885a      	ldrh	r2, [r3, #2]
     74c:	23ff      	movs	r3, #255	; 0xff
     74e:	4013      	ands	r3, r2
     750:	b29b      	uxth	r3, r3
     752:	2b00      	cmp	r3, #0
     754:	d10e      	bne.n	774 <udi_hid_generic_battery5_setreport+0x3c>
	&& (sizeof(udi_hid_generic_battery5_report_feature) ==
	udd_g_ctrlreq.req.wLength)) {
     756:	4b09      	ldr	r3, [pc, #36]	; (77c <udi_hid_generic_battery5_setreport+0x44>)
     758:	88db      	ldrh	r3, [r3, #6]

static bool udi_hid_generic_battery5_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
	&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
	&& (sizeof(udi_hid_generic_battery5_report_feature) ==
     75a:	2b04      	cmp	r3, #4
     75c:	d10a      	bne.n	774 <udi_hid_generic_battery5_setreport+0x3c>
	udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     75e:	4b07      	ldr	r3, [pc, #28]	; (77c <udi_hid_generic_battery5_setreport+0x44>)
     760:	4a07      	ldr	r2, [pc, #28]	; (780 <udi_hid_generic_battery5_setreport+0x48>)
     762:	609a      	str	r2, [r3, #8]
		(uint8_t *) & udi_hid_generic_battery5_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_battery5_setfeature_valid;
     764:	4b05      	ldr	r3, [pc, #20]	; (77c <udi_hid_generic_battery5_setreport+0x44>)
     766:	4a07      	ldr	r2, [pc, #28]	; (784 <udi_hid_generic_battery5_setreport+0x4c>)
     768:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size =
     76a:	4b04      	ldr	r3, [pc, #16]	; (77c <udi_hid_generic_battery5_setreport+0x44>)
     76c:	2204      	movs	r2, #4
     76e:	819a      	strh	r2, [r3, #12]
		sizeof(udi_hid_generic_battery5_report_feature);
		return true;
     770:	2301      	movs	r3, #1
     772:	e000      	b.n	776 <udi_hid_generic_battery5_setreport+0x3e>
	}
	return false;
     774:	2300      	movs	r3, #0
}
     776:	1c18      	adds	r0, r3, #0
     778:	46bd      	mov	sp, r7
     77a:	bd80      	pop	{r7, pc}
     77c:	20000c9c 	.word	0x20000c9c
     780:	200005e8 	.word	0x200005e8
     784:	00000da9 	.word	0x00000da9

00000788 <udi_hid_generic_battery6_setreport>:

static bool udi_hid_generic_battery6_setreport(void)
{
     788:	b580      	push	{r7, lr}
     78a:	af00      	add	r7, sp, #0
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
     78c:	4b0f      	ldr	r3, [pc, #60]	; (7cc <udi_hid_generic_battery6_setreport+0x44>)
     78e:	885b      	ldrh	r3, [r3, #2]
     790:	0a1b      	lsrs	r3, r3, #8
     792:	b29b      	uxth	r3, r3
     794:	2b03      	cmp	r3, #3
     796:	d115      	bne.n	7c4 <udi_hid_generic_battery6_setreport+0x3c>
	&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
     798:	4b0c      	ldr	r3, [pc, #48]	; (7cc <udi_hid_generic_battery6_setreport+0x44>)
     79a:	885a      	ldrh	r2, [r3, #2]
     79c:	23ff      	movs	r3, #255	; 0xff
     79e:	4013      	ands	r3, r2
     7a0:	b29b      	uxth	r3, r3
     7a2:	2b00      	cmp	r3, #0
     7a4:	d10e      	bne.n	7c4 <udi_hid_generic_battery6_setreport+0x3c>
	&& (sizeof(udi_hid_generic_battery6_report_feature) ==
	udd_g_ctrlreq.req.wLength)) {
     7a6:	4b09      	ldr	r3, [pc, #36]	; (7cc <udi_hid_generic_battery6_setreport+0x44>)
     7a8:	88db      	ldrh	r3, [r3, #6]

static bool udi_hid_generic_battery6_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_FEATURE == (udd_g_ctrlreq.req.wValue >> 8))
	&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
	&& (sizeof(udi_hid_generic_battery6_report_feature) ==
     7aa:	2b04      	cmp	r3, #4
     7ac:	d10a      	bne.n	7c4 <udi_hid_generic_battery6_setreport+0x3c>
	udd_g_ctrlreq.req.wLength)) {
		// Feature type on report ID 0
		udd_g_ctrlreq.payload =
     7ae:	4b07      	ldr	r3, [pc, #28]	; (7cc <udi_hid_generic_battery6_setreport+0x44>)
     7b0:	4a07      	ldr	r2, [pc, #28]	; (7d0 <udi_hid_generic_battery6_setreport+0x48>)
     7b2:	609a      	str	r2, [r3, #8]
		(uint8_t *) & udi_hid_generic_battery6_report_feature;
		udd_g_ctrlreq.callback = udi_hid_generic_battery6_setfeature_valid;
     7b4:	4b05      	ldr	r3, [pc, #20]	; (7cc <udi_hid_generic_battery6_setreport+0x44>)
     7b6:	4a07      	ldr	r2, [pc, #28]	; (7d4 <udi_hid_generic_battery6_setreport+0x4c>)
     7b8:	611a      	str	r2, [r3, #16]
		udd_g_ctrlreq.payload_size =
     7ba:	4b04      	ldr	r3, [pc, #16]	; (7cc <udi_hid_generic_battery6_setreport+0x44>)
     7bc:	2204      	movs	r2, #4
     7be:	819a      	strh	r2, [r3, #12]
		sizeof(udi_hid_generic_battery6_report_feature);
		return true;
     7c0:	2301      	movs	r3, #1
     7c2:	e000      	b.n	7c6 <udi_hid_generic_battery6_setreport+0x3e>
	}
	return false;
     7c4:	2300      	movs	r3, #0
}
     7c6:	1c18      	adds	r0, r3, #0
     7c8:	46bd      	mov	sp, r7
     7ca:	bd80      	pop	{r7, pc}
     7cc:	20000c9c 	.word	0x20000c9c
     7d0:	200005ec 	.word	0x200005ec
     7d4:	00000dd1 	.word	0x00000dd1

000007d8 <udi_hid_generic_charger_send_report_in>:
//--------------------------------------------
//------ Interface for application

bool udi_hid_generic_charger_send_report_in(uint8_t *data)
{
     7d8:	b590      	push	{r4, r7, lr}
     7da:	b087      	sub	sp, #28
     7dc:	af02      	add	r7, sp, #8
     7de:	6078      	str	r0, [r7, #4]
	if (!udi_hid_generic_b_charger_report_in_free)
     7e0:	4b23      	ldr	r3, [pc, #140]	; (870 <udi_hid_generic_charger_send_report_in+0x98>)
     7e2:	781b      	ldrb	r3, [r3, #0]
     7e4:	2201      	movs	r2, #1
     7e6:	4053      	eors	r3, r2
     7e8:	b2db      	uxtb	r3, r3
     7ea:	2b00      	cmp	r3, #0
     7ec:	d001      	beq.n	7f2 <udi_hid_generic_charger_send_report_in+0x1a>
		return false;
     7ee:	2300      	movs	r3, #0
     7f0:	e039      	b.n	866 <udi_hid_generic_charger_send_report_in+0x8e>
	irqflags_t flags = cpu_irq_save();
     7f2:	4b20      	ldr	r3, [pc, #128]	; (874 <udi_hid_generic_charger_send_report_in+0x9c>)
     7f4:	4798      	blx	r3
     7f6:	1c03      	adds	r3, r0, #0
     7f8:	60fb      	str	r3, [r7, #12]
	// Fill report
	memset(&udi_hid_generic_charger_report_in, 0,
     7fa:	4b1f      	ldr	r3, [pc, #124]	; (878 <udi_hid_generic_charger_send_report_in+0xa0>)
     7fc:	1c18      	adds	r0, r3, #0
     7fe:	2100      	movs	r1, #0
     800:	2240      	movs	r2, #64	; 0x40
     802:	4b1e      	ldr	r3, [pc, #120]	; (87c <udi_hid_generic_charger_send_report_in+0xa4>)
     804:	4798      	blx	r3
		sizeof(udi_hid_generic_charger_report_in));
	memcpy(&udi_hid_generic_charger_report_in, data,
     806:	4a1c      	ldr	r2, [pc, #112]	; (878 <udi_hid_generic_charger_send_report_in+0xa0>)
     808:	687b      	ldr	r3, [r7, #4]
     80a:	1c11      	adds	r1, r2, #0
     80c:	1c1a      	adds	r2, r3, #0
     80e:	2340      	movs	r3, #64	; 0x40
     810:	1c08      	adds	r0, r1, #0
     812:	1c11      	adds	r1, r2, #0
     814:	1c1a      	adds	r2, r3, #0
     816:	4b1a      	ldr	r3, [pc, #104]	; (880 <udi_hid_generic_charger_send_report_in+0xa8>)
     818:	4798      	blx	r3
		sizeof(udi_hid_generic_charger_report_in));
	udi_hid_generic_b_charger_report_in_free =
	!udd_ep_run(UDI_HID_GENERIC_CHARGER_EP_IN,
     81a:	4b17      	ldr	r3, [pc, #92]	; (878 <udi_hid_generic_charger_send_report_in+0xa0>)
     81c:	4a19      	ldr	r2, [pc, #100]	; (884 <udi_hid_generic_charger_send_report_in+0xac>)
     81e:	9200      	str	r2, [sp, #0]
     820:	2081      	movs	r0, #129	; 0x81
     822:	2100      	movs	r1, #0
     824:	1c1a      	adds	r2, r3, #0
     826:	2340      	movs	r3, #64	; 0x40
     828:	4c17      	ldr	r4, [pc, #92]	; (888 <udi_hid_generic_charger_send_report_in+0xb0>)
     82a:	47a0      	blx	r4
     82c:	1c03      	adds	r3, r0, #0
		false,
		(uint8_t *) & udi_hid_generic_charger_report_in,
		sizeof(udi_hid_generic_charger_report_in),
		udi_hid_generic_charger_report_in_sent);
     82e:	1e5a      	subs	r2, r3, #1
     830:	4193      	sbcs	r3, r2
     832:	b2db      	uxtb	r3, r3
     834:	2201      	movs	r2, #1
     836:	4053      	eors	r3, r2
     838:	b2db      	uxtb	r3, r3
	memset(&udi_hid_generic_charger_report_in, 0,
		sizeof(udi_hid_generic_charger_report_in));
	memcpy(&udi_hid_generic_charger_report_in, data,
		sizeof(udi_hid_generic_charger_report_in));
	udi_hid_generic_b_charger_report_in_free =
	!udd_ep_run(UDI_HID_GENERIC_CHARGER_EP_IN,
     83a:	1c1a      	adds	r2, r3, #0
     83c:	2301      	movs	r3, #1
     83e:	4013      	ands	r3, r2
     840:	b2da      	uxtb	r2, r3
	// Fill report
	memset(&udi_hid_generic_charger_report_in, 0,
		sizeof(udi_hid_generic_charger_report_in));
	memcpy(&udi_hid_generic_charger_report_in, data,
		sizeof(udi_hid_generic_charger_report_in));
	udi_hid_generic_b_charger_report_in_free =
     842:	4b0b      	ldr	r3, [pc, #44]	; (870 <udi_hid_generic_charger_send_report_in+0x98>)
     844:	701a      	strb	r2, [r3, #0]
	!udd_ep_run(UDI_HID_GENERIC_CHARGER_EP_IN,
		false,
		(uint8_t *) & udi_hid_generic_charger_report_in,
		sizeof(udi_hid_generic_charger_report_in),
		udi_hid_generic_charger_report_in_sent);
	cpu_irq_restore(flags);
     846:	68fb      	ldr	r3, [r7, #12]
     848:	1c18      	adds	r0, r3, #0
     84a:	4b10      	ldr	r3, [pc, #64]	; (88c <udi_hid_generic_charger_send_report_in+0xb4>)
     84c:	4798      	blx	r3
	return !udi_hid_generic_b_charger_report_in_free;
     84e:	4b08      	ldr	r3, [pc, #32]	; (870 <udi_hid_generic_charger_send_report_in+0x98>)
     850:	781b      	ldrb	r3, [r3, #0]
     852:	1e5a      	subs	r2, r3, #1
     854:	4193      	sbcs	r3, r2
     856:	b2db      	uxtb	r3, r3
     858:	2201      	movs	r2, #1
     85a:	4053      	eors	r3, r2
     85c:	b2db      	uxtb	r3, r3
     85e:	1c1a      	adds	r2, r3, #0
     860:	2301      	movs	r3, #1
     862:	4013      	ands	r3, r2
     864:	b2db      	uxtb	r3, r3
}
     866:	1c18      	adds	r0, r3, #0
     868:	46bd      	mov	sp, r7
     86a:	b005      	add	sp, #20
     86c:	bd90      	pop	{r4, r7, pc}
     86e:	46c0      	nop			; (mov r8, r8)
     870:	2000040c 	.word	0x2000040c
     874:	000001cd 	.word	0x000001cd
     878:	20000414 	.word	0x20000414
     87c:	00006793 	.word	0x00006793
     880:	00006781 	.word	0x00006781
     884:	00000df9 	.word	0x00000df9
     888:	000027e5 	.word	0x000027e5
     88c:	00000215 	.word	0x00000215

00000890 <udi_hid_generic_battery1_send_report_in>:

bool udi_hid_generic_battery1_send_report_in(uint8_t *data)
{
     890:	b590      	push	{r4, r7, lr}
     892:	b087      	sub	sp, #28
     894:	af02      	add	r7, sp, #8
     896:	6078      	str	r0, [r7, #4]
	if (!udi_hid_generic_b_battery1_report_in_free)
     898:	4b23      	ldr	r3, [pc, #140]	; (928 <udi_hid_generic_battery1_send_report_in+0x98>)
     89a:	781b      	ldrb	r3, [r3, #0]
     89c:	2201      	movs	r2, #1
     89e:	4053      	eors	r3, r2
     8a0:	b2db      	uxtb	r3, r3
     8a2:	2b00      	cmp	r3, #0
     8a4:	d001      	beq.n	8aa <udi_hid_generic_battery1_send_report_in+0x1a>
		return false;
     8a6:	2300      	movs	r3, #0
     8a8:	e039      	b.n	91e <udi_hid_generic_battery1_send_report_in+0x8e>
	irqflags_t flags = cpu_irq_save();
     8aa:	4b20      	ldr	r3, [pc, #128]	; (92c <udi_hid_generic_battery1_send_report_in+0x9c>)
     8ac:	4798      	blx	r3
     8ae:	1c03      	adds	r3, r0, #0
     8b0:	60fb      	str	r3, [r7, #12]
	// Fill report
	memset(&udi_hid_generic_battery1_report_in, 0,
     8b2:	4b1f      	ldr	r3, [pc, #124]	; (930 <udi_hid_generic_battery1_send_report_in+0xa0>)
     8b4:	1c18      	adds	r0, r3, #0
     8b6:	2100      	movs	r1, #0
     8b8:	2240      	movs	r2, #64	; 0x40
     8ba:	4b1e      	ldr	r3, [pc, #120]	; (934 <udi_hid_generic_battery1_send_report_in+0xa4>)
     8bc:	4798      	blx	r3
		sizeof(udi_hid_generic_battery1_report_in));
	memcpy(&udi_hid_generic_battery1_report_in, data,
     8be:	4a1c      	ldr	r2, [pc, #112]	; (930 <udi_hid_generic_battery1_send_report_in+0xa0>)
     8c0:	687b      	ldr	r3, [r7, #4]
     8c2:	1c11      	adds	r1, r2, #0
     8c4:	1c1a      	adds	r2, r3, #0
     8c6:	2340      	movs	r3, #64	; 0x40
     8c8:	1c08      	adds	r0, r1, #0
     8ca:	1c11      	adds	r1, r2, #0
     8cc:	1c1a      	adds	r2, r3, #0
     8ce:	4b1a      	ldr	r3, [pc, #104]	; (938 <udi_hid_generic_battery1_send_report_in+0xa8>)
     8d0:	4798      	blx	r3
		sizeof(udi_hid_generic_battery1_report_in));
	udi_hid_generic_b_battery1_report_in_free =
	!udd_ep_run(UDI_HID_GENERIC_BATTERY1_EP_IN,
     8d2:	4b17      	ldr	r3, [pc, #92]	; (930 <udi_hid_generic_battery1_send_report_in+0xa0>)
     8d4:	4a19      	ldr	r2, [pc, #100]	; (93c <udi_hid_generic_battery1_send_report_in+0xac>)
     8d6:	9200      	str	r2, [sp, #0]
     8d8:	2082      	movs	r0, #130	; 0x82
     8da:	2100      	movs	r1, #0
     8dc:	1c1a      	adds	r2, r3, #0
     8de:	2340      	movs	r3, #64	; 0x40
     8e0:	4c17      	ldr	r4, [pc, #92]	; (940 <udi_hid_generic_battery1_send_report_in+0xb0>)
     8e2:	47a0      	blx	r4
     8e4:	1c03      	adds	r3, r0, #0
		false,
		(uint8_t *) & udi_hid_generic_battery1_report_in,
		sizeof(udi_hid_generic_battery1_report_in),
		udi_hid_generic_battery1_report_in_sent);
     8e6:	1e5a      	subs	r2, r3, #1
     8e8:	4193      	sbcs	r3, r2
     8ea:	b2db      	uxtb	r3, r3
     8ec:	2201      	movs	r2, #1
     8ee:	4053      	eors	r3, r2
     8f0:	b2db      	uxtb	r3, r3
	memset(&udi_hid_generic_battery1_report_in, 0,
		sizeof(udi_hid_generic_battery1_report_in));
	memcpy(&udi_hid_generic_battery1_report_in, data,
		sizeof(udi_hid_generic_battery1_report_in));
	udi_hid_generic_b_battery1_report_in_free =
	!udd_ep_run(UDI_HID_GENERIC_BATTERY1_EP_IN,
     8f2:	1c1a      	adds	r2, r3, #0
     8f4:	2301      	movs	r3, #1
     8f6:	4013      	ands	r3, r2
     8f8:	b2da      	uxtb	r2, r3
	// Fill report
	memset(&udi_hid_generic_battery1_report_in, 0,
		sizeof(udi_hid_generic_battery1_report_in));
	memcpy(&udi_hid_generic_battery1_report_in, data,
		sizeof(udi_hid_generic_battery1_report_in));
	udi_hid_generic_b_battery1_report_in_free =
     8fa:	4b0b      	ldr	r3, [pc, #44]	; (928 <udi_hid_generic_battery1_send_report_in+0x98>)
     8fc:	701a      	strb	r2, [r3, #0]
	!udd_ep_run(UDI_HID_GENERIC_BATTERY1_EP_IN,
		false,
		(uint8_t *) & udi_hid_generic_battery1_report_in,
		sizeof(udi_hid_generic_battery1_report_in),
		udi_hid_generic_battery1_report_in_sent);
	cpu_irq_restore(flags);
     8fe:	68fb      	ldr	r3, [r7, #12]
     900:	1c18      	adds	r0, r3, #0
     902:	4b10      	ldr	r3, [pc, #64]	; (944 <udi_hid_generic_battery1_send_report_in+0xb4>)
     904:	4798      	blx	r3
	return !udi_hid_generic_b_battery1_report_in_free;
     906:	4b08      	ldr	r3, [pc, #32]	; (928 <udi_hid_generic_battery1_send_report_in+0x98>)
     908:	781b      	ldrb	r3, [r3, #0]
     90a:	1e5a      	subs	r2, r3, #1
     90c:	4193      	sbcs	r3, r2
     90e:	b2db      	uxtb	r3, r3
     910:	2201      	movs	r2, #1
     912:	4053      	eors	r3, r2
     914:	b2db      	uxtb	r3, r3
     916:	1c1a      	adds	r2, r3, #0
     918:	2301      	movs	r3, #1
     91a:	4013      	ands	r3, r2
     91c:	b2db      	uxtb	r3, r3
}
     91e:	1c18      	adds	r0, r3, #0
     920:	46bd      	mov	sp, r7
     922:	b005      	add	sp, #20
     924:	bd90      	pop	{r4, r7, pc}
     926:	46c0      	nop			; (mov r8, r8)
     928:	2000040d 	.word	0x2000040d
     92c:	000001cd 	.word	0x000001cd
     930:	20000454 	.word	0x20000454
     934:	00006793 	.word	0x00006793
     938:	00006781 	.word	0x00006781
     93c:	00000e1d 	.word	0x00000e1d
     940:	000027e5 	.word	0x000027e5
     944:	00000215 	.word	0x00000215

00000948 <udi_hid_generic_battery2_send_report_in>:

bool udi_hid_generic_battery2_send_report_in(uint8_t *data)
{
     948:	b590      	push	{r4, r7, lr}
     94a:	b087      	sub	sp, #28
     94c:	af02      	add	r7, sp, #8
     94e:	6078      	str	r0, [r7, #4]
	if (!udi_hid_generic_b_battery2_report_in_free)
     950:	4b23      	ldr	r3, [pc, #140]	; (9e0 <udi_hid_generic_battery2_send_report_in+0x98>)
     952:	781b      	ldrb	r3, [r3, #0]
     954:	2201      	movs	r2, #1
     956:	4053      	eors	r3, r2
     958:	b2db      	uxtb	r3, r3
     95a:	2b00      	cmp	r3, #0
     95c:	d001      	beq.n	962 <udi_hid_generic_battery2_send_report_in+0x1a>
		return false;
     95e:	2300      	movs	r3, #0
     960:	e039      	b.n	9d6 <udi_hid_generic_battery2_send_report_in+0x8e>
	irqflags_t flags = cpu_irq_save();
     962:	4b20      	ldr	r3, [pc, #128]	; (9e4 <udi_hid_generic_battery2_send_report_in+0x9c>)
     964:	4798      	blx	r3
     966:	1c03      	adds	r3, r0, #0
     968:	60fb      	str	r3, [r7, #12]
	// Fill report
	memset(&udi_hid_generic_battery2_report_in, 0,
     96a:	4b1f      	ldr	r3, [pc, #124]	; (9e8 <udi_hid_generic_battery2_send_report_in+0xa0>)
     96c:	1c18      	adds	r0, r3, #0
     96e:	2100      	movs	r1, #0
     970:	2240      	movs	r2, #64	; 0x40
     972:	4b1e      	ldr	r3, [pc, #120]	; (9ec <udi_hid_generic_battery2_send_report_in+0xa4>)
     974:	4798      	blx	r3
		sizeof(udi_hid_generic_battery2_report_in));
	memcpy(&udi_hid_generic_battery2_report_in, data,
     976:	4a1c      	ldr	r2, [pc, #112]	; (9e8 <udi_hid_generic_battery2_send_report_in+0xa0>)
     978:	687b      	ldr	r3, [r7, #4]
     97a:	1c11      	adds	r1, r2, #0
     97c:	1c1a      	adds	r2, r3, #0
     97e:	2340      	movs	r3, #64	; 0x40
     980:	1c08      	adds	r0, r1, #0
     982:	1c11      	adds	r1, r2, #0
     984:	1c1a      	adds	r2, r3, #0
     986:	4b1a      	ldr	r3, [pc, #104]	; (9f0 <udi_hid_generic_battery2_send_report_in+0xa8>)
     988:	4798      	blx	r3
		sizeof(udi_hid_generic_battery2_report_in));
	udi_hid_generic_b_battery2_report_in_free =
	!udd_ep_run(UDI_HID_GENERIC_BATTERY2_EP_IN,
     98a:	4b17      	ldr	r3, [pc, #92]	; (9e8 <udi_hid_generic_battery2_send_report_in+0xa0>)
     98c:	4a19      	ldr	r2, [pc, #100]	; (9f4 <udi_hid_generic_battery2_send_report_in+0xac>)
     98e:	9200      	str	r2, [sp, #0]
     990:	2083      	movs	r0, #131	; 0x83
     992:	2100      	movs	r1, #0
     994:	1c1a      	adds	r2, r3, #0
     996:	2340      	movs	r3, #64	; 0x40
     998:	4c17      	ldr	r4, [pc, #92]	; (9f8 <udi_hid_generic_battery2_send_report_in+0xb0>)
     99a:	47a0      	blx	r4
     99c:	1c03      	adds	r3, r0, #0
		false,
	(uint8_t *) & udi_hid_generic_battery2_report_in,
		sizeof(udi_hid_generic_battery2_report_in),
		udi_hid_generic_battery2_report_in_sent);
     99e:	1e5a      	subs	r2, r3, #1
     9a0:	4193      	sbcs	r3, r2
     9a2:	b2db      	uxtb	r3, r3
     9a4:	2201      	movs	r2, #1
     9a6:	4053      	eors	r3, r2
     9a8:	b2db      	uxtb	r3, r3
	memset(&udi_hid_generic_battery2_report_in, 0,
		sizeof(udi_hid_generic_battery2_report_in));
	memcpy(&udi_hid_generic_battery2_report_in, data,
		sizeof(udi_hid_generic_battery2_report_in));
	udi_hid_generic_b_battery2_report_in_free =
	!udd_ep_run(UDI_HID_GENERIC_BATTERY2_EP_IN,
     9aa:	1c1a      	adds	r2, r3, #0
     9ac:	2301      	movs	r3, #1
     9ae:	4013      	ands	r3, r2
     9b0:	b2da      	uxtb	r2, r3
	// Fill report
	memset(&udi_hid_generic_battery2_report_in, 0,
		sizeof(udi_hid_generic_battery2_report_in));
	memcpy(&udi_hid_generic_battery2_report_in, data,
		sizeof(udi_hid_generic_battery2_report_in));
	udi_hid_generic_b_battery2_report_in_free =
     9b2:	4b0b      	ldr	r3, [pc, #44]	; (9e0 <udi_hid_generic_battery2_send_report_in+0x98>)
     9b4:	701a      	strb	r2, [r3, #0]
	!udd_ep_run(UDI_HID_GENERIC_BATTERY2_EP_IN,
		false,
	(uint8_t *) & udi_hid_generic_battery2_report_in,
		sizeof(udi_hid_generic_battery2_report_in),
		udi_hid_generic_battery2_report_in_sent);
	cpu_irq_restore(flags);
     9b6:	68fb      	ldr	r3, [r7, #12]
     9b8:	1c18      	adds	r0, r3, #0
     9ba:	4b10      	ldr	r3, [pc, #64]	; (9fc <udi_hid_generic_battery2_send_report_in+0xb4>)
     9bc:	4798      	blx	r3
	return !udi_hid_generic_b_battery2_report_in_free;
     9be:	4b08      	ldr	r3, [pc, #32]	; (9e0 <udi_hid_generic_battery2_send_report_in+0x98>)
     9c0:	781b      	ldrb	r3, [r3, #0]
     9c2:	1e5a      	subs	r2, r3, #1
     9c4:	4193      	sbcs	r3, r2
     9c6:	b2db      	uxtb	r3, r3
     9c8:	2201      	movs	r2, #1
     9ca:	4053      	eors	r3, r2
     9cc:	b2db      	uxtb	r3, r3
     9ce:	1c1a      	adds	r2, r3, #0
     9d0:	2301      	movs	r3, #1
     9d2:	4013      	ands	r3, r2
     9d4:	b2db      	uxtb	r3, r3
}
     9d6:	1c18      	adds	r0, r3, #0
     9d8:	46bd      	mov	sp, r7
     9da:	b005      	add	sp, #20
     9dc:	bd90      	pop	{r4, r7, pc}
     9de:	46c0      	nop			; (mov r8, r8)
     9e0:	2000040e 	.word	0x2000040e
     9e4:	000001cd 	.word	0x000001cd
     9e8:	20000494 	.word	0x20000494
     9ec:	00006793 	.word	0x00006793
     9f0:	00006781 	.word	0x00006781
     9f4:	00000e41 	.word	0x00000e41
     9f8:	000027e5 	.word	0x000027e5
     9fc:	00000215 	.word	0x00000215

00000a00 <udi_hid_generic_battery3_send_report_in>:

bool udi_hid_generic_battery3_send_report_in(uint8_t *data)
{
     a00:	b590      	push	{r4, r7, lr}
     a02:	b087      	sub	sp, #28
     a04:	af02      	add	r7, sp, #8
     a06:	6078      	str	r0, [r7, #4]
	if (!udi_hid_generic_b_battery3_report_in_free)
     a08:	4b23      	ldr	r3, [pc, #140]	; (a98 <udi_hid_generic_battery3_send_report_in+0x98>)
     a0a:	781b      	ldrb	r3, [r3, #0]
     a0c:	2201      	movs	r2, #1
     a0e:	4053      	eors	r3, r2
     a10:	b2db      	uxtb	r3, r3
     a12:	2b00      	cmp	r3, #0
     a14:	d001      	beq.n	a1a <udi_hid_generic_battery3_send_report_in+0x1a>
		return false;
     a16:	2300      	movs	r3, #0
     a18:	e039      	b.n	a8e <udi_hid_generic_battery3_send_report_in+0x8e>
	irqflags_t flags = cpu_irq_save();
     a1a:	4b20      	ldr	r3, [pc, #128]	; (a9c <udi_hid_generic_battery3_send_report_in+0x9c>)
     a1c:	4798      	blx	r3
     a1e:	1c03      	adds	r3, r0, #0
     a20:	60fb      	str	r3, [r7, #12]
	// Fill report
	memset(&udi_hid_generic_battery3_report_in, 0,
     a22:	4b1f      	ldr	r3, [pc, #124]	; (aa0 <udi_hid_generic_battery3_send_report_in+0xa0>)
     a24:	1c18      	adds	r0, r3, #0
     a26:	2100      	movs	r1, #0
     a28:	2240      	movs	r2, #64	; 0x40
     a2a:	4b1e      	ldr	r3, [pc, #120]	; (aa4 <udi_hid_generic_battery3_send_report_in+0xa4>)
     a2c:	4798      	blx	r3
		sizeof(udi_hid_generic_battery3_report_in));
	memcpy(&udi_hid_generic_battery3_report_in, data,
     a2e:	4a1c      	ldr	r2, [pc, #112]	; (aa0 <udi_hid_generic_battery3_send_report_in+0xa0>)
     a30:	687b      	ldr	r3, [r7, #4]
     a32:	1c11      	adds	r1, r2, #0
     a34:	1c1a      	adds	r2, r3, #0
     a36:	2340      	movs	r3, #64	; 0x40
     a38:	1c08      	adds	r0, r1, #0
     a3a:	1c11      	adds	r1, r2, #0
     a3c:	1c1a      	adds	r2, r3, #0
     a3e:	4b1a      	ldr	r3, [pc, #104]	; (aa8 <udi_hid_generic_battery3_send_report_in+0xa8>)
     a40:	4798      	blx	r3
		sizeof(udi_hid_generic_battery3_report_in));
	udi_hid_generic_b_battery3_report_in_free =
	!udd_ep_run(UDI_HID_GENERIC_BATTERY3_EP_IN,
     a42:	4b17      	ldr	r3, [pc, #92]	; (aa0 <udi_hid_generic_battery3_send_report_in+0xa0>)
     a44:	4a19      	ldr	r2, [pc, #100]	; (aac <udi_hid_generic_battery3_send_report_in+0xac>)
     a46:	9200      	str	r2, [sp, #0]
     a48:	2084      	movs	r0, #132	; 0x84
     a4a:	2100      	movs	r1, #0
     a4c:	1c1a      	adds	r2, r3, #0
     a4e:	2340      	movs	r3, #64	; 0x40
     a50:	4c17      	ldr	r4, [pc, #92]	; (ab0 <udi_hid_generic_battery3_send_report_in+0xb0>)
     a52:	47a0      	blx	r4
     a54:	1c03      	adds	r3, r0, #0
			false,
			(uint8_t *) & udi_hid_generic_battery3_report_in,
			sizeof(udi_hid_generic_battery3_report_in),
			udi_hid_generic_battery3_report_in_sent);
     a56:	1e5a      	subs	r2, r3, #1
     a58:	4193      	sbcs	r3, r2
     a5a:	b2db      	uxtb	r3, r3
     a5c:	2201      	movs	r2, #1
     a5e:	4053      	eors	r3, r2
     a60:	b2db      	uxtb	r3, r3
	memset(&udi_hid_generic_battery3_report_in, 0,
		sizeof(udi_hid_generic_battery3_report_in));
	memcpy(&udi_hid_generic_battery3_report_in, data,
		sizeof(udi_hid_generic_battery3_report_in));
	udi_hid_generic_b_battery3_report_in_free =
	!udd_ep_run(UDI_HID_GENERIC_BATTERY3_EP_IN,
     a62:	1c1a      	adds	r2, r3, #0
     a64:	2301      	movs	r3, #1
     a66:	4013      	ands	r3, r2
     a68:	b2da      	uxtb	r2, r3
	// Fill report
	memset(&udi_hid_generic_battery3_report_in, 0,
		sizeof(udi_hid_generic_battery3_report_in));
	memcpy(&udi_hid_generic_battery3_report_in, data,
		sizeof(udi_hid_generic_battery3_report_in));
	udi_hid_generic_b_battery3_report_in_free =
     a6a:	4b0b      	ldr	r3, [pc, #44]	; (a98 <udi_hid_generic_battery3_send_report_in+0x98>)
     a6c:	701a      	strb	r2, [r3, #0]
	!udd_ep_run(UDI_HID_GENERIC_BATTERY3_EP_IN,
			false,
			(uint8_t *) & udi_hid_generic_battery3_report_in,
			sizeof(udi_hid_generic_battery3_report_in),
			udi_hid_generic_battery3_report_in_sent);
	cpu_irq_restore(flags);
     a6e:	68fb      	ldr	r3, [r7, #12]
     a70:	1c18      	adds	r0, r3, #0
     a72:	4b10      	ldr	r3, [pc, #64]	; (ab4 <udi_hid_generic_battery3_send_report_in+0xb4>)
     a74:	4798      	blx	r3
	return !udi_hid_generic_b_battery3_report_in_free;
     a76:	4b08      	ldr	r3, [pc, #32]	; (a98 <udi_hid_generic_battery3_send_report_in+0x98>)
     a78:	781b      	ldrb	r3, [r3, #0]
     a7a:	1e5a      	subs	r2, r3, #1
     a7c:	4193      	sbcs	r3, r2
     a7e:	b2db      	uxtb	r3, r3
     a80:	2201      	movs	r2, #1
     a82:	4053      	eors	r3, r2
     a84:	b2db      	uxtb	r3, r3
     a86:	1c1a      	adds	r2, r3, #0
     a88:	2301      	movs	r3, #1
     a8a:	4013      	ands	r3, r2
     a8c:	b2db      	uxtb	r3, r3
}
     a8e:	1c18      	adds	r0, r3, #0
     a90:	46bd      	mov	sp, r7
     a92:	b005      	add	sp, #20
     a94:	bd90      	pop	{r4, r7, pc}
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	2000040f 	.word	0x2000040f
     a9c:	000001cd 	.word	0x000001cd
     aa0:	200004d4 	.word	0x200004d4
     aa4:	00006793 	.word	0x00006793
     aa8:	00006781 	.word	0x00006781
     aac:	00000e65 	.word	0x00000e65
     ab0:	000027e5 	.word	0x000027e5
     ab4:	00000215 	.word	0x00000215

00000ab8 <udi_hid_generic_battery4_send_report_in>:

bool udi_hid_generic_battery4_send_report_in(uint8_t *data)
{
     ab8:	b590      	push	{r4, r7, lr}
     aba:	b087      	sub	sp, #28
     abc:	af02      	add	r7, sp, #8
     abe:	6078      	str	r0, [r7, #4]
	if (!udi_hid_generic_b_battery4_report_in_free)
     ac0:	4b23      	ldr	r3, [pc, #140]	; (b50 <udi_hid_generic_battery4_send_report_in+0x98>)
     ac2:	781b      	ldrb	r3, [r3, #0]
     ac4:	2201      	movs	r2, #1
     ac6:	4053      	eors	r3, r2
     ac8:	b2db      	uxtb	r3, r3
     aca:	2b00      	cmp	r3, #0
     acc:	d001      	beq.n	ad2 <udi_hid_generic_battery4_send_report_in+0x1a>
		return false;
     ace:	2300      	movs	r3, #0
     ad0:	e039      	b.n	b46 <udi_hid_generic_battery4_send_report_in+0x8e>
	irqflags_t flags = cpu_irq_save();
     ad2:	4b20      	ldr	r3, [pc, #128]	; (b54 <udi_hid_generic_battery4_send_report_in+0x9c>)
     ad4:	4798      	blx	r3
     ad6:	1c03      	adds	r3, r0, #0
     ad8:	60fb      	str	r3, [r7, #12]
	// Fill report
	memset(&udi_hid_generic_battery4_report_in, 0,
     ada:	4b1f      	ldr	r3, [pc, #124]	; (b58 <udi_hid_generic_battery4_send_report_in+0xa0>)
     adc:	1c18      	adds	r0, r3, #0
     ade:	2100      	movs	r1, #0
     ae0:	2240      	movs	r2, #64	; 0x40
     ae2:	4b1e      	ldr	r3, [pc, #120]	; (b5c <udi_hid_generic_battery4_send_report_in+0xa4>)
     ae4:	4798      	blx	r3
		sizeof(udi_hid_generic_battery4_report_in));
	memcpy(&udi_hid_generic_battery4_report_in, data,
     ae6:	4a1c      	ldr	r2, [pc, #112]	; (b58 <udi_hid_generic_battery4_send_report_in+0xa0>)
     ae8:	687b      	ldr	r3, [r7, #4]
     aea:	1c11      	adds	r1, r2, #0
     aec:	1c1a      	adds	r2, r3, #0
     aee:	2340      	movs	r3, #64	; 0x40
     af0:	1c08      	adds	r0, r1, #0
     af2:	1c11      	adds	r1, r2, #0
     af4:	1c1a      	adds	r2, r3, #0
     af6:	4b1a      	ldr	r3, [pc, #104]	; (b60 <udi_hid_generic_battery4_send_report_in+0xa8>)
     af8:	4798      	blx	r3
		sizeof(udi_hid_generic_battery4_report_in));
	udi_hid_generic_b_battery4_report_in_free =
		!udd_ep_run(UDI_HID_GENERIC_BATTERY4_EP_IN,
     afa:	4b17      	ldr	r3, [pc, #92]	; (b58 <udi_hid_generic_battery4_send_report_in+0xa0>)
     afc:	4a19      	ldr	r2, [pc, #100]	; (b64 <udi_hid_generic_battery4_send_report_in+0xac>)
     afe:	9200      	str	r2, [sp, #0]
     b00:	2085      	movs	r0, #133	; 0x85
     b02:	2100      	movs	r1, #0
     b04:	1c1a      	adds	r2, r3, #0
     b06:	2340      	movs	r3, #64	; 0x40
     b08:	4c17      	ldr	r4, [pc, #92]	; (b68 <udi_hid_generic_battery4_send_report_in+0xb0>)
     b0a:	47a0      	blx	r4
     b0c:	1c03      	adds	r3, r0, #0
		false,
		(uint8_t *) & udi_hid_generic_battery4_report_in,
		sizeof(udi_hid_generic_battery4_report_in),
		udi_hid_generic_battery4_report_in_sent);
     b0e:	1e5a      	subs	r2, r3, #1
     b10:	4193      	sbcs	r3, r2
     b12:	b2db      	uxtb	r3, r3
     b14:	2201      	movs	r2, #1
     b16:	4053      	eors	r3, r2
     b18:	b2db      	uxtb	r3, r3
	memset(&udi_hid_generic_battery4_report_in, 0,
		sizeof(udi_hid_generic_battery4_report_in));
	memcpy(&udi_hid_generic_battery4_report_in, data,
		sizeof(udi_hid_generic_battery4_report_in));
	udi_hid_generic_b_battery4_report_in_free =
		!udd_ep_run(UDI_HID_GENERIC_BATTERY4_EP_IN,
     b1a:	1c1a      	adds	r2, r3, #0
     b1c:	2301      	movs	r3, #1
     b1e:	4013      	ands	r3, r2
     b20:	b2da      	uxtb	r2, r3
	// Fill report
	memset(&udi_hid_generic_battery4_report_in, 0,
		sizeof(udi_hid_generic_battery4_report_in));
	memcpy(&udi_hid_generic_battery4_report_in, data,
		sizeof(udi_hid_generic_battery4_report_in));
	udi_hid_generic_b_battery4_report_in_free =
     b22:	4b0b      	ldr	r3, [pc, #44]	; (b50 <udi_hid_generic_battery4_send_report_in+0x98>)
     b24:	701a      	strb	r2, [r3, #0]
		!udd_ep_run(UDI_HID_GENERIC_BATTERY4_EP_IN,
		false,
		(uint8_t *) & udi_hid_generic_battery4_report_in,
		sizeof(udi_hid_generic_battery4_report_in),
		udi_hid_generic_battery4_report_in_sent);
	cpu_irq_restore(flags);
     b26:	68fb      	ldr	r3, [r7, #12]
     b28:	1c18      	adds	r0, r3, #0
     b2a:	4b10      	ldr	r3, [pc, #64]	; (b6c <udi_hid_generic_battery4_send_report_in+0xb4>)
     b2c:	4798      	blx	r3
	return !udi_hid_generic_b_battery4_report_in_free;
     b2e:	4b08      	ldr	r3, [pc, #32]	; (b50 <udi_hid_generic_battery4_send_report_in+0x98>)
     b30:	781b      	ldrb	r3, [r3, #0]
     b32:	1e5a      	subs	r2, r3, #1
     b34:	4193      	sbcs	r3, r2
     b36:	b2db      	uxtb	r3, r3
     b38:	2201      	movs	r2, #1
     b3a:	4053      	eors	r3, r2
     b3c:	b2db      	uxtb	r3, r3
     b3e:	1c1a      	adds	r2, r3, #0
     b40:	2301      	movs	r3, #1
     b42:	4013      	ands	r3, r2
     b44:	b2db      	uxtb	r3, r3
}
     b46:	1c18      	adds	r0, r3, #0
     b48:	46bd      	mov	sp, r7
     b4a:	b005      	add	sp, #20
     b4c:	bd90      	pop	{r4, r7, pc}
     b4e:	46c0      	nop			; (mov r8, r8)
     b50:	20000410 	.word	0x20000410
     b54:	000001cd 	.word	0x000001cd
     b58:	20000514 	.word	0x20000514
     b5c:	00006793 	.word	0x00006793
     b60:	00006781 	.word	0x00006781
     b64:	00000e89 	.word	0x00000e89
     b68:	000027e5 	.word	0x000027e5
     b6c:	00000215 	.word	0x00000215

00000b70 <udi_hid_generic_battery5_send_report_in>:

bool udi_hid_generic_battery5_send_report_in(uint8_t *data)
{
     b70:	b590      	push	{r4, r7, lr}
     b72:	b087      	sub	sp, #28
     b74:	af02      	add	r7, sp, #8
     b76:	6078      	str	r0, [r7, #4]
	if (!udi_hid_generic_b_battery5_report_in_free)
     b78:	4b23      	ldr	r3, [pc, #140]	; (c08 <udi_hid_generic_battery5_send_report_in+0x98>)
     b7a:	781b      	ldrb	r3, [r3, #0]
     b7c:	2201      	movs	r2, #1
     b7e:	4053      	eors	r3, r2
     b80:	b2db      	uxtb	r3, r3
     b82:	2b00      	cmp	r3, #0
     b84:	d001      	beq.n	b8a <udi_hid_generic_battery5_send_report_in+0x1a>
		return false;
     b86:	2300      	movs	r3, #0
     b88:	e039      	b.n	bfe <udi_hid_generic_battery5_send_report_in+0x8e>
	irqflags_t flags = cpu_irq_save();
     b8a:	4b20      	ldr	r3, [pc, #128]	; (c0c <udi_hid_generic_battery5_send_report_in+0x9c>)
     b8c:	4798      	blx	r3
     b8e:	1c03      	adds	r3, r0, #0
     b90:	60fb      	str	r3, [r7, #12]
	// Fill report
	memset(&udi_hid_generic_battery5_report_in, 0,
     b92:	4b1f      	ldr	r3, [pc, #124]	; (c10 <udi_hid_generic_battery5_send_report_in+0xa0>)
     b94:	1c18      	adds	r0, r3, #0
     b96:	2100      	movs	r1, #0
     b98:	2240      	movs	r2, #64	; 0x40
     b9a:	4b1e      	ldr	r3, [pc, #120]	; (c14 <udi_hid_generic_battery5_send_report_in+0xa4>)
     b9c:	4798      	blx	r3
		sizeof(udi_hid_generic_battery5_report_in));
	memcpy(&udi_hid_generic_battery5_report_in, data,
     b9e:	4a1c      	ldr	r2, [pc, #112]	; (c10 <udi_hid_generic_battery5_send_report_in+0xa0>)
     ba0:	687b      	ldr	r3, [r7, #4]
     ba2:	1c11      	adds	r1, r2, #0
     ba4:	1c1a      	adds	r2, r3, #0
     ba6:	2340      	movs	r3, #64	; 0x40
     ba8:	1c08      	adds	r0, r1, #0
     baa:	1c11      	adds	r1, r2, #0
     bac:	1c1a      	adds	r2, r3, #0
     bae:	4b1a      	ldr	r3, [pc, #104]	; (c18 <udi_hid_generic_battery5_send_report_in+0xa8>)
     bb0:	4798      	blx	r3
		sizeof(udi_hid_generic_battery5_report_in));
	udi_hid_generic_b_battery5_report_in_free =
		!udd_ep_run(UDI_HID_GENERIC_BATTERY5_EP_IN,
     bb2:	4b17      	ldr	r3, [pc, #92]	; (c10 <udi_hid_generic_battery5_send_report_in+0xa0>)
     bb4:	4a19      	ldr	r2, [pc, #100]	; (c1c <udi_hid_generic_battery5_send_report_in+0xac>)
     bb6:	9200      	str	r2, [sp, #0]
     bb8:	2086      	movs	r0, #134	; 0x86
     bba:	2100      	movs	r1, #0
     bbc:	1c1a      	adds	r2, r3, #0
     bbe:	2340      	movs	r3, #64	; 0x40
     bc0:	4c17      	ldr	r4, [pc, #92]	; (c20 <udi_hid_generic_battery5_send_report_in+0xb0>)
     bc2:	47a0      	blx	r4
     bc4:	1c03      	adds	r3, r0, #0
		false,
		(uint8_t *) & udi_hid_generic_battery5_report_in,
		sizeof(udi_hid_generic_battery5_report_in),
		udi_hid_generic_battery5_report_in_sent);
     bc6:	1e5a      	subs	r2, r3, #1
     bc8:	4193      	sbcs	r3, r2
     bca:	b2db      	uxtb	r3, r3
     bcc:	2201      	movs	r2, #1
     bce:	4053      	eors	r3, r2
     bd0:	b2db      	uxtb	r3, r3
	memset(&udi_hid_generic_battery5_report_in, 0,
		sizeof(udi_hid_generic_battery5_report_in));
	memcpy(&udi_hid_generic_battery5_report_in, data,
		sizeof(udi_hid_generic_battery5_report_in));
	udi_hid_generic_b_battery5_report_in_free =
		!udd_ep_run(UDI_HID_GENERIC_BATTERY5_EP_IN,
     bd2:	1c1a      	adds	r2, r3, #0
     bd4:	2301      	movs	r3, #1
     bd6:	4013      	ands	r3, r2
     bd8:	b2da      	uxtb	r2, r3
	// Fill report
	memset(&udi_hid_generic_battery5_report_in, 0,
		sizeof(udi_hid_generic_battery5_report_in));
	memcpy(&udi_hid_generic_battery5_report_in, data,
		sizeof(udi_hid_generic_battery5_report_in));
	udi_hid_generic_b_battery5_report_in_free =
     bda:	4b0b      	ldr	r3, [pc, #44]	; (c08 <udi_hid_generic_battery5_send_report_in+0x98>)
     bdc:	701a      	strb	r2, [r3, #0]
		!udd_ep_run(UDI_HID_GENERIC_BATTERY5_EP_IN,
		false,
		(uint8_t *) & udi_hid_generic_battery5_report_in,
		sizeof(udi_hid_generic_battery5_report_in),
		udi_hid_generic_battery5_report_in_sent);
	cpu_irq_restore(flags);
     bde:	68fb      	ldr	r3, [r7, #12]
     be0:	1c18      	adds	r0, r3, #0
     be2:	4b10      	ldr	r3, [pc, #64]	; (c24 <udi_hid_generic_battery5_send_report_in+0xb4>)
     be4:	4798      	blx	r3
	return !udi_hid_generic_b_battery5_report_in_free;
     be6:	4b08      	ldr	r3, [pc, #32]	; (c08 <udi_hid_generic_battery5_send_report_in+0x98>)
     be8:	781b      	ldrb	r3, [r3, #0]
     bea:	1e5a      	subs	r2, r3, #1
     bec:	4193      	sbcs	r3, r2
     bee:	b2db      	uxtb	r3, r3
     bf0:	2201      	movs	r2, #1
     bf2:	4053      	eors	r3, r2
     bf4:	b2db      	uxtb	r3, r3
     bf6:	1c1a      	adds	r2, r3, #0
     bf8:	2301      	movs	r3, #1
     bfa:	4013      	ands	r3, r2
     bfc:	b2db      	uxtb	r3, r3
}
     bfe:	1c18      	adds	r0, r3, #0
     c00:	46bd      	mov	sp, r7
     c02:	b005      	add	sp, #20
     c04:	bd90      	pop	{r4, r7, pc}
     c06:	46c0      	nop			; (mov r8, r8)
     c08:	20000411 	.word	0x20000411
     c0c:	000001cd 	.word	0x000001cd
     c10:	20000554 	.word	0x20000554
     c14:	00006793 	.word	0x00006793
     c18:	00006781 	.word	0x00006781
     c1c:	00000ead 	.word	0x00000ead
     c20:	000027e5 	.word	0x000027e5
     c24:	00000215 	.word	0x00000215

00000c28 <udi_hid_generic_battery6_send_report_in>:

bool udi_hid_generic_battery6_send_report_in(uint8_t *data)
{
     c28:	b590      	push	{r4, r7, lr}
     c2a:	b087      	sub	sp, #28
     c2c:	af02      	add	r7, sp, #8
     c2e:	6078      	str	r0, [r7, #4]
	if (!udi_hid_generic_b_battery6_report_in_free)
     c30:	4b23      	ldr	r3, [pc, #140]	; (cc0 <udi_hid_generic_battery6_send_report_in+0x98>)
     c32:	781b      	ldrb	r3, [r3, #0]
     c34:	2201      	movs	r2, #1
     c36:	4053      	eors	r3, r2
     c38:	b2db      	uxtb	r3, r3
     c3a:	2b00      	cmp	r3, #0
     c3c:	d001      	beq.n	c42 <udi_hid_generic_battery6_send_report_in+0x1a>
		return false;
     c3e:	2300      	movs	r3, #0
     c40:	e039      	b.n	cb6 <udi_hid_generic_battery6_send_report_in+0x8e>
	irqflags_t flags = cpu_irq_save();
     c42:	4b20      	ldr	r3, [pc, #128]	; (cc4 <udi_hid_generic_battery6_send_report_in+0x9c>)
     c44:	4798      	blx	r3
     c46:	1c03      	adds	r3, r0, #0
     c48:	60fb      	str	r3, [r7, #12]
	// Fill report
	memset(&udi_hid_generic_battery6_report_in, 0,
     c4a:	4b1f      	ldr	r3, [pc, #124]	; (cc8 <udi_hid_generic_battery6_send_report_in+0xa0>)
     c4c:	1c18      	adds	r0, r3, #0
     c4e:	2100      	movs	r1, #0
     c50:	2240      	movs	r2, #64	; 0x40
     c52:	4b1e      	ldr	r3, [pc, #120]	; (ccc <udi_hid_generic_battery6_send_report_in+0xa4>)
     c54:	4798      	blx	r3
		sizeof(udi_hid_generic_battery6_report_in));
	memcpy(&udi_hid_generic_battery6_report_in, data,
     c56:	4a1c      	ldr	r2, [pc, #112]	; (cc8 <udi_hid_generic_battery6_send_report_in+0xa0>)
     c58:	687b      	ldr	r3, [r7, #4]
     c5a:	1c11      	adds	r1, r2, #0
     c5c:	1c1a      	adds	r2, r3, #0
     c5e:	2340      	movs	r3, #64	; 0x40
     c60:	1c08      	adds	r0, r1, #0
     c62:	1c11      	adds	r1, r2, #0
     c64:	1c1a      	adds	r2, r3, #0
     c66:	4b1a      	ldr	r3, [pc, #104]	; (cd0 <udi_hid_generic_battery6_send_report_in+0xa8>)
     c68:	4798      	blx	r3
		sizeof(udi_hid_generic_battery6_report_in));
	udi_hid_generic_b_battery6_report_in_free =
		!udd_ep_run(UDI_HID_GENERIC_BATTERY6_EP_IN,
     c6a:	4b17      	ldr	r3, [pc, #92]	; (cc8 <udi_hid_generic_battery6_send_report_in+0xa0>)
     c6c:	4a19      	ldr	r2, [pc, #100]	; (cd4 <udi_hid_generic_battery6_send_report_in+0xac>)
     c6e:	9200      	str	r2, [sp, #0]
     c70:	2087      	movs	r0, #135	; 0x87
     c72:	2100      	movs	r1, #0
     c74:	1c1a      	adds	r2, r3, #0
     c76:	2340      	movs	r3, #64	; 0x40
     c78:	4c17      	ldr	r4, [pc, #92]	; (cd8 <udi_hid_generic_battery6_send_report_in+0xb0>)
     c7a:	47a0      	blx	r4
     c7c:	1c03      	adds	r3, r0, #0
		false,
		(uint8_t *) & udi_hid_generic_battery6_report_in,
		sizeof(udi_hid_generic_battery6_report_in),
		udi_hid_generic_battery6_report_in_sent);
     c7e:	1e5a      	subs	r2, r3, #1
     c80:	4193      	sbcs	r3, r2
     c82:	b2db      	uxtb	r3, r3
     c84:	2201      	movs	r2, #1
     c86:	4053      	eors	r3, r2
     c88:	b2db      	uxtb	r3, r3
	memset(&udi_hid_generic_battery6_report_in, 0,
		sizeof(udi_hid_generic_battery6_report_in));
	memcpy(&udi_hid_generic_battery6_report_in, data,
		sizeof(udi_hid_generic_battery6_report_in));
	udi_hid_generic_b_battery6_report_in_free =
		!udd_ep_run(UDI_HID_GENERIC_BATTERY6_EP_IN,
     c8a:	1c1a      	adds	r2, r3, #0
     c8c:	2301      	movs	r3, #1
     c8e:	4013      	ands	r3, r2
     c90:	b2da      	uxtb	r2, r3
	// Fill report
	memset(&udi_hid_generic_battery6_report_in, 0,
		sizeof(udi_hid_generic_battery6_report_in));
	memcpy(&udi_hid_generic_battery6_report_in, data,
		sizeof(udi_hid_generic_battery6_report_in));
	udi_hid_generic_b_battery6_report_in_free =
     c92:	4b0b      	ldr	r3, [pc, #44]	; (cc0 <udi_hid_generic_battery6_send_report_in+0x98>)
     c94:	701a      	strb	r2, [r3, #0]
		!udd_ep_run(UDI_HID_GENERIC_BATTERY6_EP_IN,
		false,
		(uint8_t *) & udi_hid_generic_battery6_report_in,
		sizeof(udi_hid_generic_battery6_report_in),
		udi_hid_generic_battery6_report_in_sent);
	cpu_irq_restore(flags);
     c96:	68fb      	ldr	r3, [r7, #12]
     c98:	1c18      	adds	r0, r3, #0
     c9a:	4b10      	ldr	r3, [pc, #64]	; (cdc <udi_hid_generic_battery6_send_report_in+0xb4>)
     c9c:	4798      	blx	r3
	return !udi_hid_generic_b_battery6_report_in_free;
     c9e:	4b08      	ldr	r3, [pc, #32]	; (cc0 <udi_hid_generic_battery6_send_report_in+0x98>)
     ca0:	781b      	ldrb	r3, [r3, #0]
     ca2:	1e5a      	subs	r2, r3, #1
     ca4:	4193      	sbcs	r3, r2
     ca6:	b2db      	uxtb	r3, r3
     ca8:	2201      	movs	r2, #1
     caa:	4053      	eors	r3, r2
     cac:	b2db      	uxtb	r3, r3
     cae:	1c1a      	adds	r2, r3, #0
     cb0:	2301      	movs	r3, #1
     cb2:	4013      	ands	r3, r2
     cb4:	b2db      	uxtb	r3, r3
}
     cb6:	1c18      	adds	r0, r3, #0
     cb8:	46bd      	mov	sp, r7
     cba:	b005      	add	sp, #20
     cbc:	bd90      	pop	{r4, r7, pc}
     cbe:	46c0      	nop			; (mov r8, r8)
     cc0:	20000412 	.word	0x20000412
     cc4:	000001cd 	.word	0x000001cd
     cc8:	20000594 	.word	0x20000594
     ccc:	00006793 	.word	0x00006793
     cd0:	00006781 	.word	0x00006781
     cd4:	00000ed1 	.word	0x00000ed1
     cd8:	000027e5 	.word	0x000027e5
     cdc:	00000215 	.word	0x00000215

00000ce0 <udi_hid_generic_charger_setfeature_valid>:

//--------------------------------------------
//------ Internal routines

static void udi_hid_generic_charger_setfeature_valid(void)
{
     ce0:	b580      	push	{r7, lr}
     ce2:	af00      	add	r7, sp, #0
	if (sizeof(udi_hid_generic_charger_report_feature) != udd_g_ctrlreq.payload_size)
     ce4:	4b05      	ldr	r3, [pc, #20]	; (cfc <udi_hid_generic_charger_setfeature_valid+0x1c>)
     ce6:	899b      	ldrh	r3, [r3, #12]
     ce8:	2b04      	cmp	r3, #4
     cea:	d000      	beq.n	cee <udi_hid_generic_charger_setfeature_valid+0xe>
	return;	// Bad data
     cec:	e003      	b.n	cf6 <udi_hid_generic_charger_setfeature_valid+0x16>
	UDI_HID_GENERIC_CHARGER_SET_FEATURE(udi_hid_generic_charger_report_feature);
     cee:	4b04      	ldr	r3, [pc, #16]	; (d00 <udi_hid_generic_charger_setfeature_valid+0x20>)
     cf0:	1c18      	adds	r0, r3, #0
     cf2:	4b04      	ldr	r3, [pc, #16]	; (d04 <udi_hid_generic_charger_setfeature_valid+0x24>)
     cf4:	4798      	blx	r3
}
     cf6:	46bd      	mov	sp, r7
     cf8:	bd80      	pop	{r7, pc}
     cfa:	46c0      	nop			; (mov r8, r8)
     cfc:	20000c9c 	.word	0x20000c9c
     d00:	200005d4 	.word	0x200005d4
     d04:	000035e5 	.word	0x000035e5

00000d08 <udi_hid_generic_battery1_setfeature_valid>:

static void udi_hid_generic_battery1_setfeature_valid(void)
{
     d08:	b580      	push	{r7, lr}
     d0a:	af00      	add	r7, sp, #0
	if (sizeof(udi_hid_generic_battery1_report_feature) != udd_g_ctrlreq.payload_size)
     d0c:	4b05      	ldr	r3, [pc, #20]	; (d24 <udi_hid_generic_battery1_setfeature_valid+0x1c>)
     d0e:	899b      	ldrh	r3, [r3, #12]
     d10:	2b04      	cmp	r3, #4
     d12:	d000      	beq.n	d16 <udi_hid_generic_battery1_setfeature_valid+0xe>
	return;	// Bad data
     d14:	e003      	b.n	d1e <udi_hid_generic_battery1_setfeature_valid+0x16>
	UDI_HID_GENERIC_BATTERY1_SET_FEATURE(udi_hid_generic_battery1_report_feature);
     d16:	4b04      	ldr	r3, [pc, #16]	; (d28 <udi_hid_generic_battery1_setfeature_valid+0x20>)
     d18:	1c18      	adds	r0, r3, #0
     d1a:	4b04      	ldr	r3, [pc, #16]	; (d2c <udi_hid_generic_battery1_setfeature_valid+0x24>)
     d1c:	4798      	blx	r3
}
     d1e:	46bd      	mov	sp, r7
     d20:	bd80      	pop	{r7, pc}
     d22:	46c0      	nop			; (mov r8, r8)
     d24:	20000c9c 	.word	0x20000c9c
     d28:	200005d8 	.word	0x200005d8
     d2c:	000035f5 	.word	0x000035f5

00000d30 <udi_hid_generic_battery2_setfeature_valid>:

static void udi_hid_generic_battery2_setfeature_valid(void)
{
     d30:	b580      	push	{r7, lr}
     d32:	af00      	add	r7, sp, #0
	if (sizeof(udi_hid_generic_battery2_report_feature) != udd_g_ctrlreq.payload_size)
     d34:	4b05      	ldr	r3, [pc, #20]	; (d4c <udi_hid_generic_battery2_setfeature_valid+0x1c>)
     d36:	899b      	ldrh	r3, [r3, #12]
     d38:	2b04      	cmp	r3, #4
     d3a:	d000      	beq.n	d3e <udi_hid_generic_battery2_setfeature_valid+0xe>
	return;	// Bad data
     d3c:	e003      	b.n	d46 <udi_hid_generic_battery2_setfeature_valid+0x16>
	UDI_HID_GENERIC_BATTERY2_SET_FEATURE(udi_hid_generic_battery2_report_feature);
     d3e:	4b04      	ldr	r3, [pc, #16]	; (d50 <udi_hid_generic_battery2_setfeature_valid+0x20>)
     d40:	1c18      	adds	r0, r3, #0
     d42:	4b04      	ldr	r3, [pc, #16]	; (d54 <udi_hid_generic_battery2_setfeature_valid+0x24>)
     d44:	4798      	blx	r3
}
     d46:	46bd      	mov	sp, r7
     d48:	bd80      	pop	{r7, pc}
     d4a:	46c0      	nop			; (mov r8, r8)
     d4c:	20000c9c 	.word	0x20000c9c
     d50:	200005dc 	.word	0x200005dc
     d54:	00003605 	.word	0x00003605

00000d58 <udi_hid_generic_battery3_setfeature_valid>:

static void udi_hid_generic_battery3_setfeature_valid(void)
{
     d58:	b580      	push	{r7, lr}
     d5a:	af00      	add	r7, sp, #0
	if (sizeof(udi_hid_generic_battery3_report_feature) != udd_g_ctrlreq.payload_size)
     d5c:	4b05      	ldr	r3, [pc, #20]	; (d74 <udi_hid_generic_battery3_setfeature_valid+0x1c>)
     d5e:	899b      	ldrh	r3, [r3, #12]
     d60:	2b04      	cmp	r3, #4
     d62:	d000      	beq.n	d66 <udi_hid_generic_battery3_setfeature_valid+0xe>
	return;	// Bad data
     d64:	e003      	b.n	d6e <udi_hid_generic_battery3_setfeature_valid+0x16>
	UDI_HID_GENERIC_BATTERY3_SET_FEATURE(udi_hid_generic_battery3_report_feature);
     d66:	4b04      	ldr	r3, [pc, #16]	; (d78 <udi_hid_generic_battery3_setfeature_valid+0x20>)
     d68:	1c18      	adds	r0, r3, #0
     d6a:	4b04      	ldr	r3, [pc, #16]	; (d7c <udi_hid_generic_battery3_setfeature_valid+0x24>)
     d6c:	4798      	blx	r3
}
     d6e:	46bd      	mov	sp, r7
     d70:	bd80      	pop	{r7, pc}
     d72:	46c0      	nop			; (mov r8, r8)
     d74:	20000c9c 	.word	0x20000c9c
     d78:	200005e0 	.word	0x200005e0
     d7c:	00003615 	.word	0x00003615

00000d80 <udi_hid_generic_battery4_setfeature_valid>:

static void udi_hid_generic_battery4_setfeature_valid(void)
{
     d80:	b580      	push	{r7, lr}
     d82:	af00      	add	r7, sp, #0
	if (sizeof(udi_hid_generic_battery4_report_feature) != udd_g_ctrlreq.payload_size)
     d84:	4b05      	ldr	r3, [pc, #20]	; (d9c <udi_hid_generic_battery4_setfeature_valid+0x1c>)
     d86:	899b      	ldrh	r3, [r3, #12]
     d88:	2b04      	cmp	r3, #4
     d8a:	d000      	beq.n	d8e <udi_hid_generic_battery4_setfeature_valid+0xe>
	return;	// Bad data
     d8c:	e003      	b.n	d96 <udi_hid_generic_battery4_setfeature_valid+0x16>
	UDI_HID_GENERIC_BATTERY4_SET_FEATURE(udi_hid_generic_battery4_report_feature);
     d8e:	4b04      	ldr	r3, [pc, #16]	; (da0 <udi_hid_generic_battery4_setfeature_valid+0x20>)
     d90:	1c18      	adds	r0, r3, #0
     d92:	4b04      	ldr	r3, [pc, #16]	; (da4 <udi_hid_generic_battery4_setfeature_valid+0x24>)
     d94:	4798      	blx	r3
}
     d96:	46bd      	mov	sp, r7
     d98:	bd80      	pop	{r7, pc}
     d9a:	46c0      	nop			; (mov r8, r8)
     d9c:	20000c9c 	.word	0x20000c9c
     da0:	200005e4 	.word	0x200005e4
     da4:	00003625 	.word	0x00003625

00000da8 <udi_hid_generic_battery5_setfeature_valid>:

static void udi_hid_generic_battery5_setfeature_valid(void)
{
     da8:	b580      	push	{r7, lr}
     daa:	af00      	add	r7, sp, #0
	if (sizeof(udi_hid_generic_battery5_report_feature) != udd_g_ctrlreq.payload_size)
     dac:	4b05      	ldr	r3, [pc, #20]	; (dc4 <udi_hid_generic_battery5_setfeature_valid+0x1c>)
     dae:	899b      	ldrh	r3, [r3, #12]
     db0:	2b04      	cmp	r3, #4
     db2:	d000      	beq.n	db6 <udi_hid_generic_battery5_setfeature_valid+0xe>
	return;	// Bad data
     db4:	e003      	b.n	dbe <udi_hid_generic_battery5_setfeature_valid+0x16>
	UDI_HID_GENERIC_BATTERY5_SET_FEATURE(udi_hid_generic_battery5_report_feature);
     db6:	4b04      	ldr	r3, [pc, #16]	; (dc8 <udi_hid_generic_battery5_setfeature_valid+0x20>)
     db8:	1c18      	adds	r0, r3, #0
     dba:	4b04      	ldr	r3, [pc, #16]	; (dcc <udi_hid_generic_battery5_setfeature_valid+0x24>)
     dbc:	4798      	blx	r3
}
     dbe:	46bd      	mov	sp, r7
     dc0:	bd80      	pop	{r7, pc}
     dc2:	46c0      	nop			; (mov r8, r8)
     dc4:	20000c9c 	.word	0x20000c9c
     dc8:	200005e8 	.word	0x200005e8
     dcc:	00003635 	.word	0x00003635

00000dd0 <udi_hid_generic_battery6_setfeature_valid>:

static void udi_hid_generic_battery6_setfeature_valid(void)
{
     dd0:	b580      	push	{r7, lr}
     dd2:	af00      	add	r7, sp, #0
	if (sizeof(udi_hid_generic_battery6_report_feature) != udd_g_ctrlreq.payload_size)
     dd4:	4b05      	ldr	r3, [pc, #20]	; (dec <udi_hid_generic_battery6_setfeature_valid+0x1c>)
     dd6:	899b      	ldrh	r3, [r3, #12]
     dd8:	2b04      	cmp	r3, #4
     dda:	d000      	beq.n	dde <udi_hid_generic_battery6_setfeature_valid+0xe>
	return;	// Bad data
     ddc:	e003      	b.n	de6 <udi_hid_generic_battery6_setfeature_valid+0x16>
	UDI_HID_GENERIC_BATTERY6_SET_FEATURE(udi_hid_generic_battery6_report_feature);
     dde:	4b04      	ldr	r3, [pc, #16]	; (df0 <udi_hid_generic_battery6_setfeature_valid+0x20>)
     de0:	1c18      	adds	r0, r3, #0
     de2:	4b04      	ldr	r3, [pc, #16]	; (df4 <udi_hid_generic_battery6_setfeature_valid+0x24>)
     de4:	4798      	blx	r3
}
     de6:	46bd      	mov	sp, r7
     de8:	bd80      	pop	{r7, pc}
     dea:	46c0      	nop			; (mov r8, r8)
     dec:	20000c9c 	.word	0x20000c9c
     df0:	200005ec 	.word	0x200005ec
     df4:	00003645 	.word	0x00003645

00000df8 <udi_hid_generic_charger_report_in_sent>:
}
#endif

static void udi_hid_generic_charger_report_in_sent(udd_ep_status_t status,
		iram_size_t nb_sent, udd_ep_id_t ep)
{
     df8:	b580      	push	{r7, lr}
     dfa:	b082      	sub	sp, #8
     dfc:	af00      	add	r7, sp, #0
     dfe:	6039      	str	r1, [r7, #0]
     e00:	1dfb      	adds	r3, r7, #7
     e02:	1c01      	adds	r1, r0, #0
     e04:	7019      	strb	r1, [r3, #0]
     e06:	1dbb      	adds	r3, r7, #6
     e08:	701a      	strb	r2, [r3, #0]
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_charger_report_in_free = true;
     e0a:	4b03      	ldr	r3, [pc, #12]	; (e18 <udi_hid_generic_charger_report_in_sent+0x20>)
     e0c:	2201      	movs	r2, #1
     e0e:	701a      	strb	r2, [r3, #0]
}
     e10:	46bd      	mov	sp, r7
     e12:	b002      	add	sp, #8
     e14:	bd80      	pop	{r7, pc}
     e16:	46c0      	nop			; (mov r8, r8)
     e18:	2000040c 	.word	0x2000040c

00000e1c <udi_hid_generic_battery1_report_in_sent>:

static void udi_hid_generic_battery1_report_in_sent(udd_ep_status_t status,
		iram_size_t nb_sent, udd_ep_id_t ep)
{
     e1c:	b580      	push	{r7, lr}
     e1e:	b082      	sub	sp, #8
     e20:	af00      	add	r7, sp, #0
     e22:	6039      	str	r1, [r7, #0]
     e24:	1dfb      	adds	r3, r7, #7
     e26:	1c01      	adds	r1, r0, #0
     e28:	7019      	strb	r1, [r3, #0]
     e2a:	1dbb      	adds	r3, r7, #6
     e2c:	701a      	strb	r2, [r3, #0]
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_battery1_report_in_free = true;
     e2e:	4b03      	ldr	r3, [pc, #12]	; (e3c <udi_hid_generic_battery1_report_in_sent+0x20>)
     e30:	2201      	movs	r2, #1
     e32:	701a      	strb	r2, [r3, #0]
}
     e34:	46bd      	mov	sp, r7
     e36:	b002      	add	sp, #8
     e38:	bd80      	pop	{r7, pc}
     e3a:	46c0      	nop			; (mov r8, r8)
     e3c:	2000040d 	.word	0x2000040d

00000e40 <udi_hid_generic_battery2_report_in_sent>:

static void udi_hid_generic_battery2_report_in_sent(udd_ep_status_t status,
		iram_size_t nb_sent, udd_ep_id_t ep)
{
     e40:	b580      	push	{r7, lr}
     e42:	b082      	sub	sp, #8
     e44:	af00      	add	r7, sp, #0
     e46:	6039      	str	r1, [r7, #0]
     e48:	1dfb      	adds	r3, r7, #7
     e4a:	1c01      	adds	r1, r0, #0
     e4c:	7019      	strb	r1, [r3, #0]
     e4e:	1dbb      	adds	r3, r7, #6
     e50:	701a      	strb	r2, [r3, #0]
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_battery2_report_in_free = true;
     e52:	4b03      	ldr	r3, [pc, #12]	; (e60 <udi_hid_generic_battery2_report_in_sent+0x20>)
     e54:	2201      	movs	r2, #1
     e56:	701a      	strb	r2, [r3, #0]
}
     e58:	46bd      	mov	sp, r7
     e5a:	b002      	add	sp, #8
     e5c:	bd80      	pop	{r7, pc}
     e5e:	46c0      	nop			; (mov r8, r8)
     e60:	2000040e 	.word	0x2000040e

00000e64 <udi_hid_generic_battery3_report_in_sent>:

static void udi_hid_generic_battery3_report_in_sent(udd_ep_status_t status,
		iram_size_t nb_sent, udd_ep_id_t ep)
{
     e64:	b580      	push	{r7, lr}
     e66:	b082      	sub	sp, #8
     e68:	af00      	add	r7, sp, #0
     e6a:	6039      	str	r1, [r7, #0]
     e6c:	1dfb      	adds	r3, r7, #7
     e6e:	1c01      	adds	r1, r0, #0
     e70:	7019      	strb	r1, [r3, #0]
     e72:	1dbb      	adds	r3, r7, #6
     e74:	701a      	strb	r2, [r3, #0]
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_battery3_report_in_free = true;
     e76:	4b03      	ldr	r3, [pc, #12]	; (e84 <udi_hid_generic_battery3_report_in_sent+0x20>)
     e78:	2201      	movs	r2, #1
     e7a:	701a      	strb	r2, [r3, #0]
}
     e7c:	46bd      	mov	sp, r7
     e7e:	b002      	add	sp, #8
     e80:	bd80      	pop	{r7, pc}
     e82:	46c0      	nop			; (mov r8, r8)
     e84:	2000040f 	.word	0x2000040f

00000e88 <udi_hid_generic_battery4_report_in_sent>:

static void udi_hid_generic_battery4_report_in_sent(udd_ep_status_t status,
		iram_size_t nb_sent, udd_ep_id_t ep)
{
     e88:	b580      	push	{r7, lr}
     e8a:	b082      	sub	sp, #8
     e8c:	af00      	add	r7, sp, #0
     e8e:	6039      	str	r1, [r7, #0]
     e90:	1dfb      	adds	r3, r7, #7
     e92:	1c01      	adds	r1, r0, #0
     e94:	7019      	strb	r1, [r3, #0]
     e96:	1dbb      	adds	r3, r7, #6
     e98:	701a      	strb	r2, [r3, #0]
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_battery4_report_in_free = true;
     e9a:	4b03      	ldr	r3, [pc, #12]	; (ea8 <udi_hid_generic_battery4_report_in_sent+0x20>)
     e9c:	2201      	movs	r2, #1
     e9e:	701a      	strb	r2, [r3, #0]
}
     ea0:	46bd      	mov	sp, r7
     ea2:	b002      	add	sp, #8
     ea4:	bd80      	pop	{r7, pc}
     ea6:	46c0      	nop			; (mov r8, r8)
     ea8:	20000410 	.word	0x20000410

00000eac <udi_hid_generic_battery5_report_in_sent>:

static void udi_hid_generic_battery5_report_in_sent(udd_ep_status_t status,
		iram_size_t nb_sent, udd_ep_id_t ep)
{
     eac:	b580      	push	{r7, lr}
     eae:	b082      	sub	sp, #8
     eb0:	af00      	add	r7, sp, #0
     eb2:	6039      	str	r1, [r7, #0]
     eb4:	1dfb      	adds	r3, r7, #7
     eb6:	1c01      	adds	r1, r0, #0
     eb8:	7019      	strb	r1, [r3, #0]
     eba:	1dbb      	adds	r3, r7, #6
     ebc:	701a      	strb	r2, [r3, #0]
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_battery5_report_in_free = true;
     ebe:	4b03      	ldr	r3, [pc, #12]	; (ecc <udi_hid_generic_battery5_report_in_sent+0x20>)
     ec0:	2201      	movs	r2, #1
     ec2:	701a      	strb	r2, [r3, #0]
}
     ec4:	46bd      	mov	sp, r7
     ec6:	b002      	add	sp, #8
     ec8:	bd80      	pop	{r7, pc}
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	20000411 	.word	0x20000411

00000ed0 <udi_hid_generic_battery6_report_in_sent>:

static void udi_hid_generic_battery6_report_in_sent(udd_ep_status_t status,
		iram_size_t nb_sent, udd_ep_id_t ep)
{
     ed0:	b580      	push	{r7, lr}
     ed2:	b082      	sub	sp, #8
     ed4:	af00      	add	r7, sp, #0
     ed6:	6039      	str	r1, [r7, #0]
     ed8:	1dfb      	adds	r3, r7, #7
     eda:	1c01      	adds	r1, r0, #0
     edc:	7019      	strb	r1, [r3, #0]
     ede:	1dbb      	adds	r3, r7, #6
     ee0:	701a      	strb	r2, [r3, #0]
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_generic_b_battery6_report_in_free = true;
     ee2:	4b03      	ldr	r3, [pc, #12]	; (ef0 <udi_hid_generic_battery6_report_in_sent+0x20>)
     ee4:	2201      	movs	r2, #1
     ee6:	701a      	strb	r2, [r3, #0]
}
     ee8:	46bd      	mov	sp, r7
     eea:	b002      	add	sp, #8
     eec:	bd80      	pop	{r7, pc}
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	20000412 	.word	0x20000412

00000ef4 <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
     ef4:	b580      	push	{r7, lr}
     ef6:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
     ef8:	4b01      	ldr	r3, [pc, #4]	; (f00 <udc_get_string_serial_name+0xc>)
	}
     efa:	1c18      	adds	r0, r3, #0
     efc:	46bd      	mov	sp, r7
     efe:	bd80      	pop	{r7, pc}
     f00:	000067a4 	.word	0x000067a4

00000f04 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
     f04:	b580      	push	{r7, lr}
     f06:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
     f08:	4b02      	ldr	r3, [pc, #8]	; (f14 <udc_get_interface_desc+0x10>)
     f0a:	681b      	ldr	r3, [r3, #0]
}
     f0c:	1c18      	adds	r0, r3, #0
     f0e:	46bd      	mov	sp, r7
     f10:	bd80      	pop	{r7, pc}
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	20000600 	.word	0x20000600

00000f18 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
     f18:	b580      	push	{r7, lr}
     f1a:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
     f1c:	4b07      	ldr	r3, [pc, #28]	; (f3c <udc_get_eof_conf+0x24>)
     f1e:	681b      	ldr	r3, [r3, #0]
     f20:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
     f22:	4b06      	ldr	r3, [pc, #24]	; (f3c <udc_get_eof_conf+0x24>)
     f24:	681b      	ldr	r3, [r3, #0]
     f26:	681b      	ldr	r3, [r3, #0]
     f28:	7899      	ldrb	r1, [r3, #2]
     f2a:	78db      	ldrb	r3, [r3, #3]
     f2c:	021b      	lsls	r3, r3, #8
     f2e:	430b      	orrs	r3, r1
     f30:	b29b      	uxth	r3, r3
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
     f32:	18d3      	adds	r3, r2, r3
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
     f34:	1c18      	adds	r0, r3, #0
     f36:	46bd      	mov	sp, r7
     f38:	bd80      	pop	{r7, pc}
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	200005fc 	.word	0x200005fc

00000f40 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
     f40:	b580      	push	{r7, lr}
     f42:	b084      	sub	sp, #16
     f44:	af00      	add	r7, sp, #0
     f46:	6078      	str	r0, [r7, #4]
     f48:	1c0a      	adds	r2, r1, #0
     f4a:	1cfb      	adds	r3, r7, #3
     f4c:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
     f4e:	4b12      	ldr	r3, [pc, #72]	; (f98 <udc_next_desc_in_iface+0x58>)
     f50:	4798      	blx	r3
     f52:	1c03      	adds	r3, r0, #0
     f54:	60fb      	str	r3, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
     f56:	687b      	ldr	r3, [r7, #4]
     f58:	781b      	ldrb	r3, [r3, #0]
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     f5a:	687a      	ldr	r2, [r7, #4]
     f5c:	18d3      	adds	r3, r2, r3
     f5e:	607b      	str	r3, [r7, #4]
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     f60:	e011      	b.n	f86 <udc_next_desc_in_iface+0x46>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
     f62:	687b      	ldr	r3, [r7, #4]
     f64:	785b      	ldrb	r3, [r3, #1]
     f66:	2b04      	cmp	r3, #4
     f68:	d100      	bne.n	f6c <udc_next_desc_in_iface+0x2c>
			break; // End of global interface descriptor
     f6a:	e010      	b.n	f8e <udc_next_desc_in_iface+0x4e>
		}
		if (desc_id == desc->bDescriptorType) {
     f6c:	687b      	ldr	r3, [r7, #4]
     f6e:	785b      	ldrb	r3, [r3, #1]
     f70:	1cfa      	adds	r2, r7, #3
     f72:	7812      	ldrb	r2, [r2, #0]
     f74:	429a      	cmp	r2, r3
     f76:	d101      	bne.n	f7c <udc_next_desc_in_iface+0x3c>
			return desc; // Specific descriptor found
     f78:	687b      	ldr	r3, [r7, #4]
     f7a:	e009      	b.n	f90 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
     f7c:	687b      	ldr	r3, [r7, #4]
     f7e:	781b      	ldrb	r3, [r3, #0]
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
     f80:	687a      	ldr	r2, [r7, #4]
     f82:	18d3      	adds	r3, r2, r3
     f84:	607b      	str	r3, [r7, #4]
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
     f86:	68fa      	ldr	r2, [r7, #12]
     f88:	687b      	ldr	r3, [r7, #4]
     f8a:	429a      	cmp	r2, r3
     f8c:	d8e9      	bhi.n	f62 <udc_next_desc_in_iface+0x22>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
     f8e:	2300      	movs	r3, #0
}
     f90:	1c18      	adds	r0, r3, #0
     f92:	46bd      	mov	sp, r7
     f94:	b004      	add	sp, #16
     f96:	bd80      	pop	{r7, pc}
     f98:	00000f19 	.word	0x00000f19

00000f9c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
     f9c:	b580      	push	{r7, lr}
     f9e:	b084      	sub	sp, #16
     fa0:	af00      	add	r7, sp, #0
     fa2:	1c0a      	adds	r2, r1, #0
     fa4:	1dfb      	adds	r3, r7, #7
     fa6:	1c01      	adds	r1, r0, #0
     fa8:	7019      	strb	r1, [r3, #0]
     faa:	1dbb      	adds	r3, r7, #6
     fac:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
     fae:	4b20      	ldr	r3, [pc, #128]	; (1030 <udc_update_iface_desc+0x94>)
     fb0:	781b      	ldrb	r3, [r3, #0]
     fb2:	2b00      	cmp	r3, #0
     fb4:	d101      	bne.n	fba <udc_update_iface_desc+0x1e>
		return false;
     fb6:	2300      	movs	r3, #0
     fb8:	e036      	b.n	1028 <udc_update_iface_desc+0x8c>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
     fba:	4b1e      	ldr	r3, [pc, #120]	; (1034 <udc_update_iface_desc+0x98>)
     fbc:	681b      	ldr	r3, [r3, #0]
     fbe:	681b      	ldr	r3, [r3, #0]
     fc0:	791b      	ldrb	r3, [r3, #4]
     fc2:	1dfa      	adds	r2, r7, #7
     fc4:	7812      	ldrb	r2, [r2, #0]
     fc6:	429a      	cmp	r2, r3
     fc8:	d301      	bcc.n	fce <udc_update_iface_desc+0x32>
		return false;
     fca:	2300      	movs	r3, #0
     fcc:	e02c      	b.n	1028 <udc_update_iface_desc+0x8c>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
     fce:	4b19      	ldr	r3, [pc, #100]	; (1034 <udc_update_iface_desc+0x98>)
     fd0:	681b      	ldr	r3, [r3, #0]
     fd2:	681a      	ldr	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
     fd4:	4b18      	ldr	r3, [pc, #96]	; (1038 <udc_update_iface_desc+0x9c>)
     fd6:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
     fd8:	4b18      	ldr	r3, [pc, #96]	; (103c <udc_update_iface_desc+0xa0>)
     fda:	4798      	blx	r3
     fdc:	1c03      	adds	r3, r0, #0
     fde:	60fb      	str	r3, [r7, #12]
	while (ptr_end_desc >
     fe0:	e01c      	b.n	101c <udc_update_iface_desc+0x80>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
     fe2:	4b15      	ldr	r3, [pc, #84]	; (1038 <udc_update_iface_desc+0x9c>)
     fe4:	681b      	ldr	r3, [r3, #0]
     fe6:	785b      	ldrb	r3, [r3, #1]
     fe8:	2b04      	cmp	r3, #4
     fea:	d10f      	bne.n	100c <udc_update_iface_desc+0x70>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
     fec:	4b12      	ldr	r3, [pc, #72]	; (1038 <udc_update_iface_desc+0x9c>)
     fee:	681b      	ldr	r3, [r3, #0]
     ff0:	789b      	ldrb	r3, [r3, #2]
     ff2:	1dfa      	adds	r2, r7, #7
     ff4:	7812      	ldrb	r2, [r2, #0]
     ff6:	429a      	cmp	r2, r3
     ff8:	d108      	bne.n	100c <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
     ffa:	4b0f      	ldr	r3, [pc, #60]	; (1038 <udc_update_iface_desc+0x9c>)
     ffc:	681b      	ldr	r3, [r3, #0]
     ffe:	78db      	ldrb	r3, [r3, #3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    1000:	1dba      	adds	r2, r7, #6
    1002:	7812      	ldrb	r2, [r2, #0]
    1004:	429a      	cmp	r2, r3
    1006:	d101      	bne.n	100c <udc_update_iface_desc+0x70>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
    1008:	2301      	movs	r3, #1
    100a:	e00d      	b.n	1028 <udc_update_iface_desc+0x8c>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    100c:	4b0a      	ldr	r3, [pc, #40]	; (1038 <udc_update_iface_desc+0x9c>)
    100e:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
    1010:	4b09      	ldr	r3, [pc, #36]	; (1038 <udc_update_iface_desc+0x9c>)
    1012:	681b      	ldr	r3, [r3, #0]
    1014:	781b      	ldrb	r3, [r3, #0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    1016:	18d2      	adds	r2, r2, r3
    1018:	4b07      	ldr	r3, [pc, #28]	; (1038 <udc_update_iface_desc+0x9c>)
    101a:	601a      	str	r2, [r3, #0]
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
    101c:	4b06      	ldr	r3, [pc, #24]	; (1038 <udc_update_iface_desc+0x9c>)
    101e:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
    1020:	68fa      	ldr	r2, [r7, #12]
    1022:	429a      	cmp	r2, r3
    1024:	d8dd      	bhi.n	fe2 <udc_update_iface_desc+0x46>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
    1026:	2300      	movs	r3, #0
}
    1028:	1c18      	adds	r0, r3, #0
    102a:	46bd      	mov	sp, r7
    102c:	b004      	add	sp, #16
    102e:	bd80      	pop	{r7, pc}
    1030:	200005f8 	.word	0x200005f8
    1034:	200005fc 	.word	0x200005fc
    1038:	20000600 	.word	0x20000600
    103c:	00000f19 	.word	0x00000f19

00001040 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    1040:	b580      	push	{r7, lr}
    1042:	b084      	sub	sp, #16
    1044:	af00      	add	r7, sp, #0
    1046:	1c02      	adds	r2, r0, #0
    1048:	1dfb      	adds	r3, r7, #7
    104a:	701a      	strb	r2, [r3, #0]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    104c:	1dfb      	adds	r3, r7, #7
    104e:	781b      	ldrb	r3, [r3, #0]
    1050:	1c18      	adds	r0, r3, #0
    1052:	2100      	movs	r1, #0
    1054:	4b20      	ldr	r3, [pc, #128]	; (10d8 <udc_iface_disable+0x98>)
    1056:	4798      	blx	r3
    1058:	1c03      	adds	r3, r0, #0
    105a:	2201      	movs	r2, #1
    105c:	4053      	eors	r3, r2
    105e:	b2db      	uxtb	r3, r3
    1060:	2b00      	cmp	r3, #0
    1062:	d001      	beq.n	1068 <udc_iface_disable+0x28>
		return false;
    1064:	2300      	movs	r3, #0
    1066:	e033      	b.n	10d0 <udc_iface_disable+0x90>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1068:	4b1c      	ldr	r3, [pc, #112]	; (10dc <udc_iface_disable+0x9c>)
    106a:	681b      	ldr	r3, [r3, #0]
    106c:	685a      	ldr	r2, [r3, #4]
    106e:	1dfb      	adds	r3, r7, #7
    1070:	781b      	ldrb	r3, [r3, #0]
    1072:	009b      	lsls	r3, r3, #2
    1074:	18d3      	adds	r3, r2, r3
    1076:	681b      	ldr	r3, [r3, #0]
    1078:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    107a:	68bb      	ldr	r3, [r7, #8]
    107c:	68db      	ldr	r3, [r3, #12]
    107e:	4798      	blx	r3
    1080:	1c03      	adds	r3, r0, #0
    1082:	1dfa      	adds	r2, r7, #7
    1084:	7812      	ldrb	r2, [r2, #0]
    1086:	1c10      	adds	r0, r2, #0
    1088:	1c19      	adds	r1, r3, #0
    108a:	4b13      	ldr	r3, [pc, #76]	; (10d8 <udc_iface_disable+0x98>)
    108c:	4798      	blx	r3
    108e:	1c03      	adds	r3, r0, #0
    1090:	2201      	movs	r2, #1
    1092:	4053      	eors	r3, r2
    1094:	b2db      	uxtb	r3, r3
    1096:	2b00      	cmp	r3, #0
    1098:	d001      	beq.n	109e <udc_iface_disable+0x5e>
		return false;
    109a:	2300      	movs	r3, #0
    109c:	e018      	b.n	10d0 <udc_iface_disable+0x90>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    109e:	4b10      	ldr	r3, [pc, #64]	; (10e0 <udc_iface_disable+0xa0>)
    10a0:	681b      	ldr	r3, [r3, #0]
    10a2:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    10a4:	68fb      	ldr	r3, [r7, #12]
    10a6:	1c18      	adds	r0, r3, #0
    10a8:	2105      	movs	r1, #5
    10aa:	4b0e      	ldr	r3, [pc, #56]	; (10e4 <udc_iface_disable+0xa4>)
    10ac:	4798      	blx	r3
    10ae:	1c03      	adds	r3, r0, #0
    10b0:	60fb      	str	r3, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    10b2:	68fb      	ldr	r3, [r7, #12]
    10b4:	2b00      	cmp	r3, #0
    10b6:	d105      	bne.n	10c4 <udc_iface_disable+0x84>
				break;
    10b8:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif

	// Disable interface
	udi_api->disable();
    10ba:	68bb      	ldr	r3, [r7, #8]
    10bc:	685b      	ldr	r3, [r3, #4]
    10be:	4798      	blx	r3
	return true;
    10c0:	2301      	movs	r3, #1
    10c2:	e005      	b.n	10d0 <udc_iface_disable+0x90>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    10c4:	68fb      	ldr	r3, [r7, #12]
    10c6:	789b      	ldrb	r3, [r3, #2]
    10c8:	1c18      	adds	r0, r3, #0
    10ca:	4b07      	ldr	r3, [pc, #28]	; (10e8 <udc_iface_disable+0xa8>)
    10cc:	4798      	blx	r3
		}
    10ce:	e7e9      	b.n	10a4 <udc_iface_disable+0x64>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
    10d0:	1c18      	adds	r0, r3, #0
    10d2:	46bd      	mov	sp, r7
    10d4:	b004      	add	sp, #16
    10d6:	bd80      	pop	{r7, pc}
    10d8:	00000f9d 	.word	0x00000f9d
    10dc:	200005fc 	.word	0x200005fc
    10e0:	20000600 	.word	0x20000600
    10e4:	00000f41 	.word	0x00000f41
    10e8:	00002481 	.word	0x00002481

000010ec <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    10ec:	b580      	push	{r7, lr}
    10ee:	b084      	sub	sp, #16
    10f0:	af00      	add	r7, sp, #0
    10f2:	1c0a      	adds	r2, r1, #0
    10f4:	1dfb      	adds	r3, r7, #7
    10f6:	1c01      	adds	r1, r0, #0
    10f8:	7019      	strb	r1, [r3, #0]
    10fa:	1dbb      	adds	r3, r7, #6
    10fc:	701a      	strb	r2, [r3, #0]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    10fe:	1dfb      	adds	r3, r7, #7
    1100:	781a      	ldrb	r2, [r3, #0]
    1102:	1dbb      	adds	r3, r7, #6
    1104:	781b      	ldrb	r3, [r3, #0]
    1106:	1c10      	adds	r0, r2, #0
    1108:	1c19      	adds	r1, r3, #0
    110a:	4b20      	ldr	r3, [pc, #128]	; (118c <udc_iface_enable+0xa0>)
    110c:	4798      	blx	r3
    110e:	1c03      	adds	r3, r0, #0
    1110:	2201      	movs	r2, #1
    1112:	4053      	eors	r3, r2
    1114:	b2db      	uxtb	r3, r3
    1116:	2b00      	cmp	r3, #0
    1118:	d001      	beq.n	111e <udc_iface_enable+0x32>
		return false;
    111a:	2300      	movs	r3, #0
    111c:	e031      	b.n	1182 <udc_iface_enable+0x96>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    111e:	4b1c      	ldr	r3, [pc, #112]	; (1190 <udc_iface_enable+0xa4>)
    1120:	681b      	ldr	r3, [r3, #0]
    1122:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    1124:	68fb      	ldr	r3, [r7, #12]
    1126:	1c18      	adds	r0, r3, #0
    1128:	2105      	movs	r1, #5
    112a:	4b1a      	ldr	r3, [pc, #104]	; (1194 <udc_iface_enable+0xa8>)
    112c:	4798      	blx	r3
    112e:	1c03      	adds	r3, r0, #0
    1130:	60fb      	str	r3, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    1132:	68fb      	ldr	r3, [r7, #12]
    1134:	2b00      	cmp	r3, #0
    1136:	d10c      	bne.n	1152 <udc_iface_enable+0x66>
			break;
    1138:	46c0      	nop			; (mov r8, r8)
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    113a:	4b17      	ldr	r3, [pc, #92]	; (1198 <udc_iface_enable+0xac>)
    113c:	681b      	ldr	r3, [r3, #0]
    113e:	685a      	ldr	r2, [r3, #4]
    1140:	1dfb      	adds	r3, r7, #7
    1142:	781b      	ldrb	r3, [r3, #0]
    1144:	009b      	lsls	r3, r3, #2
    1146:	18d3      	adds	r3, r2, r3
    1148:	681b      	ldr	r3, [r3, #0]
    114a:	681b      	ldr	r3, [r3, #0]
    114c:	4798      	blx	r3
    114e:	1c03      	adds	r3, r0, #0
    1150:	e017      	b.n	1182 <udc_iface_enable+0x96>
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    1152:	68fb      	ldr	r3, [r7, #12]
    1154:	7899      	ldrb	r1, [r3, #2]
    1156:	68fb      	ldr	r3, [r7, #12]
    1158:	78da      	ldrb	r2, [r3, #3]
    115a:	68fb      	ldr	r3, [r7, #12]
    115c:	7918      	ldrb	r0, [r3, #4]
    115e:	795b      	ldrb	r3, [r3, #5]
    1160:	021b      	lsls	r3, r3, #8
    1162:	4303      	orrs	r3, r0
    1164:	b29b      	uxth	r3, r3
    1166:	1c08      	adds	r0, r1, #0
    1168:	1c11      	adds	r1, r2, #0
    116a:	1c1a      	adds	r2, r3, #0
    116c:	4b0b      	ldr	r3, [pc, #44]	; (119c <udc_iface_enable+0xb0>)
    116e:	4798      	blx	r3
    1170:	1c03      	adds	r3, r0, #0
    1172:	2201      	movs	r2, #1
    1174:	4053      	eors	r3, r2
    1176:	b2db      	uxtb	r3, r3
    1178:	2b00      	cmp	r3, #0
    117a:	d001      	beq.n	1180 <udc_iface_enable+0x94>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
    117c:	2300      	movs	r3, #0
    117e:	e000      	b.n	1182 <udc_iface_enable+0x96>
		}
	}
    1180:	e7d0      	b.n	1124 <udc_iface_enable+0x38>
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
    1182:	1c18      	adds	r0, r3, #0
    1184:	46bd      	mov	sp, r7
    1186:	b004      	add	sp, #16
    1188:	bd80      	pop	{r7, pc}
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	00000f9d 	.word	0x00000f9d
    1190:	20000600 	.word	0x20000600
    1194:	00000f41 	.word	0x00000f41
    1198:	200005fc 	.word	0x200005fc
    119c:	00002511 	.word	0x00002511

000011a0 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
    11a0:	b580      	push	{r7, lr}
    11a2:	af00      	add	r7, sp, #0
	udd_enable();
    11a4:	4b01      	ldr	r3, [pc, #4]	; (11ac <udc_start+0xc>)
    11a6:	4798      	blx	r3
}
    11a8:	46bd      	mov	sp, r7
    11aa:	bd80      	pop	{r7, pc}
    11ac:	000032e5 	.word	0x000032e5

000011b0 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    11b0:	b580      	push	{r7, lr}
    11b2:	b082      	sub	sp, #8
    11b4:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    11b6:	4b16      	ldr	r3, [pc, #88]	; (1210 <udc_reset+0x60>)
    11b8:	781b      	ldrb	r3, [r3, #0]
    11ba:	2b00      	cmp	r3, #0
    11bc:	d015      	beq.n	11ea <udc_reset+0x3a>
		for (iface_num = 0;
    11be:	1dfb      	adds	r3, r7, #7
    11c0:	2200      	movs	r2, #0
    11c2:	701a      	strb	r2, [r3, #0]
    11c4:	e009      	b.n	11da <udc_reset+0x2a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    11c6:	1dfb      	adds	r3, r7, #7
    11c8:	781b      	ldrb	r3, [r3, #0]
    11ca:	1c18      	adds	r0, r3, #0
    11cc:	4b11      	ldr	r3, [pc, #68]	; (1214 <udc_reset+0x64>)
    11ce:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    11d0:	1dfb      	adds	r3, r7, #7
    11d2:	781a      	ldrb	r2, [r3, #0]
    11d4:	1dfb      	adds	r3, r7, #7
    11d6:	3201      	adds	r2, #1
    11d8:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    11da:	4b0f      	ldr	r3, [pc, #60]	; (1218 <udc_reset+0x68>)
    11dc:	681b      	ldr	r3, [r3, #0]
    11de:	681b      	ldr	r3, [r3, #0]
    11e0:	791b      	ldrb	r3, [r3, #4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    11e2:	1dfa      	adds	r2, r7, #7
    11e4:	7812      	ldrb	r2, [r2, #0]
    11e6:	429a      	cmp	r2, r3
    11e8:	d3ed      	bcc.n	11c6 <udc_reset+0x16>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
    11ea:	4b09      	ldr	r3, [pc, #36]	; (1210 <udc_reset+0x60>)
    11ec:	2200      	movs	r2, #0
    11ee:	701a      	strb	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
    11f0:	4b0a      	ldr	r3, [pc, #40]	; (121c <udc_reset+0x6c>)
    11f2:	881a      	ldrh	r2, [r3, #0]
    11f4:	2302      	movs	r3, #2
    11f6:	4013      	ands	r3, r2
    11f8:	b29b      	uxth	r3, r3
    11fa:	2b00      	cmp	r3, #0
    11fc:	d001      	beq.n	1202 <udc_reset+0x52>
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
    11fe:	4b08      	ldr	r3, [pc, #32]	; (1220 <udc_reset+0x70>)
    1200:	4798      	blx	r3
	}
#endif
	udc_device_status =
    1202:	4b06      	ldr	r3, [pc, #24]	; (121c <udc_reset+0x6c>)
    1204:	2201      	movs	r2, #1
    1206:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    1208:	46bd      	mov	sp, r7
    120a:	b002      	add	sp, #8
    120c:	bd80      	pop	{r7, pc}
    120e:	46c0      	nop			; (mov r8, r8)
    1210:	200005f8 	.word	0x200005f8
    1214:	00001041 	.word	0x00001041
    1218:	200005fc 	.word	0x200005fc
    121c:	200005f0 	.word	0x200005f0
    1220:	0000337d 	.word	0x0000337d

00001224 <udc_sof_notify>:

void udc_sof_notify(void)
{
    1224:	b580      	push	{r7, lr}
    1226:	b082      	sub	sp, #8
    1228:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    122a:	4b16      	ldr	r3, [pc, #88]	; (1284 <udc_sof_notify+0x60>)
    122c:	781b      	ldrb	r3, [r3, #0]
    122e:	2b00      	cmp	r3, #0
    1230:	d025      	beq.n	127e <udc_sof_notify+0x5a>
		for (iface_num = 0;
    1232:	1dfb      	adds	r3, r7, #7
    1234:	2200      	movs	r2, #0
    1236:	701a      	strb	r2, [r3, #0]
    1238:	e019      	b.n	126e <udc_sof_notify+0x4a>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    123a:	4b13      	ldr	r3, [pc, #76]	; (1288 <udc_sof_notify+0x64>)
    123c:	681b      	ldr	r3, [r3, #0]
    123e:	685a      	ldr	r2, [r3, #4]
    1240:	1dfb      	adds	r3, r7, #7
    1242:	781b      	ldrb	r3, [r3, #0]
    1244:	009b      	lsls	r3, r3, #2
    1246:	18d3      	adds	r3, r2, r3
    1248:	681b      	ldr	r3, [r3, #0]
    124a:	691b      	ldr	r3, [r3, #16]
    124c:	2b00      	cmp	r3, #0
    124e:	d009      	beq.n	1264 <udc_sof_notify+0x40>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    1250:	4b0d      	ldr	r3, [pc, #52]	; (1288 <udc_sof_notify+0x64>)
    1252:	681b      	ldr	r3, [r3, #0]
    1254:	685a      	ldr	r2, [r3, #4]
    1256:	1dfb      	adds	r3, r7, #7
    1258:	781b      	ldrb	r3, [r3, #0]
    125a:	009b      	lsls	r3, r3, #2
    125c:	18d3      	adds	r3, r2, r3
    125e:	681b      	ldr	r3, [r3, #0]
    1260:	691b      	ldr	r3, [r3, #16]
    1262:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
    1264:	1dfb      	adds	r3, r7, #7
    1266:	781a      	ldrb	r2, [r3, #0]
    1268:	1dfb      	adds	r3, r7, #7
    126a:	3201      	adds	r2, #1
    126c:	701a      	strb	r2, [r3, #0]
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    126e:	4b06      	ldr	r3, [pc, #24]	; (1288 <udc_sof_notify+0x64>)
    1270:	681b      	ldr	r3, [r3, #0]
    1272:	681b      	ldr	r3, [r3, #0]
    1274:	791b      	ldrb	r3, [r3, #4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
    1276:	1dfa      	adds	r2, r7, #7
    1278:	7812      	ldrb	r2, [r2, #0]
    127a:	429a      	cmp	r2, r3
    127c:	d3dd      	bcc.n	123a <udc_sof_notify+0x16>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
    127e:	46bd      	mov	sp, r7
    1280:	b002      	add	sp, #8
    1282:	bd80      	pop	{r7, pc}
    1284:	200005f8 	.word	0x200005f8
    1288:	200005fc 	.word	0x200005fc

0000128c <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
    128c:	b580      	push	{r7, lr}
    128e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    1290:	4b07      	ldr	r3, [pc, #28]	; (12b0 <udc_req_std_dev_get_status+0x24>)
    1292:	88db      	ldrh	r3, [r3, #6]
    1294:	2b02      	cmp	r3, #2
    1296:	d001      	beq.n	129c <udc_req_std_dev_get_status+0x10>
		return false;
    1298:	2300      	movs	r3, #0
    129a:	e005      	b.n	12a8 <udc_req_std_dev_get_status+0x1c>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    129c:	4b05      	ldr	r3, [pc, #20]	; (12b4 <udc_req_std_dev_get_status+0x28>)
    129e:	1c18      	adds	r0, r3, #0
    12a0:	2102      	movs	r1, #2
    12a2:	4b05      	ldr	r3, [pc, #20]	; (12b8 <udc_req_std_dev_get_status+0x2c>)
    12a4:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
    12a6:	2301      	movs	r3, #1
}
    12a8:	1c18      	adds	r0, r3, #0
    12aa:	46bd      	mov	sp, r7
    12ac:	bd80      	pop	{r7, pc}
    12ae:	46c0      	nop			; (mov r8, r8)
    12b0:	20000c9c 	.word	0x20000c9c
    12b4:	200005f0 	.word	0x200005f0
    12b8:	00002b09 	.word	0x00002b09

000012bc <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
    12bc:	b580      	push	{r7, lr}
    12be:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    12c0:	4b0c      	ldr	r3, [pc, #48]	; (12f4 <udc_req_std_ep_get_status+0x38>)
    12c2:	88db      	ldrh	r3, [r3, #6]
    12c4:	2b02      	cmp	r3, #2
    12c6:	d001      	beq.n	12cc <udc_req_std_ep_get_status+0x10>
		return false;
    12c8:	2300      	movs	r3, #0
    12ca:	e00f      	b.n	12ec <udc_req_std_ep_get_status+0x30>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    12cc:	4b09      	ldr	r3, [pc, #36]	; (12f4 <udc_req_std_ep_get_status+0x38>)
    12ce:	889b      	ldrh	r3, [r3, #4]
    12d0:	b2db      	uxtb	r3, r3
    12d2:	1c18      	adds	r0, r3, #0
    12d4:	4b08      	ldr	r3, [pc, #32]	; (12f8 <udc_req_std_ep_get_status+0x3c>)
    12d6:	4798      	blx	r3
    12d8:	1c03      	adds	r3, r0, #0
    12da:	1c1a      	adds	r2, r3, #0
    12dc:	4b07      	ldr	r3, [pc, #28]	; (12fc <udc_req_std_ep_get_status+0x40>)
    12de:	801a      	strh	r2, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    12e0:	4b06      	ldr	r3, [pc, #24]	; (12fc <udc_req_std_ep_get_status+0x40>)
    12e2:	1c18      	adds	r0, r3, #0
    12e4:	2102      	movs	r1, #2
    12e6:	4b06      	ldr	r3, [pc, #24]	; (1300 <udc_req_std_ep_get_status+0x44>)
    12e8:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
    12ea:	2301      	movs	r3, #1
}
    12ec:	1c18      	adds	r0, r3, #0
    12ee:	46bd      	mov	sp, r7
    12f0:	bd80      	pop	{r7, pc}
    12f2:	46c0      	nop			; (mov r8, r8)
    12f4:	20000c9c 	.word	0x20000c9c
    12f8:	000026b5 	.word	0x000026b5
    12fc:	20000604 	.word	0x20000604
    1300:	00002b09 	.word	0x00002b09

00001304 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
    1304:	b580      	push	{r7, lr}
    1306:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    1308:	4b0c      	ldr	r3, [pc, #48]	; (133c <udc_req_std_dev_clear_feature+0x38>)
    130a:	88db      	ldrh	r3, [r3, #6]
    130c:	2b00      	cmp	r3, #0
    130e:	d001      	beq.n	1314 <udc_req_std_dev_clear_feature+0x10>
		return false;
    1310:	2300      	movs	r3, #0
    1312:	e00f      	b.n	1334 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    1314:	4b09      	ldr	r3, [pc, #36]	; (133c <udc_req_std_dev_clear_feature+0x38>)
    1316:	885b      	ldrh	r3, [r3, #2]
    1318:	2b01      	cmp	r3, #1
    131a:	d10a      	bne.n	1332 <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    131c:	4b08      	ldr	r3, [pc, #32]	; (1340 <udc_req_std_dev_clear_feature+0x3c>)
    131e:	881b      	ldrh	r3, [r3, #0]
    1320:	2202      	movs	r2, #2
    1322:	4393      	bics	r3, r2
    1324:	b29a      	uxth	r2, r3
    1326:	4b06      	ldr	r3, [pc, #24]	; (1340 <udc_req_std_dev_clear_feature+0x3c>)
    1328:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
    132a:	4b06      	ldr	r3, [pc, #24]	; (1344 <udc_req_std_dev_clear_feature+0x40>)
    132c:	4798      	blx	r3
#endif
		return true;
    132e:	2301      	movs	r3, #1
    1330:	e000      	b.n	1334 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
    1332:	2300      	movs	r3, #0
}
    1334:	1c18      	adds	r0, r3, #0
    1336:	46bd      	mov	sp, r7
    1338:	bd80      	pop	{r7, pc}
    133a:	46c0      	nop			; (mov r8, r8)
    133c:	20000c9c 	.word	0x20000c9c
    1340:	200005f0 	.word	0x200005f0
    1344:	0000337d 	.word	0x0000337d

00001348 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
    1348:	b580      	push	{r7, lr}
    134a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    134c:	4b0a      	ldr	r3, [pc, #40]	; (1378 <udc_req_std_ep_clear_feature+0x30>)
    134e:	88db      	ldrh	r3, [r3, #6]
    1350:	2b00      	cmp	r3, #0
    1352:	d001      	beq.n	1358 <udc_req_std_ep_clear_feature+0x10>
		return false;
    1354:	2300      	movs	r3, #0
    1356:	e00c      	b.n	1372 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    1358:	4b07      	ldr	r3, [pc, #28]	; (1378 <udc_req_std_ep_clear_feature+0x30>)
    135a:	885b      	ldrh	r3, [r3, #2]
    135c:	2b00      	cmp	r3, #0
    135e:	d107      	bne.n	1370 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    1360:	4b05      	ldr	r3, [pc, #20]	; (1378 <udc_req_std_ep_clear_feature+0x30>)
    1362:	889b      	ldrh	r3, [r3, #4]
    1364:	b2db      	uxtb	r3, r3
    1366:	1c18      	adds	r0, r3, #0
    1368:	4b04      	ldr	r3, [pc, #16]	; (137c <udc_req_std_ep_clear_feature+0x34>)
    136a:	4798      	blx	r3
    136c:	1c03      	adds	r3, r0, #0
    136e:	e000      	b.n	1372 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
    1370:	2300      	movs	r3, #0
}
    1372:	1c18      	adds	r0, r3, #0
    1374:	46bd      	mov	sp, r7
    1376:	bd80      	pop	{r7, pc}
    1378:	20000c9c 	.word	0x20000c9c
    137c:	00002739 	.word	0x00002739

00001380 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
    1380:	b580      	push	{r7, lr}
    1382:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    1384:	4b0c      	ldr	r3, [pc, #48]	; (13b8 <udc_req_std_dev_set_feature+0x38>)
    1386:	88db      	ldrh	r3, [r3, #6]
    1388:	2b00      	cmp	r3, #0
    138a:	d001      	beq.n	1390 <udc_req_std_dev_set_feature+0x10>
		return false;
    138c:	2300      	movs	r3, #0
    138e:	e010      	b.n	13b2 <udc_req_std_dev_set_feature+0x32>
	}

	switch (udd_g_ctrlreq.req.wValue) {
    1390:	4b09      	ldr	r3, [pc, #36]	; (13b8 <udc_req_std_dev_set_feature+0x38>)
    1392:	885b      	ldrh	r3, [r3, #2]
    1394:	2b01      	cmp	r3, #1
    1396:	d002      	beq.n	139e <udc_req_std_dev_set_feature+0x1e>
			break;
		}
		break;
#endif
	default:
		break;
    1398:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    139a:	2300      	movs	r3, #0
    139c:	e009      	b.n	13b2 <udc_req_std_dev_set_feature+0x32>
	switch (udd_g_ctrlreq.req.wValue) {

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
    139e:	4b07      	ldr	r3, [pc, #28]	; (13bc <udc_req_std_dev_set_feature+0x3c>)
    13a0:	881b      	ldrh	r3, [r3, #0]
    13a2:	2202      	movs	r2, #2
    13a4:	4313      	orrs	r3, r2
    13a6:	b29a      	uxth	r2, r3
    13a8:	4b04      	ldr	r3, [pc, #16]	; (13bc <udc_req_std_dev_set_feature+0x3c>)
    13aa:	801a      	strh	r2, [r3, #0]
		UDC_REMOTEWAKEUP_ENABLE();
    13ac:	4b04      	ldr	r3, [pc, #16]	; (13c0 <udc_req_std_dev_set_feature+0x40>)
    13ae:	4798      	blx	r3
		return true;
    13b0:	2301      	movs	r3, #1
#endif
	default:
		break;
	}
	return false;
}
    13b2:	1c18      	adds	r0, r3, #0
    13b4:	46bd      	mov	sp, r7
    13b6:	bd80      	pop	{r7, pc}
    13b8:	20000c9c 	.word	0x20000c9c
    13bc:	200005f0 	.word	0x200005f0
    13c0:	00003375 	.word	0x00003375

000013c4 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
    13c4:	b580      	push	{r7, lr}
    13c6:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    13c8:	4b0d      	ldr	r3, [pc, #52]	; (1400 <udc_req_std_ep_set_feature+0x3c>)
    13ca:	88db      	ldrh	r3, [r3, #6]
    13cc:	2b00      	cmp	r3, #0
    13ce:	d001      	beq.n	13d4 <udc_req_std_ep_set_feature+0x10>
		return false;
    13d0:	2300      	movs	r3, #0
    13d2:	e012      	b.n	13fa <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    13d4:	4b0a      	ldr	r3, [pc, #40]	; (1400 <udc_req_std_ep_set_feature+0x3c>)
    13d6:	885b      	ldrh	r3, [r3, #2]
    13d8:	2b00      	cmp	r3, #0
    13da:	d10d      	bne.n	13f8 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    13dc:	4b08      	ldr	r3, [pc, #32]	; (1400 <udc_req_std_ep_set_feature+0x3c>)
    13de:	889b      	ldrh	r3, [r3, #4]
    13e0:	b2db      	uxtb	r3, r3
    13e2:	1c18      	adds	r0, r3, #0
    13e4:	4b07      	ldr	r3, [pc, #28]	; (1404 <udc_req_std_ep_set_feature+0x40>)
    13e6:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    13e8:	4b05      	ldr	r3, [pc, #20]	; (1400 <udc_req_std_ep_set_feature+0x3c>)
    13ea:	889b      	ldrh	r3, [r3, #4]
    13ec:	b2db      	uxtb	r3, r3
    13ee:	1c18      	adds	r0, r3, #0
    13f0:	4b05      	ldr	r3, [pc, #20]	; (1408 <udc_req_std_ep_set_feature+0x44>)
    13f2:	4798      	blx	r3
    13f4:	1c03      	adds	r3, r0, #0
    13f6:	e000      	b.n	13fa <udc_req_std_ep_set_feature+0x36>
	}
	return false;
    13f8:	2300      	movs	r3, #0
}
    13fa:	1c18      	adds	r0, r3, #0
    13fc:	46bd      	mov	sp, r7
    13fe:	bd80      	pop	{r7, pc}
    1400:	20000c9c 	.word	0x20000c9c
    1404:	00002411 	.word	0x00002411
    1408:	000026e1 	.word	0x000026e1

0000140c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    140c:	b580      	push	{r7, lr}
    140e:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    1410:	4b05      	ldr	r3, [pc, #20]	; (1428 <udc_valid_address+0x1c>)
    1412:	885b      	ldrh	r3, [r3, #2]
    1414:	b2da      	uxtb	r2, r3
    1416:	237f      	movs	r3, #127	; 0x7f
    1418:	4013      	ands	r3, r2
    141a:	b2db      	uxtb	r3, r3
    141c:	1c18      	adds	r0, r3, #0
    141e:	4b03      	ldr	r3, [pc, #12]	; (142c <udc_valid_address+0x20>)
    1420:	4798      	blx	r3
}
    1422:	46bd      	mov	sp, r7
    1424:	bd80      	pop	{r7, pc}
    1426:	46c0      	nop			; (mov r8, r8)
    1428:	20000c9c 	.word	0x20000c9c
    142c:	00002ac5 	.word	0x00002ac5

00001430 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
    1430:	b580      	push	{r7, lr}
    1432:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
    1434:	4b06      	ldr	r3, [pc, #24]	; (1450 <udc_req_std_dev_set_address+0x20>)
    1436:	88db      	ldrh	r3, [r3, #6]
    1438:	2b00      	cmp	r3, #0
    143a:	d001      	beq.n	1440 <udc_req_std_dev_set_address+0x10>
		return false;
    143c:	2300      	movs	r3, #0
    143e:	e003      	b.n	1448 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    1440:	4b03      	ldr	r3, [pc, #12]	; (1450 <udc_req_std_dev_set_address+0x20>)
    1442:	4a04      	ldr	r2, [pc, #16]	; (1454 <udc_req_std_dev_set_address+0x24>)
    1444:	611a      	str	r2, [r3, #16]
	return true;
    1446:	2301      	movs	r3, #1
}
    1448:	1c18      	adds	r0, r3, #0
    144a:	46bd      	mov	sp, r7
    144c:	bd80      	pop	{r7, pc}
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	20000c9c 	.word	0x20000c9c
    1454:	0000140d 	.word	0x0000140d

00001458 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
    1458:	b580      	push	{r7, lr}
    145a:	b084      	sub	sp, #16
    145c:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
    145e:	1dfb      	adds	r3, r7, #7
    1460:	2200      	movs	r2, #0
    1462:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    1464:	4b34      	ldr	r3, [pc, #208]	; (1538 <udc_req_std_dev_get_str_desc+0xe0>)
    1466:	885b      	ldrh	r3, [r3, #2]
    1468:	1c1a      	adds	r2, r3, #0
    146a:	23ff      	movs	r3, #255	; 0xff
    146c:	4013      	ands	r3, r2
    146e:	2b01      	cmp	r3, #1
    1470:	d00e      	beq.n	1490 <udc_req_std_dev_get_str_desc+0x38>
    1472:	dc02      	bgt.n	147a <udc_req_std_dev_get_str_desc+0x22>
    1474:	2b00      	cmp	r3, #0
    1476:	d005      	beq.n	1484 <udc_req_std_dev_get_str_desc+0x2c>
    1478:	e01e      	b.n	14b8 <udc_req_std_dev_get_str_desc+0x60>
    147a:	2b02      	cmp	r3, #2
    147c:	d00e      	beq.n	149c <udc_req_std_dev_get_str_desc+0x44>
    147e:	2b03      	cmp	r3, #3
    1480:	d012      	beq.n	14a8 <udc_req_std_dev_get_str_desc+0x50>
    1482:	e019      	b.n	14b8 <udc_req_std_dev_get_str_desc+0x60>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    1484:	4b2d      	ldr	r3, [pc, #180]	; (153c <udc_req_std_dev_get_str_desc+0xe4>)
    1486:	1c18      	adds	r0, r3, #0
    1488:	2104      	movs	r1, #4
    148a:	4b2d      	ldr	r3, [pc, #180]	; (1540 <udc_req_std_dev_get_str_desc+0xe8>)
    148c:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
    148e:	e01b      	b.n	14c8 <udc_req_std_dev_get_str_desc+0x70>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    1490:	1dfb      	adds	r3, r7, #7
    1492:	2204      	movs	r2, #4
    1494:	701a      	strb	r2, [r3, #0]
		str = udc_string_manufacturer_name;
    1496:	4b2b      	ldr	r3, [pc, #172]	; (1544 <udc_req_std_dev_get_str_desc+0xec>)
    1498:	60bb      	str	r3, [r7, #8]
		break;
    149a:	e015      	b.n	14c8 <udc_req_std_dev_get_str_desc+0x70>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    149c:	1dfb      	adds	r3, r7, #7
    149e:	220f      	movs	r2, #15
    14a0:	701a      	strb	r2, [r3, #0]
		str = udc_string_product_name;
    14a2:	4b29      	ldr	r3, [pc, #164]	; (1548 <udc_req_std_dev_get_str_desc+0xf0>)
    14a4:	60bb      	str	r3, [r7, #8]
		break;
    14a6:	e00f      	b.n	14c8 <udc_req_std_dev_get_str_desc+0x70>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    14a8:	1dfb      	adds	r3, r7, #7
    14aa:	220c      	movs	r2, #12
    14ac:	701a      	strb	r2, [r3, #0]
		str = udc_get_string_serial_name();
    14ae:	4b27      	ldr	r3, [pc, #156]	; (154c <udc_req_std_dev_get_str_desc+0xf4>)
    14b0:	4798      	blx	r3
    14b2:	1c03      	adds	r3, r0, #0
    14b4:	60bb      	str	r3, [r7, #8]
		break;
    14b6:	e007      	b.n	14c8 <udc_req_std_dev_get_str_desc+0x70>
#endif
	default:
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
    14b8:	4b25      	ldr	r3, [pc, #148]	; (1550 <udc_req_std_dev_get_str_desc+0xf8>)
    14ba:	4798      	blx	r3
    14bc:	1c03      	adds	r3, r0, #0
    14be:	2b00      	cmp	r3, #0
    14c0:	d000      	beq.n	14c4 <udc_req_std_dev_get_str_desc+0x6c>
			break;
    14c2:	e001      	b.n	14c8 <udc_req_std_dev_get_str_desc+0x70>
		}
#endif
		return false;
    14c4:	2300      	movs	r3, #0
    14c6:	e033      	b.n	1530 <udc_req_std_dev_get_str_desc+0xd8>
	}

	if (str_length) {
    14c8:	1dfb      	adds	r3, r7, #7
    14ca:	781b      	ldrb	r3, [r3, #0]
    14cc:	2b00      	cmp	r3, #0
    14ce:	d02e      	beq.n	152e <udc_req_std_dev_get_str_desc+0xd6>
		for(i = 0; i < str_length; i++) {
    14d0:	1c3b      	adds	r3, r7, #0
    14d2:	330f      	adds	r3, #15
    14d4:	2200      	movs	r2, #0
    14d6:	701a      	strb	r2, [r3, #0]
    14d8:	e013      	b.n	1502 <udc_req_std_dev_get_str_desc+0xaa>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    14da:	1c3b      	adds	r3, r7, #0
    14dc:	330f      	adds	r3, #15
    14de:	781b      	ldrb	r3, [r3, #0]
    14e0:	1c3a      	adds	r2, r7, #0
    14e2:	320f      	adds	r2, #15
    14e4:	7812      	ldrb	r2, [r2, #0]
    14e6:	68b9      	ldr	r1, [r7, #8]
    14e8:	188a      	adds	r2, r1, r2
    14ea:	7812      	ldrb	r2, [r2, #0]
    14ec:	4919      	ldr	r1, [pc, #100]	; (1554 <udc_req_std_dev_get_str_desc+0xfc>)
    14ee:	005b      	lsls	r3, r3, #1
    14f0:	18cb      	adds	r3, r1, r3
    14f2:	805a      	strh	r2, [r3, #2]
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
    14f4:	1c3b      	adds	r3, r7, #0
    14f6:	330f      	adds	r3, #15
    14f8:	781a      	ldrb	r2, [r3, #0]
    14fa:	1c3b      	adds	r3, r7, #0
    14fc:	330f      	adds	r3, #15
    14fe:	3201      	adds	r2, #1
    1500:	701a      	strb	r2, [r3, #0]
    1502:	1c3a      	adds	r2, r7, #0
    1504:	320f      	adds	r2, #15
    1506:	1dfb      	adds	r3, r7, #7
    1508:	7812      	ldrb	r2, [r2, #0]
    150a:	781b      	ldrb	r3, [r3, #0]
    150c:	429a      	cmp	r2, r3
    150e:	d3e4      	bcc.n	14da <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    1510:	1dfb      	adds	r3, r7, #7
    1512:	781b      	ldrb	r3, [r3, #0]
    1514:	3301      	adds	r3, #1
    1516:	b2db      	uxtb	r3, r3
    1518:	18db      	adds	r3, r3, r3
    151a:	b2da      	uxtb	r2, r3
    151c:	4b0d      	ldr	r3, [pc, #52]	; (1554 <udc_req_std_dev_get_str_desc+0xfc>)
    151e:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
    1520:	4b0c      	ldr	r3, [pc, #48]	; (1554 <udc_req_std_dev_get_str_desc+0xfc>)
    1522:	781b      	ldrb	r3, [r3, #0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
    1524:	4a0b      	ldr	r2, [pc, #44]	; (1554 <udc_req_std_dev_get_str_desc+0xfc>)
    1526:	1c10      	adds	r0, r2, #0
    1528:	1c19      	adds	r1, r3, #0
    152a:	4b05      	ldr	r3, [pc, #20]	; (1540 <udc_req_std_dev_get_str_desc+0xe8>)
    152c:	4798      	blx	r3
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
    152e:	2301      	movs	r3, #1
}
    1530:	1c18      	adds	r0, r3, #0
    1532:	46bd      	mov	sp, r7
    1534:	b004      	add	sp, #16
    1536:	bd80      	pop	{r7, pc}
    1538:	20000c9c 	.word	0x20000c9c
    153c:	200002a8 	.word	0x200002a8
    1540:	00002b09 	.word	0x00002b09
    1544:	200002ac 	.word	0x200002ac
    1548:	200002b4 	.word	0x200002b4
    154c:	00000ef5 	.word	0x00000ef5
    1550:	00003385 	.word	0x00003385
    1554:	200002c4 	.word	0x200002c4

00001558 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
    1558:	b580      	push	{r7, lr}
    155a:	b082      	sub	sp, #8
    155c:	af00      	add	r7, sp, #0
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    155e:	4b39      	ldr	r3, [pc, #228]	; (1644 <udc_req_std_dev_get_descriptor+0xec>)
    1560:	885a      	ldrh	r2, [r3, #2]
    1562:	1dfb      	adds	r3, r7, #7
    1564:	701a      	strb	r2, [r3, #0]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    1566:	4b37      	ldr	r3, [pc, #220]	; (1644 <udc_req_std_dev_get_descriptor+0xec>)
    1568:	885b      	ldrh	r3, [r3, #2]
    156a:	0a1b      	lsrs	r3, r3, #8
    156c:	b29b      	uxth	r3, r3
    156e:	b2db      	uxtb	r3, r3
    1570:	2b02      	cmp	r3, #2
    1572:	d012      	beq.n	159a <udc_req_std_dev_get_descriptor+0x42>
    1574:	dc02      	bgt.n	157c <udc_req_std_dev_get_descriptor+0x24>
    1576:	2b01      	cmp	r3, #1
    1578:	d005      	beq.n	1586 <udc_req_std_dev_get_descriptor+0x2e>
    157a:	e052      	b.n	1622 <udc_req_std_dev_get_descriptor+0xca>
    157c:	2b03      	cmp	r3, #3
    157e:	d045      	beq.n	160c <udc_req_std_dev_get_descriptor+0xb4>
    1580:	2b0f      	cmp	r3, #15
    1582:	d02f      	beq.n	15e4 <udc_req_std_dev_get_descriptor+0x8c>
    1584:	e04d      	b.n	1622 <udc_req_std_dev_get_descriptor+0xca>
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
    1586:	4b30      	ldr	r3, [pc, #192]	; (1648 <udc_req_std_dev_get_descriptor+0xf0>)
    1588:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
    158a:	4b2f      	ldr	r3, [pc, #188]	; (1648 <udc_req_std_dev_get_descriptor+0xf0>)
    158c:	681b      	ldr	r3, [r3, #0]
    158e:	781b      	ldrb	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
    1590:	1c10      	adds	r0, r2, #0
    1592:	1c19      	adds	r1, r3, #0
    1594:	4b2d      	ldr	r3, [pc, #180]	; (164c <udc_req_std_dev_get_descriptor+0xf4>)
    1596:	4798      	blx	r3
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
    1598:	e045      	b.n	1626 <udc_req_std_dev_get_descriptor+0xce>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    159a:	4b2b      	ldr	r3, [pc, #172]	; (1648 <udc_req_std_dev_get_descriptor+0xf0>)
    159c:	681b      	ldr	r3, [r3, #0]
    159e:	7c5b      	ldrb	r3, [r3, #17]
    15a0:	1dfa      	adds	r2, r7, #7
    15a2:	7812      	ldrb	r2, [r2, #0]
    15a4:	429a      	cmp	r2, r3
    15a6:	d301      	bcc.n	15ac <udc_req_std_dev_get_descriptor+0x54>
					bNumConfigurations) {
				return false;
    15a8:	2300      	movs	r3, #0
    15aa:	e047      	b.n	163c <udc_req_std_dev_get_descriptor+0xe4>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    15ac:	4b26      	ldr	r3, [pc, #152]	; (1648 <udc_req_std_dev_get_descriptor+0xf0>)
    15ae:	685a      	ldr	r2, [r3, #4]
    15b0:	1dfb      	adds	r3, r7, #7
    15b2:	781b      	ldrb	r3, [r3, #0]
    15b4:	00db      	lsls	r3, r3, #3
    15b6:	18d3      	adds	r3, r2, r3
    15b8:	681a      	ldr	r2, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    15ba:	4b23      	ldr	r3, [pc, #140]	; (1648 <udc_req_std_dev_get_descriptor+0xf0>)
    15bc:	6859      	ldr	r1, [r3, #4]
    15be:	1dfb      	adds	r3, r7, #7
    15c0:	781b      	ldrb	r3, [r3, #0]
    15c2:	00db      	lsls	r3, r3, #3
    15c4:	18cb      	adds	r3, r1, r3
    15c6:	681b      	ldr	r3, [r3, #0]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
    15c8:	7899      	ldrb	r1, [r3, #2]
    15ca:	78db      	ldrb	r3, [r3, #3]
    15cc:	021b      	lsls	r3, r3, #8
    15ce:	430b      	orrs	r3, r1
    15d0:	b29b      	uxth	r3, r3
    15d2:	1c10      	adds	r0, r2, #0
    15d4:	1c19      	adds	r1, r3, #0
    15d6:	4b1d      	ldr	r3, [pc, #116]	; (164c <udc_req_std_dev_get_descriptor+0xf4>)
    15d8:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    15da:	4b1a      	ldr	r3, [pc, #104]	; (1644 <udc_req_std_dev_get_descriptor+0xec>)
    15dc:	689b      	ldr	r3, [r3, #8]
    15de:	2202      	movs	r2, #2
    15e0:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
    15e2:	e020      	b.n	1626 <udc_req_std_dev_get_descriptor+0xce>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    15e4:	4b18      	ldr	r3, [pc, #96]	; (1648 <udc_req_std_dev_get_descriptor+0xf0>)
    15e6:	689b      	ldr	r3, [r3, #8]
    15e8:	2b00      	cmp	r3, #0
    15ea:	d101      	bne.n	15f0 <udc_req_std_dev_get_descriptor+0x98>
			return false;
    15ec:	2300      	movs	r3, #0
    15ee:	e025      	b.n	163c <udc_req_std_dev_get_descriptor+0xe4>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    15f0:	4b15      	ldr	r3, [pc, #84]	; (1648 <udc_req_std_dev_get_descriptor+0xf0>)
    15f2:	689a      	ldr	r2, [r3, #8]
				udc_config.conf_bos->wTotalLength);
    15f4:	4b14      	ldr	r3, [pc, #80]	; (1648 <udc_req_std_dev_get_descriptor+0xf0>)
    15f6:	689b      	ldr	r3, [r3, #8]
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    15f8:	7899      	ldrb	r1, [r3, #2]
    15fa:	78db      	ldrb	r3, [r3, #3]
    15fc:	021b      	lsls	r3, r3, #8
    15fe:	430b      	orrs	r3, r1
    1600:	b29b      	uxth	r3, r3
    1602:	1c10      	adds	r0, r2, #0
    1604:	1c19      	adds	r1, r3, #0
    1606:	4b11      	ldr	r3, [pc, #68]	; (164c <udc_req_std_dev_get_descriptor+0xf4>)
    1608:	4798      	blx	r3
				udc_config.conf_bos->wTotalLength);
		break;
    160a:	e00c      	b.n	1626 <udc_req_std_dev_get_descriptor+0xce>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
    160c:	4b10      	ldr	r3, [pc, #64]	; (1650 <udc_req_std_dev_get_descriptor+0xf8>)
    160e:	4798      	blx	r3
    1610:	1c03      	adds	r3, r0, #0
    1612:	2201      	movs	r2, #1
    1614:	4053      	eors	r3, r2
    1616:	b2db      	uxtb	r3, r3
    1618:	2b00      	cmp	r3, #0
    161a:	d001      	beq.n	1620 <udc_req_std_dev_get_descriptor+0xc8>
			return false;
    161c:	2300      	movs	r3, #0
    161e:	e00d      	b.n	163c <udc_req_std_dev_get_descriptor+0xe4>
		}
		break;
    1620:	e001      	b.n	1626 <udc_req_std_dev_get_descriptor+0xce>

	default:
		// Unknown descriptor requested
		return false;
    1622:	2300      	movs	r3, #0
    1624:	e00a      	b.n	163c <udc_req_std_dev_get_descriptor+0xe4>
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    1626:	4b07      	ldr	r3, [pc, #28]	; (1644 <udc_req_std_dev_get_descriptor+0xec>)
    1628:	88da      	ldrh	r2, [r3, #6]
    162a:	4b06      	ldr	r3, [pc, #24]	; (1644 <udc_req_std_dev_get_descriptor+0xec>)
    162c:	899b      	ldrh	r3, [r3, #12]
    162e:	429a      	cmp	r2, r3
    1630:	d203      	bcs.n	163a <udc_req_std_dev_get_descriptor+0xe2>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    1632:	4b04      	ldr	r3, [pc, #16]	; (1644 <udc_req_std_dev_get_descriptor+0xec>)
    1634:	88da      	ldrh	r2, [r3, #6]
    1636:	4b03      	ldr	r3, [pc, #12]	; (1644 <udc_req_std_dev_get_descriptor+0xec>)
    1638:	819a      	strh	r2, [r3, #12]
	}
	return true;
    163a:	2301      	movs	r3, #1
}
    163c:	1c18      	adds	r0, r3, #0
    163e:	46bd      	mov	sp, r7
    1640:	b002      	add	sp, #8
    1642:	bd80      	pop	{r7, pc}
    1644:	20000c9c 	.word	0x20000c9c
    1648:	200000f8 	.word	0x200000f8
    164c:	00002b09 	.word	0x00002b09
    1650:	00001459 	.word	0x00001459

00001654 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
    1654:	b580      	push	{r7, lr}
    1656:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
    1658:	4b07      	ldr	r3, [pc, #28]	; (1678 <udc_req_std_dev_get_configuration+0x24>)
    165a:	88db      	ldrh	r3, [r3, #6]
    165c:	2b01      	cmp	r3, #1
    165e:	d001      	beq.n	1664 <udc_req_std_dev_get_configuration+0x10>
		return false;
    1660:	2300      	movs	r3, #0
    1662:	e005      	b.n	1670 <udc_req_std_dev_get_configuration+0x1c>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    1664:	4b05      	ldr	r3, [pc, #20]	; (167c <udc_req_std_dev_get_configuration+0x28>)
    1666:	1c18      	adds	r0, r3, #0
    1668:	2101      	movs	r1, #1
    166a:	4b05      	ldr	r3, [pc, #20]	; (1680 <udc_req_std_dev_get_configuration+0x2c>)
    166c:	4798      	blx	r3
	return true;
    166e:	2301      	movs	r3, #1
}
    1670:	1c18      	adds	r0, r3, #0
    1672:	46bd      	mov	sp, r7
    1674:	bd80      	pop	{r7, pc}
    1676:	46c0      	nop			; (mov r8, r8)
    1678:	20000c9c 	.word	0x20000c9c
    167c:	200005f8 	.word	0x200005f8
    1680:	00002b09 	.word	0x00002b09

00001684 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    1684:	b580      	push	{r7, lr}
    1686:	b082      	sub	sp, #8
    1688:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    168a:	4b2a      	ldr	r3, [pc, #168]	; (1734 <udc_req_std_dev_set_configuration+0xb0>)
    168c:	88db      	ldrh	r3, [r3, #6]
    168e:	2b00      	cmp	r3, #0
    1690:	d001      	beq.n	1696 <udc_req_std_dev_set_configuration+0x12>
		return false;
    1692:	2300      	movs	r3, #0
    1694:	e049      	b.n	172a <udc_req_std_dev_set_configuration+0xa6>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    1696:	4b28      	ldr	r3, [pc, #160]	; (1738 <udc_req_std_dev_set_configuration+0xb4>)
    1698:	4798      	blx	r3
    169a:	1c03      	adds	r3, r0, #0
    169c:	2b00      	cmp	r3, #0
    169e:	d101      	bne.n	16a4 <udc_req_std_dev_set_configuration+0x20>
		return false;
    16a0:	2300      	movs	r3, #0
    16a2:	e042      	b.n	172a <udc_req_std_dev_set_configuration+0xa6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    16a4:	4b23      	ldr	r3, [pc, #140]	; (1734 <udc_req_std_dev_set_configuration+0xb0>)
    16a6:	885b      	ldrh	r3, [r3, #2]
    16a8:	1c1a      	adds	r2, r3, #0
    16aa:	23ff      	movs	r3, #255	; 0xff
    16ac:	401a      	ands	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
    16ae:	4b23      	ldr	r3, [pc, #140]	; (173c <udc_req_std_dev_set_configuration+0xb8>)
    16b0:	681b      	ldr	r3, [r3, #0]
    16b2:	7c5b      	ldrb	r3, [r3, #17]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    16b4:	429a      	cmp	r2, r3
    16b6:	dd01      	ble.n	16bc <udc_req_std_dev_set_configuration+0x38>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
    16b8:	2300      	movs	r3, #0
    16ba:	e036      	b.n	172a <udc_req_std_dev_set_configuration+0xa6>
		}
	}

	// Reset current configuration
	udc_reset();
    16bc:	4b20      	ldr	r3, [pc, #128]	; (1740 <udc_req_std_dev_set_configuration+0xbc>)
    16be:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    16c0:	4b1c      	ldr	r3, [pc, #112]	; (1734 <udc_req_std_dev_set_configuration+0xb0>)
    16c2:	885b      	ldrh	r3, [r3, #2]
    16c4:	b2da      	uxtb	r2, r3
    16c6:	4b1f      	ldr	r3, [pc, #124]	; (1744 <udc_req_std_dev_set_configuration+0xc0>)
    16c8:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
    16ca:	4b1e      	ldr	r3, [pc, #120]	; (1744 <udc_req_std_dev_set_configuration+0xc0>)
    16cc:	781b      	ldrb	r3, [r3, #0]
    16ce:	2b00      	cmp	r3, #0
    16d0:	d101      	bne.n	16d6 <udc_req_std_dev_set_configuration+0x52>
		return true; // Default empty configuration requested
    16d2:	2301      	movs	r3, #1
    16d4:	e029      	b.n	172a <udc_req_std_dev_set_configuration+0xa6>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    16d6:	4b19      	ldr	r3, [pc, #100]	; (173c <udc_req_std_dev_set_configuration+0xb8>)
    16d8:	685a      	ldr	r2, [r3, #4]
    16da:	4b1a      	ldr	r3, [pc, #104]	; (1744 <udc_req_std_dev_set_configuration+0xc0>)
    16dc:	781b      	ldrb	r3, [r3, #0]
    16de:	491a      	ldr	r1, [pc, #104]	; (1748 <udc_req_std_dev_set_configuration+0xc4>)
    16e0:	185b      	adds	r3, r3, r1
    16e2:	00db      	lsls	r3, r3, #3
    16e4:	18d2      	adds	r2, r2, r3
    16e6:	4b19      	ldr	r3, [pc, #100]	; (174c <udc_req_std_dev_set_configuration+0xc8>)
    16e8:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    16ea:	1dfb      	adds	r3, r7, #7
    16ec:	2200      	movs	r2, #0
    16ee:	701a      	strb	r2, [r3, #0]
    16f0:	e012      	b.n	1718 <udc_req_std_dev_set_configuration+0x94>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    16f2:	1dfb      	adds	r3, r7, #7
    16f4:	781b      	ldrb	r3, [r3, #0]
    16f6:	1c18      	adds	r0, r3, #0
    16f8:	2100      	movs	r1, #0
    16fa:	4b15      	ldr	r3, [pc, #84]	; (1750 <udc_req_std_dev_set_configuration+0xcc>)
    16fc:	4798      	blx	r3
    16fe:	1c03      	adds	r3, r0, #0
    1700:	2201      	movs	r2, #1
    1702:	4053      	eors	r3, r2
    1704:	b2db      	uxtb	r3, r3
    1706:	2b00      	cmp	r3, #0
    1708:	d001      	beq.n	170e <udc_req_std_dev_set_configuration+0x8a>
			return false;
    170a:	2300      	movs	r3, #0
    170c:	e00d      	b.n	172a <udc_req_std_dev_set_configuration+0xa6>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    170e:	1dfb      	adds	r3, r7, #7
    1710:	781a      	ldrb	r2, [r3, #0]
    1712:	1dfb      	adds	r3, r7, #7
    1714:	3201      	adds	r2, #1
    1716:	701a      	strb	r2, [r3, #0]
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1718:	4b0c      	ldr	r3, [pc, #48]	; (174c <udc_req_std_dev_set_configuration+0xc8>)
    171a:	681b      	ldr	r3, [r3, #0]
    171c:	681b      	ldr	r3, [r3, #0]
    171e:	791b      	ldrb	r3, [r3, #4]
    1720:	1dfa      	adds	r2, r7, #7
    1722:	7812      	ldrb	r2, [r2, #0]
    1724:	429a      	cmp	r2, r3
    1726:	d3e4      	bcc.n	16f2 <udc_req_std_dev_set_configuration+0x6e>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
    1728:	2301      	movs	r3, #1
}
    172a:	1c18      	adds	r0, r3, #0
    172c:	46bd      	mov	sp, r7
    172e:	b002      	add	sp, #8
    1730:	bd80      	pop	{r7, pc}
    1732:	46c0      	nop			; (mov r8, r8)
    1734:	20000c9c 	.word	0x20000c9c
    1738:	00002aed 	.word	0x00002aed
    173c:	200000f8 	.word	0x200000f8
    1740:	000011b1 	.word	0x000011b1
    1744:	200005f8 	.word	0x200005f8
    1748:	1fffffff 	.word	0x1fffffff
    174c:	200005fc 	.word	0x200005fc
    1750:	000010ed 	.word	0x000010ed

00001754 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
    1754:	b580      	push	{r7, lr}
    1756:	b082      	sub	sp, #8
    1758:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    175a:	4b21      	ldr	r3, [pc, #132]	; (17e0 <udc_req_std_iface_get_setting+0x8c>)
    175c:	88db      	ldrh	r3, [r3, #6]
    175e:	2b01      	cmp	r3, #1
    1760:	d001      	beq.n	1766 <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
    1762:	2300      	movs	r3, #0
    1764:	e037      	b.n	17d6 <udc_req_std_iface_get_setting+0x82>
	}
	if (!udc_num_configuration) {
    1766:	4b1f      	ldr	r3, [pc, #124]	; (17e4 <udc_req_std_iface_get_setting+0x90>)
    1768:	781b      	ldrb	r3, [r3, #0]
    176a:	2b00      	cmp	r3, #0
    176c:	d101      	bne.n	1772 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
    176e:	2300      	movs	r3, #0
    1770:	e031      	b.n	17d6 <udc_req_std_iface_get_setting+0x82>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1772:	4b1b      	ldr	r3, [pc, #108]	; (17e0 <udc_req_std_iface_get_setting+0x8c>)
    1774:	889a      	ldrh	r2, [r3, #4]
    1776:	1dfb      	adds	r3, r7, #7
    1778:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    177a:	4b1b      	ldr	r3, [pc, #108]	; (17e8 <udc_req_std_iface_get_setting+0x94>)
    177c:	681b      	ldr	r3, [r3, #0]
    177e:	681b      	ldr	r3, [r3, #0]
    1780:	791b      	ldrb	r3, [r3, #4]
    1782:	1dfa      	adds	r2, r7, #7
    1784:	7812      	ldrb	r2, [r2, #0]
    1786:	429a      	cmp	r2, r3
    1788:	d301      	bcc.n	178e <udc_req_std_iface_get_setting+0x3a>
		return false;
    178a:	2300      	movs	r3, #0
    178c:	e023      	b.n	17d6 <udc_req_std_iface_get_setting+0x82>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    178e:	1dfb      	adds	r3, r7, #7
    1790:	781b      	ldrb	r3, [r3, #0]
    1792:	1c18      	adds	r0, r3, #0
    1794:	2100      	movs	r1, #0
    1796:	4b15      	ldr	r3, [pc, #84]	; (17ec <udc_req_std_iface_get_setting+0x98>)
    1798:	4798      	blx	r3
    179a:	1c03      	adds	r3, r0, #0
    179c:	2201      	movs	r2, #1
    179e:	4053      	eors	r3, r2
    17a0:	b2db      	uxtb	r3, r3
    17a2:	2b00      	cmp	r3, #0
    17a4:	d001      	beq.n	17aa <udc_req_std_iface_get_setting+0x56>
		return false;
    17a6:	2300      	movs	r3, #0
    17a8:	e015      	b.n	17d6 <udc_req_std_iface_get_setting+0x82>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    17aa:	4b0f      	ldr	r3, [pc, #60]	; (17e8 <udc_req_std_iface_get_setting+0x94>)
    17ac:	681b      	ldr	r3, [r3, #0]
    17ae:	685a      	ldr	r2, [r3, #4]
    17b0:	1dfb      	adds	r3, r7, #7
    17b2:	781b      	ldrb	r3, [r3, #0]
    17b4:	009b      	lsls	r3, r3, #2
    17b6:	18d3      	adds	r3, r2, r3
    17b8:	681b      	ldr	r3, [r3, #0]
    17ba:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
    17bc:	683b      	ldr	r3, [r7, #0]
    17be:	68db      	ldr	r3, [r3, #12]
    17c0:	4798      	blx	r3
    17c2:	1c03      	adds	r3, r0, #0
    17c4:	1c1a      	adds	r2, r3, #0
    17c6:	4b0a      	ldr	r3, [pc, #40]	; (17f0 <udc_req_std_iface_get_setting+0x9c>)
    17c8:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    17ca:	4b09      	ldr	r3, [pc, #36]	; (17f0 <udc_req_std_iface_get_setting+0x9c>)
    17cc:	1c18      	adds	r0, r3, #0
    17ce:	2101      	movs	r1, #1
    17d0:	4b08      	ldr	r3, [pc, #32]	; (17f4 <udc_req_std_iface_get_setting+0xa0>)
    17d2:	4798      	blx	r3
	return true;
    17d4:	2301      	movs	r3, #1
}
    17d6:	1c18      	adds	r0, r3, #0
    17d8:	46bd      	mov	sp, r7
    17da:	b002      	add	sp, #8
    17dc:	bd80      	pop	{r7, pc}
    17de:	46c0      	nop			; (mov r8, r8)
    17e0:	20000c9c 	.word	0x20000c9c
    17e4:	200005f8 	.word	0x200005f8
    17e8:	200005fc 	.word	0x200005fc
    17ec:	00000f9d 	.word	0x00000f9d
    17f0:	200005f4 	.word	0x200005f4
    17f4:	00002b09 	.word	0x00002b09

000017f8 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
    17f8:	b580      	push	{r7, lr}
    17fa:	b082      	sub	sp, #8
    17fc:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    17fe:	4b17      	ldr	r3, [pc, #92]	; (185c <udc_req_std_iface_set_setting+0x64>)
    1800:	88db      	ldrh	r3, [r3, #6]
    1802:	2b00      	cmp	r3, #0
    1804:	d001      	beq.n	180a <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
    1806:	2300      	movs	r3, #0
    1808:	e023      	b.n	1852 <udc_req_std_iface_set_setting+0x5a>
	}
	if (!udc_num_configuration) {
    180a:	4b15      	ldr	r3, [pc, #84]	; (1860 <udc_req_std_iface_set_setting+0x68>)
    180c:	781b      	ldrb	r3, [r3, #0]
    180e:	2b00      	cmp	r3, #0
    1810:	d101      	bne.n	1816 <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
    1812:	2300      	movs	r3, #0
    1814:	e01d      	b.n	1852 <udc_req_std_iface_set_setting+0x5a>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1816:	4b11      	ldr	r3, [pc, #68]	; (185c <udc_req_std_iface_set_setting+0x64>)
    1818:	889a      	ldrh	r2, [r3, #4]
    181a:	1dfb      	adds	r3, r7, #7
    181c:	701a      	strb	r2, [r3, #0]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    181e:	4b0f      	ldr	r3, [pc, #60]	; (185c <udc_req_std_iface_set_setting+0x64>)
    1820:	885a      	ldrh	r2, [r3, #2]
    1822:	1dbb      	adds	r3, r7, #6
    1824:	701a      	strb	r2, [r3, #0]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    1826:	1dfb      	adds	r3, r7, #7
    1828:	781b      	ldrb	r3, [r3, #0]
    182a:	1c18      	adds	r0, r3, #0
    182c:	4b0d      	ldr	r3, [pc, #52]	; (1864 <udc_req_std_iface_set_setting+0x6c>)
    182e:	4798      	blx	r3
    1830:	1c03      	adds	r3, r0, #0
    1832:	2201      	movs	r2, #1
    1834:	4053      	eors	r3, r2
    1836:	b2db      	uxtb	r3, r3
    1838:	2b00      	cmp	r3, #0
    183a:	d001      	beq.n	1840 <udc_req_std_iface_set_setting+0x48>
		return false;
    183c:	2300      	movs	r3, #0
    183e:	e008      	b.n	1852 <udc_req_std_iface_set_setting+0x5a>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    1840:	1dfb      	adds	r3, r7, #7
    1842:	781a      	ldrb	r2, [r3, #0]
    1844:	1dbb      	adds	r3, r7, #6
    1846:	781b      	ldrb	r3, [r3, #0]
    1848:	1c10      	adds	r0, r2, #0
    184a:	1c19      	adds	r1, r3, #0
    184c:	4b06      	ldr	r3, [pc, #24]	; (1868 <udc_req_std_iface_set_setting+0x70>)
    184e:	4798      	blx	r3
    1850:	1c03      	adds	r3, r0, #0
}
    1852:	1c18      	adds	r0, r3, #0
    1854:	46bd      	mov	sp, r7
    1856:	b002      	add	sp, #8
    1858:	bd80      	pop	{r7, pc}
    185a:	46c0      	nop			; (mov r8, r8)
    185c:	20000c9c 	.word	0x20000c9c
    1860:	200005f8 	.word	0x200005f8
    1864:	00001041 	.word	0x00001041
    1868:	000010ed 	.word	0x000010ed

0000186c <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
    186c:	b580      	push	{r7, lr}
    186e:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
    1870:	4b48      	ldr	r3, [pc, #288]	; (1994 <udc_reqstd+0x128>)
    1872:	781b      	ldrb	r3, [r3, #0]
    1874:	b2db      	uxtb	r3, r3
    1876:	b25b      	sxtb	r3, r3
    1878:	2b00      	cmp	r3, #0
    187a:	da41      	bge.n	1900 <udc_reqstd+0x94>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    187c:	4b45      	ldr	r3, [pc, #276]	; (1994 <udc_reqstd+0x128>)
    187e:	88db      	ldrh	r3, [r3, #6]
    1880:	2b00      	cmp	r3, #0
    1882:	d101      	bne.n	1888 <udc_reqstd+0x1c>
			return false; // Error for USB host
    1884:	2300      	movs	r3, #0
    1886:	e082      	b.n	198e <udc_reqstd+0x122>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1888:	4b42      	ldr	r3, [pc, #264]	; (1994 <udc_reqstd+0x128>)
    188a:	781b      	ldrb	r3, [r3, #0]
    188c:	1c1a      	adds	r2, r3, #0
    188e:	231f      	movs	r3, #31
    1890:	4013      	ands	r3, r2
    1892:	d114      	bne.n	18be <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    1894:	4b3f      	ldr	r3, [pc, #252]	; (1994 <udc_reqstd+0x128>)
    1896:	785b      	ldrb	r3, [r3, #1]
    1898:	2b06      	cmp	r3, #6
    189a:	d008      	beq.n	18ae <udc_reqstd+0x42>
    189c:	2b08      	cmp	r3, #8
    189e:	d00a      	beq.n	18b6 <udc_reqstd+0x4a>
    18a0:	2b00      	cmp	r3, #0
    18a2:	d000      	beq.n	18a6 <udc_reqstd+0x3a>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
    18a4:	e00b      	b.n	18be <udc_reqstd+0x52>

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
    18a6:	4b3c      	ldr	r3, [pc, #240]	; (1998 <udc_reqstd+0x12c>)
    18a8:	4798      	blx	r3
    18aa:	1c03      	adds	r3, r0, #0
    18ac:	e06f      	b.n	198e <udc_reqstd+0x122>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
    18ae:	4b3b      	ldr	r3, [pc, #236]	; (199c <udc_reqstd+0x130>)
    18b0:	4798      	blx	r3
    18b2:	1c03      	adds	r3, r0, #0
    18b4:	e06b      	b.n	198e <udc_reqstd+0x122>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
    18b6:	4b3a      	ldr	r3, [pc, #232]	; (19a0 <udc_reqstd+0x134>)
    18b8:	4798      	blx	r3
    18ba:	1c03      	adds	r3, r0, #0
    18bc:	e067      	b.n	198e <udc_reqstd+0x122>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    18be:	4b35      	ldr	r3, [pc, #212]	; (1994 <udc_reqstd+0x128>)
    18c0:	781b      	ldrb	r3, [r3, #0]
    18c2:	1c1a      	adds	r2, r3, #0
    18c4:	231f      	movs	r3, #31
    18c6:	4013      	ands	r3, r2
    18c8:	2b01      	cmp	r3, #1
    18ca:	d108      	bne.n	18de <udc_reqstd+0x72>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    18cc:	4b31      	ldr	r3, [pc, #196]	; (1994 <udc_reqstd+0x128>)
    18ce:	785b      	ldrb	r3, [r3, #1]
    18d0:	2b0a      	cmp	r3, #10
    18d2:	d000      	beq.n	18d6 <udc_reqstd+0x6a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
    18d4:	e003      	b.n	18de <udc_reqstd+0x72>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
    18d6:	4b33      	ldr	r3, [pc, #204]	; (19a4 <udc_reqstd+0x138>)
    18d8:	4798      	blx	r3
    18da:	1c03      	adds	r3, r0, #0
    18dc:	e057      	b.n	198e <udc_reqstd+0x122>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    18de:	4b2d      	ldr	r3, [pc, #180]	; (1994 <udc_reqstd+0x128>)
    18e0:	781b      	ldrb	r3, [r3, #0]
    18e2:	1c1a      	adds	r2, r3, #0
    18e4:	231f      	movs	r3, #31
    18e6:	4013      	ands	r3, r2
    18e8:	2b02      	cmp	r3, #2
    18ea:	d14f      	bne.n	198c <udc_reqstd+0x120>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    18ec:	4b29      	ldr	r3, [pc, #164]	; (1994 <udc_reqstd+0x128>)
    18ee:	785b      	ldrb	r3, [r3, #1]
    18f0:	2b00      	cmp	r3, #0
    18f2:	d001      	beq.n	18f8 <udc_reqstd+0x8c>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
    18f4:	46c0      	nop			; (mov r8, r8)
    18f6:	e049      	b.n	198c <udc_reqstd+0x120>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
    18f8:	4b2b      	ldr	r3, [pc, #172]	; (19a8 <udc_reqstd+0x13c>)
    18fa:	4798      	blx	r3
    18fc:	1c03      	adds	r3, r0, #0
    18fe:	e046      	b.n	198e <udc_reqstd+0x122>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    1900:	4b24      	ldr	r3, [pc, #144]	; (1994 <udc_reqstd+0x128>)
    1902:	781b      	ldrb	r3, [r3, #0]
    1904:	1c1a      	adds	r2, r3, #0
    1906:	231f      	movs	r3, #31
    1908:	4013      	ands	r3, r2
    190a:	d119      	bne.n	1940 <udc_reqstd+0xd4>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    190c:	4b21      	ldr	r3, [pc, #132]	; (1994 <udc_reqstd+0x128>)
    190e:	785b      	ldrb	r3, [r3, #1]
    1910:	2b09      	cmp	r3, #9
    1912:	d814      	bhi.n	193e <udc_reqstd+0xd2>
    1914:	009a      	lsls	r2, r3, #2
    1916:	4b25      	ldr	r3, [pc, #148]	; (19ac <udc_reqstd+0x140>)
    1918:	18d3      	adds	r3, r2, r3
    191a:	681b      	ldr	r3, [r3, #0]
    191c:	469f      	mov	pc, r3
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    191e:	4b24      	ldr	r3, [pc, #144]	; (19b0 <udc_reqstd+0x144>)
    1920:	4798      	blx	r3
    1922:	1c03      	adds	r3, r0, #0
    1924:	e033      	b.n	198e <udc_reqstd+0x122>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    1926:	4b23      	ldr	r3, [pc, #140]	; (19b4 <udc_reqstd+0x148>)
    1928:	4798      	blx	r3
    192a:	1c03      	adds	r3, r0, #0
    192c:	e02f      	b.n	198e <udc_reqstd+0x122>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    192e:	4b22      	ldr	r3, [pc, #136]	; (19b8 <udc_reqstd+0x14c>)
    1930:	4798      	blx	r3
    1932:	1c03      	adds	r3, r0, #0
    1934:	e02b      	b.n	198e <udc_reqstd+0x122>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    1936:	4b21      	ldr	r3, [pc, #132]	; (19bc <udc_reqstd+0x150>)
    1938:	4798      	blx	r3
    193a:	1c03      	adds	r3, r0, #0
    193c:	e027      	b.n	198e <udc_reqstd+0x122>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
    193e:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    1940:	4b14      	ldr	r3, [pc, #80]	; (1994 <udc_reqstd+0x128>)
    1942:	781b      	ldrb	r3, [r3, #0]
    1944:	1c1a      	adds	r2, r3, #0
    1946:	231f      	movs	r3, #31
    1948:	4013      	ands	r3, r2
    194a:	2b01      	cmp	r3, #1
    194c:	d108      	bne.n	1960 <udc_reqstd+0xf4>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    194e:	4b11      	ldr	r3, [pc, #68]	; (1994 <udc_reqstd+0x128>)
    1950:	785b      	ldrb	r3, [r3, #1]
    1952:	2b0b      	cmp	r3, #11
    1954:	d000      	beq.n	1958 <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
    1956:	e003      	b.n	1960 <udc_reqstd+0xf4>

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
    1958:	4b19      	ldr	r3, [pc, #100]	; (19c0 <udc_reqstd+0x154>)
    195a:	4798      	blx	r3
    195c:	1c03      	adds	r3, r0, #0
    195e:	e016      	b.n	198e <udc_reqstd+0x122>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    1960:	4b0c      	ldr	r3, [pc, #48]	; (1994 <udc_reqstd+0x128>)
    1962:	781b      	ldrb	r3, [r3, #0]
    1964:	1c1a      	adds	r2, r3, #0
    1966:	231f      	movs	r3, #31
    1968:	4013      	ands	r3, r2
    196a:	2b02      	cmp	r3, #2
    196c:	d10e      	bne.n	198c <udc_reqstd+0x120>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    196e:	4b09      	ldr	r3, [pc, #36]	; (1994 <udc_reqstd+0x128>)
    1970:	785b      	ldrb	r3, [r3, #1]
    1972:	2b01      	cmp	r3, #1
    1974:	d002      	beq.n	197c <udc_reqstd+0x110>
    1976:	2b03      	cmp	r3, #3
    1978:	d004      	beq.n	1984 <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
    197a:	e007      	b.n	198c <udc_reqstd+0x120>
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
    197c:	4b11      	ldr	r3, [pc, #68]	; (19c4 <udc_reqstd+0x158>)
    197e:	4798      	blx	r3
    1980:	1c03      	adds	r3, r0, #0
    1982:	e004      	b.n	198e <udc_reqstd+0x122>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
    1984:	4b10      	ldr	r3, [pc, #64]	; (19c8 <udc_reqstd+0x15c>)
    1986:	4798      	blx	r3
    1988:	1c03      	adds	r3, r0, #0
    198a:	e000      	b.n	198e <udc_reqstd+0x122>
				break;
			}
		}
#endif
	}
	return false;
    198c:	2300      	movs	r3, #0
}
    198e:	1c18      	adds	r0, r3, #0
    1990:	46bd      	mov	sp, r7
    1992:	bd80      	pop	{r7, pc}
    1994:	20000c9c 	.word	0x20000c9c
    1998:	0000128d 	.word	0x0000128d
    199c:	00001559 	.word	0x00001559
    19a0:	00001655 	.word	0x00001655
    19a4:	00001755 	.word	0x00001755
    19a8:	000012bd 	.word	0x000012bd
    19ac:	000067b4 	.word	0x000067b4
    19b0:	00001431 	.word	0x00001431
    19b4:	00001305 	.word	0x00001305
    19b8:	00001381 	.word	0x00001381
    19bc:	00001685 	.word	0x00001685
    19c0:	000017f9 	.word	0x000017f9
    19c4:	00001349 	.word	0x00001349
    19c8:	000013c5 	.word	0x000013c5

000019cc <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    19cc:	b580      	push	{r7, lr}
    19ce:	b082      	sub	sp, #8
    19d0:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    19d2:	4b22      	ldr	r3, [pc, #136]	; (1a5c <udc_req_iface+0x90>)
    19d4:	781b      	ldrb	r3, [r3, #0]
    19d6:	2b00      	cmp	r3, #0
    19d8:	d101      	bne.n	19de <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
    19da:	2300      	movs	r3, #0
    19dc:	e03a      	b.n	1a54 <udc_req_iface+0x88>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    19de:	4b20      	ldr	r3, [pc, #128]	; (1a60 <udc_req_iface+0x94>)
    19e0:	889a      	ldrh	r2, [r3, #4]
    19e2:	1dfb      	adds	r3, r7, #7
    19e4:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    19e6:	4b1f      	ldr	r3, [pc, #124]	; (1a64 <udc_req_iface+0x98>)
    19e8:	681b      	ldr	r3, [r3, #0]
    19ea:	681b      	ldr	r3, [r3, #0]
    19ec:	791b      	ldrb	r3, [r3, #4]
    19ee:	1dfa      	adds	r2, r7, #7
    19f0:	7812      	ldrb	r2, [r2, #0]
    19f2:	429a      	cmp	r2, r3
    19f4:	d301      	bcc.n	19fa <udc_req_iface+0x2e>
		return false;
    19f6:	2300      	movs	r3, #0
    19f8:	e02c      	b.n	1a54 <udc_req_iface+0x88>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    19fa:	1dfb      	adds	r3, r7, #7
    19fc:	781b      	ldrb	r3, [r3, #0]
    19fe:	1c18      	adds	r0, r3, #0
    1a00:	2100      	movs	r1, #0
    1a02:	4b19      	ldr	r3, [pc, #100]	; (1a68 <udc_req_iface+0x9c>)
    1a04:	4798      	blx	r3
    1a06:	1c03      	adds	r3, r0, #0
    1a08:	2201      	movs	r2, #1
    1a0a:	4053      	eors	r3, r2
    1a0c:	b2db      	uxtb	r3, r3
    1a0e:	2b00      	cmp	r3, #0
    1a10:	d001      	beq.n	1a16 <udc_req_iface+0x4a>
		return false;
    1a12:	2300      	movs	r3, #0
    1a14:	e01e      	b.n	1a54 <udc_req_iface+0x88>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    1a16:	4b13      	ldr	r3, [pc, #76]	; (1a64 <udc_req_iface+0x98>)
    1a18:	681b      	ldr	r3, [r3, #0]
    1a1a:	685a      	ldr	r2, [r3, #4]
    1a1c:	1dfb      	adds	r3, r7, #7
    1a1e:	781b      	ldrb	r3, [r3, #0]
    1a20:	009b      	lsls	r3, r3, #2
    1a22:	18d3      	adds	r3, r2, r3
    1a24:	681b      	ldr	r3, [r3, #0]
    1a26:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1a28:	683b      	ldr	r3, [r7, #0]
    1a2a:	68db      	ldr	r3, [r3, #12]
    1a2c:	4798      	blx	r3
    1a2e:	1c03      	adds	r3, r0, #0
    1a30:	1dfa      	adds	r2, r7, #7
    1a32:	7812      	ldrb	r2, [r2, #0]
    1a34:	1c10      	adds	r0, r2, #0
    1a36:	1c19      	adds	r1, r3, #0
    1a38:	4b0b      	ldr	r3, [pc, #44]	; (1a68 <udc_req_iface+0x9c>)
    1a3a:	4798      	blx	r3
    1a3c:	1c03      	adds	r3, r0, #0
    1a3e:	2201      	movs	r2, #1
    1a40:	4053      	eors	r3, r2
    1a42:	b2db      	uxtb	r3, r3
    1a44:	2b00      	cmp	r3, #0
    1a46:	d001      	beq.n	1a4c <udc_req_iface+0x80>
		return false;
    1a48:	2300      	movs	r3, #0
    1a4a:	e003      	b.n	1a54 <udc_req_iface+0x88>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    1a4c:	683b      	ldr	r3, [r7, #0]
    1a4e:	689b      	ldr	r3, [r3, #8]
    1a50:	4798      	blx	r3
    1a52:	1c03      	adds	r3, r0, #0
}
    1a54:	1c18      	adds	r0, r3, #0
    1a56:	46bd      	mov	sp, r7
    1a58:	b002      	add	sp, #8
    1a5a:	bd80      	pop	{r7, pc}
    1a5c:	200005f8 	.word	0x200005f8
    1a60:	20000c9c 	.word	0x20000c9c
    1a64:	200005fc 	.word	0x200005fc
    1a68:	00000f9d 	.word	0x00000f9d

00001a6c <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    1a6c:	b580      	push	{r7, lr}
    1a6e:	b082      	sub	sp, #8
    1a70:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    1a72:	4b21      	ldr	r3, [pc, #132]	; (1af8 <udc_req_ep+0x8c>)
    1a74:	781b      	ldrb	r3, [r3, #0]
    1a76:	2b00      	cmp	r3, #0
    1a78:	d101      	bne.n	1a7e <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
    1a7a:	2300      	movs	r3, #0
    1a7c:	e038      	b.n	1af0 <udc_req_ep+0x84>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    1a7e:	4b1f      	ldr	r3, [pc, #124]	; (1afc <udc_req_ep+0x90>)
    1a80:	889a      	ldrh	r2, [r3, #4]
    1a82:	1dfb      	adds	r3, r7, #7
    1a84:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1a86:	1dfb      	adds	r3, r7, #7
    1a88:	2200      	movs	r2, #0
    1a8a:	701a      	strb	r2, [r3, #0]
    1a8c:	e027      	b.n	1ade <udc_req_ep+0x72>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    1a8e:	4b1c      	ldr	r3, [pc, #112]	; (1b00 <udc_req_ep+0x94>)
    1a90:	681b      	ldr	r3, [r3, #0]
    1a92:	685a      	ldr	r2, [r3, #4]
    1a94:	1dfb      	adds	r3, r7, #7
    1a96:	781b      	ldrb	r3, [r3, #0]
    1a98:	009b      	lsls	r3, r3, #2
    1a9a:	18d3      	adds	r3, r2, r3
    1a9c:	681b      	ldr	r3, [r3, #0]
    1a9e:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    1aa0:	683b      	ldr	r3, [r7, #0]
    1aa2:	68db      	ldr	r3, [r3, #12]
    1aa4:	4798      	blx	r3
    1aa6:	1c03      	adds	r3, r0, #0
    1aa8:	1dfa      	adds	r2, r7, #7
    1aaa:	7812      	ldrb	r2, [r2, #0]
    1aac:	1c10      	adds	r0, r2, #0
    1aae:	1c19      	adds	r1, r3, #0
    1ab0:	4b14      	ldr	r3, [pc, #80]	; (1b04 <udc_req_ep+0x98>)
    1ab2:	4798      	blx	r3
    1ab4:	1c03      	adds	r3, r0, #0
    1ab6:	2201      	movs	r2, #1
    1ab8:	4053      	eors	r3, r2
    1aba:	b2db      	uxtb	r3, r3
    1abc:	2b00      	cmp	r3, #0
    1abe:	d001      	beq.n	1ac4 <udc_req_ep+0x58>
			return false;
    1ac0:	2300      	movs	r3, #0
    1ac2:	e015      	b.n	1af0 <udc_req_ep+0x84>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    1ac4:	683b      	ldr	r3, [r7, #0]
    1ac6:	689b      	ldr	r3, [r3, #8]
    1ac8:	4798      	blx	r3
    1aca:	1c03      	adds	r3, r0, #0
    1acc:	2b00      	cmp	r3, #0
    1ace:	d001      	beq.n	1ad4 <udc_req_ep+0x68>
			return true;
    1ad0:	2301      	movs	r3, #1
    1ad2:	e00d      	b.n	1af0 <udc_req_ep+0x84>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
    1ad4:	1dfb      	adds	r3, r7, #7
    1ad6:	781a      	ldrb	r2, [r3, #0]
    1ad8:	1dfb      	adds	r3, r7, #7
    1ada:	3201      	adds	r2, #1
    1adc:	701a      	strb	r2, [r3, #0]
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    1ade:	4b08      	ldr	r3, [pc, #32]	; (1b00 <udc_req_ep+0x94>)
    1ae0:	681b      	ldr	r3, [r3, #0]
    1ae2:	681b      	ldr	r3, [r3, #0]
    1ae4:	791b      	ldrb	r3, [r3, #4]
    1ae6:	1dfa      	adds	r2, r7, #7
    1ae8:	7812      	ldrb	r2, [r2, #0]
    1aea:	429a      	cmp	r2, r3
    1aec:	d3cf      	bcc.n	1a8e <udc_req_ep+0x22>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
    1aee:	2300      	movs	r3, #0
}
    1af0:	1c18      	adds	r0, r3, #0
    1af2:	46bd      	mov	sp, r7
    1af4:	b002      	add	sp, #8
    1af6:	bd80      	pop	{r7, pc}
    1af8:	200005f8 	.word	0x200005f8
    1afc:	20000c9c 	.word	0x20000c9c
    1b00:	200005fc 	.word	0x200005fc
    1b04:	00000f9d 	.word	0x00000f9d

00001b08 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    1b08:	b580      	push	{r7, lr}
    1b0a:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    1b0c:	4b20      	ldr	r3, [pc, #128]	; (1b90 <udc_process_setup+0x88>)
    1b0e:	2200      	movs	r2, #0
    1b10:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    1b12:	4b1f      	ldr	r3, [pc, #124]	; (1b90 <udc_process_setup+0x88>)
    1b14:	2200      	movs	r2, #0
    1b16:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    1b18:	4b1d      	ldr	r3, [pc, #116]	; (1b90 <udc_process_setup+0x88>)
    1b1a:	2200      	movs	r2, #0
    1b1c:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    1b1e:	4b1c      	ldr	r3, [pc, #112]	; (1b90 <udc_process_setup+0x88>)
    1b20:	781b      	ldrb	r3, [r3, #0]
    1b22:	b2db      	uxtb	r3, r3
    1b24:	b25b      	sxtb	r3, r3
    1b26:	2b00      	cmp	r3, #0
    1b28:	da05      	bge.n	1b36 <udc_process_setup+0x2e>
		if (udd_g_ctrlreq.req.wLength == 0) {
    1b2a:	4b19      	ldr	r3, [pc, #100]	; (1b90 <udc_process_setup+0x88>)
    1b2c:	88db      	ldrh	r3, [r3, #6]
    1b2e:	2b00      	cmp	r3, #0
    1b30:	d101      	bne.n	1b36 <udc_process_setup+0x2e>
			return false; // Error from USB host
    1b32:	2300      	movs	r3, #0
    1b34:	e029      	b.n	1b8a <udc_process_setup+0x82>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    1b36:	4b16      	ldr	r3, [pc, #88]	; (1b90 <udc_process_setup+0x88>)
    1b38:	781b      	ldrb	r3, [r3, #0]
    1b3a:	1c1a      	adds	r2, r3, #0
    1b3c:	2360      	movs	r3, #96	; 0x60
    1b3e:	4013      	ands	r3, r2
    1b40:	d106      	bne.n	1b50 <udc_process_setup+0x48>
		if (udc_reqstd()) {
    1b42:	4b14      	ldr	r3, [pc, #80]	; (1b94 <udc_process_setup+0x8c>)
    1b44:	4798      	blx	r3
    1b46:	1c03      	adds	r3, r0, #0
    1b48:	2b00      	cmp	r3, #0
    1b4a:	d001      	beq.n	1b50 <udc_process_setup+0x48>
			return true;
    1b4c:	2301      	movs	r3, #1
    1b4e:	e01c      	b.n	1b8a <udc_process_setup+0x82>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    1b50:	4b0f      	ldr	r3, [pc, #60]	; (1b90 <udc_process_setup+0x88>)
    1b52:	781b      	ldrb	r3, [r3, #0]
    1b54:	1c1a      	adds	r2, r3, #0
    1b56:	231f      	movs	r3, #31
    1b58:	4013      	ands	r3, r2
    1b5a:	2b01      	cmp	r3, #1
    1b5c:	d106      	bne.n	1b6c <udc_process_setup+0x64>
		if (udc_req_iface()) {
    1b5e:	4b0e      	ldr	r3, [pc, #56]	; (1b98 <udc_process_setup+0x90>)
    1b60:	4798      	blx	r3
    1b62:	1c03      	adds	r3, r0, #0
    1b64:	2b00      	cmp	r3, #0
    1b66:	d001      	beq.n	1b6c <udc_process_setup+0x64>
			return true;
    1b68:	2301      	movs	r3, #1
    1b6a:	e00e      	b.n	1b8a <udc_process_setup+0x82>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    1b6c:	4b08      	ldr	r3, [pc, #32]	; (1b90 <udc_process_setup+0x88>)
    1b6e:	781b      	ldrb	r3, [r3, #0]
    1b70:	1c1a      	adds	r2, r3, #0
    1b72:	231f      	movs	r3, #31
    1b74:	4013      	ands	r3, r2
    1b76:	2b02      	cmp	r3, #2
    1b78:	d106      	bne.n	1b88 <udc_process_setup+0x80>
		if (udc_req_ep()) {
    1b7a:	4b08      	ldr	r3, [pc, #32]	; (1b9c <udc_process_setup+0x94>)
    1b7c:	4798      	blx	r3
    1b7e:	1c03      	adds	r3, r0, #0
    1b80:	2b00      	cmp	r3, #0
    1b82:	d001      	beq.n	1b88 <udc_process_setup+0x80>
			return true;
    1b84:	2301      	movs	r3, #1
    1b86:	e000      	b.n	1b8a <udc_process_setup+0x82>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    1b88:	2300      	movs	r3, #0
#endif
}
    1b8a:	1c18      	adds	r0, r3, #0
    1b8c:	46bd      	mov	sp, r7
    1b8e:	bd80      	pop	{r7, pc}
    1b90:	20000c9c 	.word	0x20000c9c
    1b94:	0000186d 	.word	0x0000186d
    1b98:	000019cd 	.word	0x000019cd
    1b9c:	00001a6d 	.word	0x00001a6d

00001ba0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1ba0:	b580      	push	{r7, lr}
    1ba2:	b082      	sub	sp, #8
    1ba4:	af00      	add	r7, sp, #0
    1ba6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1ba8:	687b      	ldr	r3, [r7, #4]
    1baa:	2200      	movs	r2, #0
    1bac:	701a      	strb	r2, [r3, #0]
}
    1bae:	46bd      	mov	sp, r7
    1bb0:	b002      	add	sp, #8
    1bb2:	bd80      	pop	{r7, pc}

00001bb4 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1bb4:	b580      	push	{r7, lr}
    1bb6:	b082      	sub	sp, #8
    1bb8:	af00      	add	r7, sp, #0
    1bba:	1c02      	adds	r2, r0, #0
    1bbc:	6039      	str	r1, [r7, #0]
    1bbe:	1dfb      	adds	r3, r7, #7
    1bc0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1bc2:	1dfb      	adds	r3, r7, #7
    1bc4:	781b      	ldrb	r3, [r3, #0]
    1bc6:	2b01      	cmp	r3, #1
    1bc8:	d00a      	beq.n	1be0 <system_apb_clock_set_mask+0x2c>
    1bca:	2b02      	cmp	r3, #2
    1bcc:	d00f      	beq.n	1bee <system_apb_clock_set_mask+0x3a>
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d114      	bne.n	1bfc <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1bd2:	4b0e      	ldr	r3, [pc, #56]	; (1c0c <system_apb_clock_set_mask+0x58>)
    1bd4:	4a0d      	ldr	r2, [pc, #52]	; (1c0c <system_apb_clock_set_mask+0x58>)
    1bd6:	6991      	ldr	r1, [r2, #24]
    1bd8:	683a      	ldr	r2, [r7, #0]
    1bda:	430a      	orrs	r2, r1
    1bdc:	619a      	str	r2, [r3, #24]
			break;
    1bde:	e00f      	b.n	1c00 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1be0:	4b0a      	ldr	r3, [pc, #40]	; (1c0c <system_apb_clock_set_mask+0x58>)
    1be2:	4a0a      	ldr	r2, [pc, #40]	; (1c0c <system_apb_clock_set_mask+0x58>)
    1be4:	69d1      	ldr	r1, [r2, #28]
    1be6:	683a      	ldr	r2, [r7, #0]
    1be8:	430a      	orrs	r2, r1
    1bea:	61da      	str	r2, [r3, #28]
			break;
    1bec:	e008      	b.n	1c00 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1bee:	4b07      	ldr	r3, [pc, #28]	; (1c0c <system_apb_clock_set_mask+0x58>)
    1bf0:	4a06      	ldr	r2, [pc, #24]	; (1c0c <system_apb_clock_set_mask+0x58>)
    1bf2:	6a11      	ldr	r1, [r2, #32]
    1bf4:	683a      	ldr	r2, [r7, #0]
    1bf6:	430a      	orrs	r2, r1
    1bf8:	621a      	str	r2, [r3, #32]
			break;
    1bfa:	e001      	b.n	1c00 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1bfc:	2317      	movs	r3, #23
    1bfe:	e000      	b.n	1c02 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1c00:	2300      	movs	r3, #0
}
    1c02:	1c18      	adds	r0, r3, #0
    1c04:	46bd      	mov	sp, r7
    1c06:	b002      	add	sp, #8
    1c08:	bd80      	pop	{r7, pc}
    1c0a:	46c0      	nop			; (mov r8, r8)
    1c0c:	40000400 	.word	0x40000400

00001c10 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1c10:	b580      	push	{r7, lr}
    1c12:	b082      	sub	sp, #8
    1c14:	af00      	add	r7, sp, #0
    1c16:	1c02      	adds	r2, r0, #0
    1c18:	1dfb      	adds	r3, r7, #7
    1c1a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1c1c:	4b06      	ldr	r3, [pc, #24]	; (1c38 <system_interrupt_enable+0x28>)
    1c1e:	1dfa      	adds	r2, r7, #7
    1c20:	7812      	ldrb	r2, [r2, #0]
    1c22:	1c11      	adds	r1, r2, #0
    1c24:	221f      	movs	r2, #31
    1c26:	400a      	ands	r2, r1
    1c28:	2101      	movs	r1, #1
    1c2a:	1c08      	adds	r0, r1, #0
    1c2c:	4090      	lsls	r0, r2
    1c2e:	1c02      	adds	r2, r0, #0
    1c30:	601a      	str	r2, [r3, #0]
}
    1c32:	46bd      	mov	sp, r7
    1c34:	b002      	add	sp, #8
    1c36:	bd80      	pop	{r7, pc}
    1c38:	e000e100 	.word	0xe000e100

00001c3c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    1c3c:	b580      	push	{r7, lr}
    1c3e:	b082      	sub	sp, #8
    1c40:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    1c42:	4b0f      	ldr	r3, [pc, #60]	; (1c80 <extint_is_syncing+0x44>)
    1c44:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1c46:	2300      	movs	r3, #0
    1c48:	607b      	str	r3, [r7, #4]
    1c4a:	e011      	b.n	1c70 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    1c4c:	687b      	ldr	r3, [r7, #4]
    1c4e:	009b      	lsls	r3, r3, #2
    1c50:	2208      	movs	r2, #8
    1c52:	19d2      	adds	r2, r2, r7
    1c54:	18d3      	adds	r3, r2, r3
    1c56:	3b08      	subs	r3, #8
    1c58:	681b      	ldr	r3, [r3, #0]
    1c5a:	785b      	ldrb	r3, [r3, #1]
    1c5c:	b2db      	uxtb	r3, r3
    1c5e:	b2db      	uxtb	r3, r3
    1c60:	b25b      	sxtb	r3, r3
    1c62:	2b00      	cmp	r3, #0
    1c64:	da01      	bge.n	1c6a <extint_is_syncing+0x2e>
			return true;
    1c66:	2301      	movs	r3, #1
    1c68:	e006      	b.n	1c78 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1c6a:	687b      	ldr	r3, [r7, #4]
    1c6c:	3301      	adds	r3, #1
    1c6e:	607b      	str	r3, [r7, #4]
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	2b00      	cmp	r3, #0
    1c74:	d0ea      	beq.n	1c4c <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    1c76:	2300      	movs	r3, #0
}
    1c78:	1c18      	adds	r0, r3, #0
    1c7a:	46bd      	mov	sp, r7
    1c7c:	b002      	add	sp, #8
    1c7e:	bd80      	pop	{r7, pc}
    1c80:	40001800 	.word	0x40001800

00001c84 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    1c84:	b580      	push	{r7, lr}
    1c86:	b084      	sub	sp, #16
    1c88:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    1c8a:	4b2c      	ldr	r3, [pc, #176]	; (1d3c <_system_extint_init+0xb8>)
    1c8c:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    1c8e:	2000      	movs	r0, #0
    1c90:	2140      	movs	r1, #64	; 0x40
    1c92:	4b2b      	ldr	r3, [pc, #172]	; (1d40 <_system_extint_init+0xbc>)
    1c94:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1c96:	1c3b      	adds	r3, r7, #0
    1c98:	1c18      	adds	r0, r3, #0
    1c9a:	4b2a      	ldr	r3, [pc, #168]	; (1d44 <_system_extint_init+0xc0>)
    1c9c:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    1c9e:	1c3b      	adds	r3, r7, #0
    1ca0:	2200      	movs	r2, #0
    1ca2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    1ca4:	1c3b      	adds	r3, r7, #0
    1ca6:	2005      	movs	r0, #5
    1ca8:	1c19      	adds	r1, r3, #0
    1caa:	4b27      	ldr	r3, [pc, #156]	; (1d48 <_system_extint_init+0xc4>)
    1cac:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    1cae:	2005      	movs	r0, #5
    1cb0:	4b26      	ldr	r3, [pc, #152]	; (1d4c <_system_extint_init+0xc8>)
    1cb2:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1cb4:	2300      	movs	r3, #0
    1cb6:	60fb      	str	r3, [r7, #12]
    1cb8:	e016      	b.n	1ce8 <_system_extint_init+0x64>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    1cba:	68fb      	ldr	r3, [r7, #12]
    1cbc:	009b      	lsls	r3, r3, #2
    1cbe:	2110      	movs	r1, #16
    1cc0:	19c9      	adds	r1, r1, r7
    1cc2:	18cb      	adds	r3, r1, r3
    1cc4:	3b0c      	subs	r3, #12
    1cc6:	681a      	ldr	r2, [r3, #0]
    1cc8:	68fb      	ldr	r3, [r7, #12]
    1cca:	009b      	lsls	r3, r3, #2
    1ccc:	2110      	movs	r1, #16
    1cce:	19c9      	adds	r1, r1, r7
    1cd0:	18cb      	adds	r3, r1, r3
    1cd2:	3b0c      	subs	r3, #12
    1cd4:	681b      	ldr	r3, [r3, #0]
    1cd6:	781b      	ldrb	r3, [r3, #0]
    1cd8:	b2db      	uxtb	r3, r3
    1cda:	2101      	movs	r1, #1
    1cdc:	430b      	orrs	r3, r1
    1cde:	b2db      	uxtb	r3, r3
    1ce0:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1ce2:	68fb      	ldr	r3, [r7, #12]
    1ce4:	3301      	adds	r3, #1
    1ce6:	60fb      	str	r3, [r7, #12]
    1ce8:	68fb      	ldr	r3, [r7, #12]
    1cea:	2b00      	cmp	r3, #0
    1cec:	d0e5      	beq.n	1cba <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	4b17      	ldr	r3, [pc, #92]	; (1d50 <_system_extint_init+0xcc>)
    1cf2:	4798      	blx	r3
    1cf4:	1c03      	adds	r3, r0, #0
    1cf6:	2b00      	cmp	r3, #0
    1cf8:	d1fa      	bne.n	1cf0 <_system_extint_init+0x6c>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1cfa:	1c3b      	adds	r3, r7, #0
    1cfc:	330b      	adds	r3, #11
    1cfe:	2200      	movs	r2, #0
    1d00:	701a      	strb	r2, [r3, #0]
    1d02:	e00d      	b.n	1d20 <_system_extint_init+0x9c>
		_extint_dev.callbacks[j] = NULL;
    1d04:	1c3b      	adds	r3, r7, #0
    1d06:	330b      	adds	r3, #11
    1d08:	781a      	ldrb	r2, [r3, #0]
    1d0a:	4b12      	ldr	r3, [pc, #72]	; (1d54 <_system_extint_init+0xd0>)
    1d0c:	0092      	lsls	r2, r2, #2
    1d0e:	2100      	movs	r1, #0
    1d10:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    1d12:	1c3b      	adds	r3, r7, #0
    1d14:	330b      	adds	r3, #11
    1d16:	781a      	ldrb	r2, [r3, #0]
    1d18:	1c3b      	adds	r3, r7, #0
    1d1a:	330b      	adds	r3, #11
    1d1c:	3201      	adds	r2, #1
    1d1e:	701a      	strb	r2, [r3, #0]
    1d20:	1c3b      	adds	r3, r7, #0
    1d22:	330b      	adds	r3, #11
    1d24:	781b      	ldrb	r3, [r3, #0]
    1d26:	2b0f      	cmp	r3, #15
    1d28:	d9ec      	bls.n	1d04 <_system_extint_init+0x80>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    1d2a:	2004      	movs	r0, #4
    1d2c:	4b0a      	ldr	r3, [pc, #40]	; (1d58 <_system_extint_init+0xd4>)
    1d2e:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    1d30:	4b0a      	ldr	r3, [pc, #40]	; (1d5c <_system_extint_init+0xd8>)
    1d32:	4798      	blx	r3
}
    1d34:	46bd      	mov	sp, r7
    1d36:	b004      	add	sp, #16
    1d38:	bd80      	pop	{r7, pc}
    1d3a:	46c0      	nop			; (mov r8, r8)
    1d3c:	40001800 	.word	0x40001800
    1d40:	00001bb5 	.word	0x00001bb5
    1d44:	00001ba1 	.word	0x00001ba1
    1d48:	0000603d 	.word	0x0000603d
    1d4c:	0000607d 	.word	0x0000607d
    1d50:	00001c3d 	.word	0x00001c3d
    1d54:	20000934 	.word	0x20000934
    1d58:	00001c11 	.word	0x00001c11
    1d5c:	00001d61 	.word	0x00001d61

00001d60 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    1d60:	b580      	push	{r7, lr}
    1d62:	b082      	sub	sp, #8
    1d64:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    1d66:	4b14      	ldr	r3, [pc, #80]	; (1db8 <_extint_enable+0x58>)
    1d68:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1d6a:	2300      	movs	r3, #0
    1d6c:	607b      	str	r3, [r7, #4]
    1d6e:	e016      	b.n	1d9e <_extint_enable+0x3e>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    1d70:	687b      	ldr	r3, [r7, #4]
    1d72:	009b      	lsls	r3, r3, #2
    1d74:	2108      	movs	r1, #8
    1d76:	19c9      	adds	r1, r1, r7
    1d78:	18cb      	adds	r3, r1, r3
    1d7a:	3b08      	subs	r3, #8
    1d7c:	681a      	ldr	r2, [r3, #0]
    1d7e:	687b      	ldr	r3, [r7, #4]
    1d80:	009b      	lsls	r3, r3, #2
    1d82:	2108      	movs	r1, #8
    1d84:	19c9      	adds	r1, r1, r7
    1d86:	18cb      	adds	r3, r1, r3
    1d88:	3b08      	subs	r3, #8
    1d8a:	681b      	ldr	r3, [r3, #0]
    1d8c:	781b      	ldrb	r3, [r3, #0]
    1d8e:	b2db      	uxtb	r3, r3
    1d90:	2102      	movs	r1, #2
    1d92:	430b      	orrs	r3, r1
    1d94:	b2db      	uxtb	r3, r3
    1d96:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    1d98:	687b      	ldr	r3, [r7, #4]
    1d9a:	3301      	adds	r3, #1
    1d9c:	607b      	str	r3, [r7, #4]
    1d9e:	687b      	ldr	r3, [r7, #4]
    1da0:	2b00      	cmp	r3, #0
    1da2:	d0e5      	beq.n	1d70 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    1da4:	46c0      	nop			; (mov r8, r8)
    1da6:	4b05      	ldr	r3, [pc, #20]	; (1dbc <_extint_enable+0x5c>)
    1da8:	4798      	blx	r3
    1daa:	1c03      	adds	r3, r0, #0
    1dac:	2b00      	cmp	r3, #0
    1dae:	d1fa      	bne.n	1da6 <_extint_enable+0x46>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    1db0:	46bd      	mov	sp, r7
    1db2:	b002      	add	sp, #8
    1db4:	bd80      	pop	{r7, pc}
    1db6:	46c0      	nop			; (mov r8, r8)
    1db8:	40001800 	.word	0x40001800
    1dbc:	00001c3d 	.word	0x00001c3d

00001dc0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    1dc0:	b580      	push	{r7, lr}
    1dc2:	b082      	sub	sp, #8
    1dc4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1dc6:	f3ef 8310 	mrs	r3, PRIMASK
    1dca:	603b      	str	r3, [r7, #0]
  return(result);
    1dcc:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
    1dce:	425a      	negs	r2, r3
    1dd0:	4153      	adcs	r3, r2
    1dd2:	b2db      	uxtb	r3, r3
    1dd4:	607b      	str	r3, [r7, #4]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1dd6:	b672      	cpsid	i
    1dd8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1ddc:	4b03      	ldr	r3, [pc, #12]	; (1dec <cpu_irq_save+0x2c>)
    1dde:	2200      	movs	r2, #0
    1de0:	701a      	strb	r2, [r3, #0]
	return flags;
    1de2:	687b      	ldr	r3, [r7, #4]
}
    1de4:	1c18      	adds	r0, r3, #0
    1de6:	46bd      	mov	sp, r7
    1de8:	b002      	add	sp, #8
    1dea:	bd80      	pop	{r7, pc}
    1dec:	200003b4 	.word	0x200003b4

00001df0 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    1df0:	b580      	push	{r7, lr}
    1df2:	b082      	sub	sp, #8
    1df4:	af00      	add	r7, sp, #0
    1df6:	6078      	str	r0, [r7, #4]
	return (flags);
    1df8:	687b      	ldr	r3, [r7, #4]
    1dfa:	1e5a      	subs	r2, r3, #1
    1dfc:	4193      	sbcs	r3, r2
    1dfe:	b2db      	uxtb	r3, r3
}
    1e00:	1c18      	adds	r0, r3, #0
    1e02:	46bd      	mov	sp, r7
    1e04:	b002      	add	sp, #8
    1e06:	bd80      	pop	{r7, pc}

00001e08 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    1e08:	b580      	push	{r7, lr}
    1e0a:	b082      	sub	sp, #8
    1e0c:	af00      	add	r7, sp, #0
    1e0e:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
    1e10:	687b      	ldr	r3, [r7, #4]
    1e12:	1c18      	adds	r0, r3, #0
    1e14:	4b06      	ldr	r3, [pc, #24]	; (1e30 <cpu_irq_restore+0x28>)
    1e16:	4798      	blx	r3
    1e18:	1c03      	adds	r3, r0, #0
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d005      	beq.n	1e2a <cpu_irq_restore+0x22>
		cpu_irq_enable();
    1e1e:	4b05      	ldr	r3, [pc, #20]	; (1e34 <cpu_irq_restore+0x2c>)
    1e20:	2201      	movs	r2, #1
    1e22:	701a      	strb	r2, [r3, #0]
    1e24:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1e28:	b662      	cpsie	i
}
    1e2a:	46bd      	mov	sp, r7
    1e2c:	b002      	add	sp, #8
    1e2e:	bd80      	pop	{r7, pc}
    1e30:	00001df1 	.word	0x00001df1
    1e34:	200003b4 	.word	0x200003b4

00001e38 <usb_device_attach>:
 * \brief Attach USB device to the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
    1e38:	b580      	push	{r7, lr}
    1e3a:	b082      	sub	sp, #8
    1e3c:	af00      	add	r7, sp, #0
    1e3e:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    1e40:	687b      	ldr	r3, [r7, #4]
    1e42:	681a      	ldr	r2, [r3, #0]
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	681b      	ldr	r3, [r3, #0]
    1e48:	891b      	ldrh	r3, [r3, #8]
    1e4a:	b29b      	uxth	r3, r3
    1e4c:	2101      	movs	r1, #1
    1e4e:	438b      	bics	r3, r1
    1e50:	b29b      	uxth	r3, r3
    1e52:	8113      	strh	r3, [r2, #8]
}
    1e54:	46bd      	mov	sp, r7
    1e56:	b002      	add	sp, #8
    1e58:	bd80      	pop	{r7, pc}
    1e5a:	46c0      	nop			; (mov r8, r8)

00001e5c <usb_device_get_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
    1e5c:	b580      	push	{r7, lr}
    1e5e:	b082      	sub	sp, #8
    1e60:	af00      	add	r7, sp, #0
    1e62:	6078      	str	r0, [r7, #4]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    1e64:	687b      	ldr	r3, [r7, #4]
    1e66:	681b      	ldr	r3, [r3, #0]
    1e68:	7a9a      	ldrb	r2, [r3, #10]
    1e6a:	237f      	movs	r3, #127	; 0x7f
    1e6c:	4013      	ands	r3, r2
    1e6e:	b2db      	uxtb	r3, r3
}
    1e70:	1c18      	adds	r0, r3, #0
    1e72:	46bd      	mov	sp, r7
    1e74:	b002      	add	sp, #8
    1e76:	bd80      	pop	{r7, pc}

00001e78 <usb_device_set_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
    1e78:	b580      	push	{r7, lr}
    1e7a:	b082      	sub	sp, #8
    1e7c:	af00      	add	r7, sp, #0
    1e7e:	6078      	str	r0, [r7, #4]
    1e80:	1c0a      	adds	r2, r1, #0
    1e82:	1cfb      	adds	r3, r7, #3
    1e84:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    1e86:	687b      	ldr	r3, [r7, #4]
    1e88:	681b      	ldr	r3, [r3, #0]
    1e8a:	1cfa      	adds	r2, r7, #3
    1e8c:	7812      	ldrb	r2, [r2, #0]
    1e8e:	2180      	movs	r1, #128	; 0x80
    1e90:	4249      	negs	r1, r1
    1e92:	430a      	orrs	r2, r1
    1e94:	b2d2      	uxtb	r2, r2
    1e96:	729a      	strb	r2, [r3, #10]
}
    1e98:	46bd      	mov	sp, r7
    1e9a:	b002      	add	sp, #8
    1e9c:	bd80      	pop	{r7, pc}
    1e9e:	46c0      	nop			; (mov r8, r8)

00001ea0 <usb_device_set_lpm_mode>:
 * \param module_inst Pointer to USB device module instance
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
    1ea0:	b580      	push	{r7, lr}
    1ea2:	b082      	sub	sp, #8
    1ea4:	af00      	add	r7, sp, #0
    1ea6:	6078      	str	r0, [r7, #4]
    1ea8:	1c0a      	adds	r2, r1, #0
    1eaa:	1cfb      	adds	r3, r7, #3
    1eac:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    1eae:	687b      	ldr	r3, [r7, #4]
    1eb0:	681b      	ldr	r3, [r3, #0]
    1eb2:	1cfa      	adds	r2, r7, #3
    1eb4:	7811      	ldrb	r1, [r2, #0]
    1eb6:	2203      	movs	r2, #3
    1eb8:	400a      	ands	r2, r1
    1eba:	b2d1      	uxtb	r1, r2
    1ebc:	2203      	movs	r2, #3
    1ebe:	400a      	ands	r2, r1
    1ec0:	0292      	lsls	r2, r2, #10
    1ec2:	8918      	ldrh	r0, [r3, #8]
    1ec4:	4903      	ldr	r1, [pc, #12]	; (1ed4 <usb_device_set_lpm_mode+0x34>)
    1ec6:	4001      	ands	r1, r0
    1ec8:	430a      	orrs	r2, r1
    1eca:	811a      	strh	r2, [r3, #8]
}
    1ecc:	46bd      	mov	sp, r7
    1ece:	b002      	add	sp, #8
    1ed0:	bd80      	pop	{r7, pc}
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	fffff3ff 	.word	0xfffff3ff

00001ed8 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    1ed8:	b580      	push	{r7, lr}
    1eda:	b084      	sub	sp, #16
    1edc:	af00      	add	r7, sp, #0
    1ede:	1c02      	adds	r2, r0, #0
    1ee0:	1dfb      	adds	r3, r7, #7
    1ee2:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    1ee4:	1dfb      	adds	r3, r7, #7
    1ee6:	781b      	ldrb	r3, [r3, #0]
    1ee8:	4a0b      	ldr	r2, [pc, #44]	; (1f18 <sleepmgr_lock_mode+0x40>)
    1eea:	5cd3      	ldrb	r3, [r2, r3]
    1eec:	2bff      	cmp	r3, #255	; 0xff
    1eee:	d100      	bne.n	1ef2 <sleepmgr_lock_mode+0x1a>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
    1ef0:	e7fe      	b.n	1ef0 <sleepmgr_lock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    1ef2:	4b0a      	ldr	r3, [pc, #40]	; (1f1c <sleepmgr_lock_mode+0x44>)
    1ef4:	4798      	blx	r3
    1ef6:	1c03      	adds	r3, r0, #0
    1ef8:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
    1efa:	1dfb      	adds	r3, r7, #7
    1efc:	781b      	ldrb	r3, [r3, #0]
    1efe:	4a06      	ldr	r2, [pc, #24]	; (1f18 <sleepmgr_lock_mode+0x40>)
    1f00:	5cd2      	ldrb	r2, [r2, r3]
    1f02:	3201      	adds	r2, #1
    1f04:	b2d1      	uxtb	r1, r2
    1f06:	4a04      	ldr	r2, [pc, #16]	; (1f18 <sleepmgr_lock_mode+0x40>)
    1f08:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    1f0a:	68fb      	ldr	r3, [r7, #12]
    1f0c:	1c18      	adds	r0, r3, #0
    1f0e:	4b04      	ldr	r3, [pc, #16]	; (1f20 <sleepmgr_lock_mode+0x48>)
    1f10:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    1f12:	46bd      	mov	sp, r7
    1f14:	b004      	add	sp, #16
    1f16:	bd80      	pop	{r7, pc}
    1f18:	2000092c 	.word	0x2000092c
    1f1c:	00001dc1 	.word	0x00001dc1
    1f20:	00001e09 	.word	0x00001e09

00001f24 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
    1f24:	b580      	push	{r7, lr}
    1f26:	b084      	sub	sp, #16
    1f28:	af00      	add	r7, sp, #0
    1f2a:	1c02      	adds	r2, r0, #0
    1f2c:	1dfb      	adds	r3, r7, #7
    1f2e:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    1f30:	1dfb      	adds	r3, r7, #7
    1f32:	781b      	ldrb	r3, [r3, #0]
    1f34:	4a0b      	ldr	r2, [pc, #44]	; (1f64 <sleepmgr_unlock_mode+0x40>)
    1f36:	5cd3      	ldrb	r3, [r2, r3]
    1f38:	2b00      	cmp	r3, #0
    1f3a:	d100      	bne.n	1f3e <sleepmgr_unlock_mode+0x1a>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
    1f3c:	e7fe      	b.n	1f3c <sleepmgr_unlock_mode+0x18>
	}

	// Enter a critical section
	flags = cpu_irq_save();
    1f3e:	4b0a      	ldr	r3, [pc, #40]	; (1f68 <sleepmgr_unlock_mode+0x44>)
    1f40:	4798      	blx	r3
    1f42:	1c03      	adds	r3, r0, #0
    1f44:	60fb      	str	r3, [r7, #12]

	--sleepmgr_locks[mode];
    1f46:	1dfb      	adds	r3, r7, #7
    1f48:	781b      	ldrb	r3, [r3, #0]
    1f4a:	4a06      	ldr	r2, [pc, #24]	; (1f64 <sleepmgr_unlock_mode+0x40>)
    1f4c:	5cd2      	ldrb	r2, [r2, r3]
    1f4e:	3a01      	subs	r2, #1
    1f50:	b2d1      	uxtb	r1, r2
    1f52:	4a04      	ldr	r2, [pc, #16]	; (1f64 <sleepmgr_unlock_mode+0x40>)
    1f54:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    1f56:	68fb      	ldr	r3, [r7, #12]
    1f58:	1c18      	adds	r0, r3, #0
    1f5a:	4b04      	ldr	r3, [pc, #16]	; (1f6c <sleepmgr_unlock_mode+0x48>)
    1f5c:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    1f5e:	46bd      	mov	sp, r7
    1f60:	b004      	add	sp, #16
    1f62:	bd80      	pop	{r7, pc}
    1f64:	2000092c 	.word	0x2000092c
    1f68:	00001dc1 	.word	0x00001dc1
    1f6c:	00001e09 	.word	0x00001e09

00001f70 <udd_wait_clock_ready>:
#endif
#ifndef UDD_CLOCK_SOURCE
#  define UDD_CLOCK_SOURCE   SYSTEM_CLOCK_SOURCE_DFLL
#endif
static inline void udd_wait_clock_ready(void)
{
    1f70:	b580      	push	{r7, lr}
    1f72:	af00      	add	r7, sp, #0
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    1f74:	4b0b      	ldr	r3, [pc, #44]	; (1fa4 <udd_wait_clock_ready+0x34>)
    1f76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    1f78:	b29b      	uxth	r3, r3
    1f7a:	1c1a      	adds	r2, r3, #0
    1f7c:	2320      	movs	r3, #32
    1f7e:	4013      	ands	r3, r2
    1f80:	d107      	bne.n	1f92 <udd_wait_clock_ready+0x22>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    1f82:	46c0      	nop			; (mov r8, r8)
    1f84:	4b07      	ldr	r3, [pc, #28]	; (1fa4 <udd_wait_clock_ready+0x34>)
    1f86:	68da      	ldr	r2, [r3, #12]
    1f88:	23d0      	movs	r3, #208	; 0xd0
    1f8a:	4013      	ands	r3, r2
    1f8c:	2bd0      	cmp	r3, #208	; 0xd0
    1f8e:	d1f9      	bne.n	1f84 <udd_wait_clock_ready+0x14>
    1f90:	e005      	b.n	1f9e <udd_wait_clock_ready+0x2e>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	4b03      	ldr	r3, [pc, #12]	; (1fa4 <udd_wait_clock_ready+0x34>)
    1f96:	68da      	ldr	r2, [r3, #12]
    1f98:	2310      	movs	r3, #16
    1f9a:	4013      	ands	r3, r2
    1f9c:	d0fa      	beq.n	1f94 <udd_wait_clock_ready+0x24>
		}
	}
#endif
}
    1f9e:	46bd      	mov	sp, r7
    1fa0:	bd80      	pop	{r7, pc}
    1fa2:	46c0      	nop			; (mov r8, r8)
    1fa4:	40000800 	.word	0x40000800

00001fa8 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    1fa8:	b580      	push	{r7, lr}
    1faa:	b084      	sub	sp, #16
    1fac:	af00      	add	r7, sp, #0
    1fae:	1c02      	adds	r2, r0, #0
    1fb0:	1dfb      	adds	r3, r7, #7
    1fb2:	701a      	strb	r2, [r3, #0]
	enum sleepmgr_mode sleep_mode[] = {
    1fb4:	1c3a      	adds	r2, r7, #0
    1fb6:	320c      	adds	r2, #12
    1fb8:	4b16      	ldr	r3, [pc, #88]	; (2014 <STACK_SIZE+0x14>)
    1fba:	1c11      	adds	r1, r2, #0
    1fbc:	1c1a      	adds	r2, r3, #0
    1fbe:	2304      	movs	r3, #4
    1fc0:	1c08      	adds	r0, r1, #0
    1fc2:	1c11      	adds	r1, r2, #0
    1fc4:	1c1a      	adds	r2, r3, #0
    1fc6:	4b14      	ldr	r3, [pc, #80]	; (2018 <STACK_SIZE+0x18>)
    1fc8:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    1fca:	4b14      	ldr	r3, [pc, #80]	; (201c <STACK_SIZE+0x1c>)
    1fcc:	781b      	ldrb	r3, [r3, #0]
    1fce:	1dfa      	adds	r2, r7, #7
    1fd0:	7812      	ldrb	r2, [r2, #0]
    1fd2:	429a      	cmp	r2, r3
    1fd4:	d01b      	beq.n	200e <STACK_SIZE+0xe>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    1fd6:	1dfb      	adds	r3, r7, #7
    1fd8:	781b      	ldrb	r3, [r3, #0]
    1fda:	2b00      	cmp	r3, #0
    1fdc:	d007      	beq.n	1fee <udd_sleep_mode+0x46>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    1fde:	1dfb      	adds	r3, r7, #7
    1fe0:	781b      	ldrb	r3, [r3, #0]
    1fe2:	1c3a      	adds	r2, r7, #0
    1fe4:	320c      	adds	r2, #12
    1fe6:	5cd3      	ldrb	r3, [r2, r3]
    1fe8:	1c18      	adds	r0, r3, #0
    1fea:	4b0d      	ldr	r3, [pc, #52]	; (2020 <STACK_SIZE+0x20>)
    1fec:	4798      	blx	r3
	}
	if (udd_state != UDD_STATE_OFF) {
    1fee:	4b0b      	ldr	r3, [pc, #44]	; (201c <STACK_SIZE+0x1c>)
    1ff0:	781b      	ldrb	r3, [r3, #0]
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	d007      	beq.n	2006 <STACK_SIZE+0x6>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    1ff6:	4b09      	ldr	r3, [pc, #36]	; (201c <STACK_SIZE+0x1c>)
    1ff8:	781b      	ldrb	r3, [r3, #0]
    1ffa:	1c3a      	adds	r2, r7, #0
    1ffc:	320c      	adds	r2, #12
    1ffe:	5cd3      	ldrb	r3, [r2, r3]
    2000:	1c18      	adds	r0, r3, #0
    2002:	4b08      	ldr	r3, [pc, #32]	; (2024 <STACK_SIZE+0x24>)
    2004:	4798      	blx	r3
	}
	udd_state = new_state;
    2006:	4b05      	ldr	r3, [pc, #20]	; (201c <STACK_SIZE+0x1c>)
    2008:	1dfa      	adds	r2, r7, #7
    200a:	7812      	ldrb	r2, [r2, #0]
    200c:	701a      	strb	r2, [r3, #0]
}
    200e:	46bd      	mov	sp, r7
    2010:	b004      	add	sp, #16
    2012:	bd80      	pop	{r7, pc}
    2014:	000067dc 	.word	0x000067dc
    2018:	00006781 	.word	0x00006781
    201c:	20000724 	.word	0x20000724
    2020:	00001ed9 	.word	0x00001ed9
    2024:	00001f25 	.word	0x00001f25

00002028 <udd_ep_get_job>:
 * \brief     Get the detailed job by endpoint number
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
    2028:	b580      	push	{r7, lr}
    202a:	b082      	sub	sp, #8
    202c:	af00      	add	r7, sp, #0
    202e:	1c02      	adds	r2, r0, #0
    2030:	1dfb      	adds	r3, r7, #7
    2032:	701a      	strb	r2, [r3, #0]
	return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    2034:	1dfb      	adds	r3, r7, #7
    2036:	781a      	ldrb	r2, [r3, #0]
    2038:	230f      	movs	r3, #15
    203a:	4013      	ands	r3, r2
    203c:	005a      	lsls	r2, r3, #1
    203e:	1dfb      	adds	r3, r7, #7
    2040:	781b      	ldrb	r3, [r3, #0]
    2042:	09db      	lsrs	r3, r3, #7
    2044:	b2db      	uxtb	r3, r3
    2046:	18d3      	adds	r3, r2, r3
    2048:	1e9a      	subs	r2, r3, #2
    204a:	1c13      	adds	r3, r2, #0
    204c:	009b      	lsls	r3, r3, #2
    204e:	189b      	adds	r3, r3, r2
    2050:	009b      	lsls	r3, r3, #2
    2052:	4a03      	ldr	r2, [pc, #12]	; (2060 <udd_ep_get_job+0x38>)
    2054:	189b      	adds	r3, r3, r2
}
    2056:	1c18      	adds	r0, r3, #0
    2058:	46bd      	mov	sp, r7
    205a:	b002      	add	sp, #8
    205c:	bd80      	pop	{r7, pc}
    205e:	46c0      	nop			; (mov r8, r8)
    2060:	2000060c 	.word	0x2000060c

00002064 <udd_ep_trans_in_next>:
/**
 * \brief     Endpoint IN process, continue to send packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_in_next(void* pointer)
{
    2064:	b590      	push	{r4, r7, lr}
    2066:	b089      	sub	sp, #36	; 0x24
    2068:	af00      	add	r7, sp, #0
    206a:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    206c:	687b      	ldr	r3, [r7, #4]
    206e:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    2070:	1c3b      	adds	r3, r7, #0
    2072:	3317      	adds	r3, #23
    2074:	69ba      	ldr	r2, [r7, #24]
    2076:	7992      	ldrb	r2, [r2, #6]
    2078:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    207a:	1c3b      	adds	r3, r7, #0
    207c:	3317      	adds	r3, #23
    207e:	781b      	ldrb	r3, [r3, #0]
    2080:	1c18      	adds	r0, r3, #0
    2082:	4b55      	ldr	r3, [pc, #340]	; (21d8 <udd_ep_trans_in_next+0x174>)
    2084:	4798      	blx	r3
    2086:	1c03      	adds	r3, r0, #0
    2088:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    208a:	1c3b      	adds	r3, r7, #0
    208c:	330f      	adds	r3, #15
    208e:	1c3a      	adds	r2, r7, #0
    2090:	3217      	adds	r2, #23
    2092:	7811      	ldrb	r1, [r2, #0]
    2094:	220f      	movs	r2, #15
    2096:	400a      	ands	r2, r1
    2098:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    209a:	1c3b      	adds	r3, r7, #0
    209c:	330c      	adds	r3, #12
    209e:	693a      	ldr	r2, [r7, #16]
    20a0:	8a12      	ldrh	r2, [r2, #16]
    20a2:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
    20a4:	1c3b      	adds	r3, r7, #0
    20a6:	330a      	adds	r3, #10
    20a8:	69ba      	ldr	r2, [r7, #24]
    20aa:	8852      	ldrh	r2, [r2, #2]
    20ac:	801a      	strh	r2, [r3, #0]
	ptr_job->nb_trans += nb_trans;
    20ae:	693b      	ldr	r3, [r7, #16]
    20b0:	68da      	ldr	r2, [r3, #12]
    20b2:	1c3b      	adds	r3, r7, #0
    20b4:	330a      	adds	r3, #10
    20b6:	881b      	ldrh	r3, [r3, #0]
    20b8:	18d2      	adds	r2, r2, r3
    20ba:	693b      	ldr	r3, [r7, #16]
    20bc:	60da      	str	r2, [r3, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    20be:	693b      	ldr	r3, [r7, #16]
    20c0:	68da      	ldr	r2, [r3, #12]
    20c2:	693b      	ldr	r3, [r7, #16]
    20c4:	689b      	ldr	r3, [r3, #8]
    20c6:	429a      	cmp	r2, r3
    20c8:	d053      	beq.n	2172 <udd_ep_trans_in_next+0x10e>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    20ca:	693b      	ldr	r3, [r7, #16]
    20cc:	689b      	ldr	r3, [r3, #8]
    20ce:	b299      	uxth	r1, r3
    20d0:	693b      	ldr	r3, [r7, #16]
    20d2:	68db      	ldr	r3, [r3, #12]
    20d4:	b29a      	uxth	r2, r3
    20d6:	1c3b      	adds	r3, r7, #0
    20d8:	331e      	adds	r3, #30
    20da:	1a8a      	subs	r2, r1, r2
    20dc:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    20de:	1c3b      	adds	r3, r7, #0
    20e0:	331e      	adds	r3, #30
    20e2:	881a      	ldrh	r2, [r3, #0]
    20e4:	4b3d      	ldr	r3, [pc, #244]	; (21dc <udd_ep_trans_in_next+0x178>)
    20e6:	429a      	cmp	r2, r3
    20e8:	d90e      	bls.n	2108 <udd_ep_trans_in_next+0xa4>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    20ea:	1c3b      	adds	r3, r7, #0
    20ec:	330c      	adds	r3, #12
    20ee:	881a      	ldrh	r2, [r3, #0]
    20f0:	493a      	ldr	r1, [pc, #232]	; (21dc <udd_ep_trans_in_next+0x178>)
    20f2:	4b3b      	ldr	r3, [pc, #236]	; (21e0 <udd_ep_trans_in_next+0x17c>)
    20f4:	1c08      	adds	r0, r1, #0
    20f6:	1c11      	adds	r1, r2, #0
    20f8:	4798      	blx	r3
    20fa:	1c0b      	adds	r3, r1, #0
    20fc:	b29a      	uxth	r2, r3
    20fe:	1c3b      	adds	r3, r7, #0
    2100:	331e      	adds	r3, #30
    2102:	4936      	ldr	r1, [pc, #216]	; (21dc <udd_ep_trans_in_next+0x178>)
    2104:	1a8a      	subs	r2, r1, r2
    2106:	801a      	strh	r2, [r3, #0]
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    2108:	693b      	ldr	r3, [r7, #16]
    210a:	7c9b      	ldrb	r3, [r3, #18]
    210c:	079b      	lsls	r3, r3, #30
    210e:	0fdb      	lsrs	r3, r3, #31
    2110:	b2db      	uxtb	r3, r3
    2112:	2b00      	cmp	r3, #0
    2114:	d00f      	beq.n	2136 <udd_ep_trans_in_next+0xd2>
    2116:	1c3a      	adds	r2, r7, #0
    2118:	321e      	adds	r2, #30
    211a:	1c3b      	adds	r3, r7, #0
    211c:	330c      	adds	r3, #12
    211e:	8811      	ldrh	r1, [r2, #0]
    2120:	881a      	ldrh	r2, [r3, #0]
    2122:	4b30      	ldr	r3, [pc, #192]	; (21e4 <udd_ep_trans_in_next+0x180>)
    2124:	1c08      	adds	r0, r1, #0
    2126:	1c11      	adds	r1, r2, #0
    2128:	4798      	blx	r3
    212a:	1c0b      	adds	r3, r1, #0
    212c:	b29b      	uxth	r3, r3
    212e:	2b00      	cmp	r3, #0
    2130:	d101      	bne.n	2136 <udd_ep_trans_in_next+0xd2>
    2132:	2301      	movs	r3, #1
    2134:	e000      	b.n	2138 <udd_ep_trans_in_next+0xd4>
    2136:	2300      	movs	r3, #0
    2138:	b2db      	uxtb	r3, r3
    213a:	1c1a      	adds	r2, r3, #0
    213c:	2301      	movs	r3, #1
    213e:	4013      	ands	r3, r2
    2140:	b2d9      	uxtb	r1, r3
    2142:	693b      	ldr	r3, [r7, #16]
    2144:	2201      	movs	r2, #1
    2146:	400a      	ands	r2, r1
    2148:	1892      	adds	r2, r2, r2
    214a:	7c99      	ldrb	r1, [r3, #18]
    214c:	2002      	movs	r0, #2
    214e:	4381      	bics	r1, r0
    2150:	430a      	orrs	r2, r1
    2152:	749a      	strb	r2, [r3, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    2154:	693b      	ldr	r3, [r7, #16]
    2156:	685a      	ldr	r2, [r3, #4]
    2158:	693b      	ldr	r3, [r7, #16]
    215a:	68db      	ldr	r3, [r3, #12]
    215c:	18d2      	adds	r2, r2, r3
    215e:	1c3b      	adds	r3, r7, #0
    2160:	331e      	adds	r3, #30
    2162:	881b      	ldrh	r3, [r3, #0]
    2164:	4820      	ldr	r0, [pc, #128]	; (21e8 <udd_ep_trans_in_next+0x184>)
    2166:	1c39      	adds	r1, r7, #0
    2168:	310f      	adds	r1, #15
    216a:	7809      	ldrb	r1, [r1, #0]
    216c:	4c1f      	ldr	r4, [pc, #124]	; (21ec <udd_ep_trans_in_next+0x188>)
    216e:	47a0      	blx	r4
		return;
    2170:	e02f      	b.n	21d2 <udd_ep_trans_in_next+0x16e>
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    2172:	693b      	ldr	r3, [r7, #16]
    2174:	7c9b      	ldrb	r3, [r3, #18]
    2176:	079b      	lsls	r3, r3, #30
    2178:	0fdb      	lsrs	r3, r3, #31
    217a:	b2db      	uxtb	r3, r3
    217c:	2b00      	cmp	r3, #0
    217e:	d014      	beq.n	21aa <udd_ep_trans_in_next+0x146>
		ptr_job->b_shortpacket = false;
    2180:	693b      	ldr	r3, [r7, #16]
    2182:	7c9a      	ldrb	r2, [r3, #18]
    2184:	2102      	movs	r1, #2
    2186:	438a      	bics	r2, r1
    2188:	749a      	strb	r2, [r3, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    218a:	693b      	ldr	r3, [r7, #16]
    218c:	685a      	ldr	r2, [r3, #4]
    218e:	693b      	ldr	r3, [r7, #16]
    2190:	68db      	ldr	r3, [r3, #12]
    2192:	18d3      	adds	r3, r2, r3
    2194:	4914      	ldr	r1, [pc, #80]	; (21e8 <udd_ep_trans_in_next+0x184>)
    2196:	1c3a      	adds	r2, r7, #0
    2198:	320f      	adds	r2, #15
    219a:	7812      	ldrb	r2, [r2, #0]
    219c:	1c08      	adds	r0, r1, #0
    219e:	1c11      	adds	r1, r2, #0
    21a0:	1c1a      	adds	r2, r3, #0
    21a2:	2300      	movs	r3, #0
    21a4:	4c11      	ldr	r4, [pc, #68]	; (21ec <udd_ep_trans_in_next+0x188>)
    21a6:	47a0      	blx	r4
		return;
    21a8:	e013      	b.n	21d2 <udd_ep_trans_in_next+0x16e>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    21aa:	693b      	ldr	r3, [r7, #16]
    21ac:	7c9a      	ldrb	r2, [r3, #18]
    21ae:	2101      	movs	r1, #1
    21b0:	438a      	bics	r2, r1
    21b2:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    21b4:	693b      	ldr	r3, [r7, #16]
    21b6:	681b      	ldr	r3, [r3, #0]
    21b8:	2b00      	cmp	r3, #0
    21ba:	d00a      	beq.n	21d2 <udd_ep_trans_in_next+0x16e>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    21bc:	693b      	ldr	r3, [r7, #16]
    21be:	681c      	ldr	r4, [r3, #0]
    21c0:	693b      	ldr	r3, [r7, #16]
    21c2:	68da      	ldr	r2, [r3, #12]
    21c4:	1c3b      	adds	r3, r7, #0
    21c6:	3317      	adds	r3, #23
    21c8:	781b      	ldrb	r3, [r3, #0]
    21ca:	2000      	movs	r0, #0
    21cc:	1c11      	adds	r1, r2, #0
    21ce:	1c1a      	adds	r2, r3, #0
    21d0:	47a0      	blx	r4
	}
}
    21d2:	46bd      	mov	sp, r7
    21d4:	b009      	add	sp, #36	; 0x24
    21d6:	bd90      	pop	{r4, r7, pc}
    21d8:	00002029 	.word	0x00002029
    21dc:	00001fff 	.word	0x00001fff
    21e0:	000066dd 	.word	0x000066dd
    21e4:	0000661d 	.word	0x0000661d
    21e8:	20000b34 	.word	0x20000b34
    21ec:	00004855 	.word	0x00004855

000021f0 <udd_ep_trans_out_next>:
/**
 * \brief     Endpoint OUT process, continue to receive packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_out_next(void* pointer)
{
    21f0:	b5b0      	push	{r4, r5, r7, lr}
    21f2:	b088      	sub	sp, #32
    21f4:	af00      	add	r7, sp, #0
    21f6:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    21f8:	687b      	ldr	r3, [r7, #4]
    21fa:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    21fc:	1c3b      	adds	r3, r7, #0
    21fe:	3317      	adds	r3, #23
    2200:	69ba      	ldr	r2, [r7, #24]
    2202:	7992      	ldrb	r2, [r2, #6]
    2204:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    2206:	1c3b      	adds	r3, r7, #0
    2208:	3317      	adds	r3, #23
    220a:	781b      	ldrb	r3, [r3, #0]
    220c:	1c18      	adds	r0, r3, #0
    220e:	4b67      	ldr	r3, [pc, #412]	; (23ac <udd_ep_trans_out_next+0x1bc>)
    2210:	4798      	blx	r3
    2212:	1c03      	adds	r3, r0, #0
    2214:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    2216:	1c3b      	adds	r3, r7, #0
    2218:	330f      	adds	r3, #15
    221a:	1c3a      	adds	r2, r7, #0
    221c:	3217      	adds	r2, #23
    221e:	7811      	ldrb	r1, [r2, #0]
    2220:	220f      	movs	r2, #15
    2222:	400a      	ands	r2, r1
    2224:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    2226:	1c3b      	adds	r3, r7, #0
    2228:	330c      	adds	r3, #12
    222a:	693a      	ldr	r2, [r7, #16]
    222c:	8a12      	ldrh	r2, [r2, #16]
    222e:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    2230:	1c3b      	adds	r3, r7, #0
    2232:	330a      	adds	r3, #10
    2234:	69ba      	ldr	r2, [r7, #24]
    2236:	8812      	ldrh	r2, [r2, #0]
    2238:	801a      	strh	r2, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    223a:	693b      	ldr	r3, [r7, #16]
    223c:	7c9b      	ldrb	r3, [r3, #18]
    223e:	075b      	lsls	r3, r3, #29
    2240:	0fdb      	lsrs	r3, r3, #31
    2242:	b2db      	uxtb	r3, r3
    2244:	2b00      	cmp	r3, #0
    2246:	d01a      	beq.n	227e <udd_ep_trans_out_next+0x8e>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    2248:	693b      	ldr	r3, [r7, #16]
    224a:	685a      	ldr	r2, [r3, #4]
    224c:	693b      	ldr	r3, [r7, #16]
    224e:	68db      	ldr	r3, [r3, #12]
    2250:	18d5      	adds	r5, r2, r3
    2252:	1c3b      	adds	r3, r7, #0
    2254:	330f      	adds	r3, #15
    2256:	781b      	ldrb	r3, [r3, #0]
    2258:	3b01      	subs	r3, #1
    225a:	019a      	lsls	r2, r3, #6
    225c:	4b54      	ldr	r3, [pc, #336]	; (23b0 <udd_ep_trans_out_next+0x1c0>)
    225e:	18d4      	adds	r4, r2, r3
    2260:	693b      	ldr	r3, [r7, #16]
    2262:	6899      	ldr	r1, [r3, #8]
    2264:	1c3b      	adds	r3, r7, #0
    2266:	330c      	adds	r3, #12
    2268:	881a      	ldrh	r2, [r3, #0]
    226a:	4b52      	ldr	r3, [pc, #328]	; (23b4 <udd_ep_trans_out_next+0x1c4>)
    226c:	1c08      	adds	r0, r1, #0
    226e:	1c11      	adds	r1, r2, #0
    2270:	4798      	blx	r3
    2272:	1c0b      	adds	r3, r1, #0
    2274:	1c28      	adds	r0, r5, #0
    2276:	1c21      	adds	r1, r4, #0
    2278:	1c1a      	adds	r2, r3, #0
    227a:	4b4f      	ldr	r3, [pc, #316]	; (23b8 <udd_ep_trans_out_next+0x1c8>)
    227c:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    227e:	693b      	ldr	r3, [r7, #16]
    2280:	68da      	ldr	r2, [r3, #12]
    2282:	1c3b      	adds	r3, r7, #0
    2284:	330a      	adds	r3, #10
    2286:	881b      	ldrh	r3, [r3, #0]
    2288:	18d2      	adds	r2, r2, r3
    228a:	693b      	ldr	r3, [r7, #16]
    228c:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    228e:	693b      	ldr	r3, [r7, #16]
    2290:	68da      	ldr	r2, [r3, #12]
    2292:	693b      	ldr	r3, [r7, #16]
    2294:	689b      	ldr	r3, [r3, #8]
    2296:	429a      	cmp	r2, r3
    2298:	d903      	bls.n	22a2 <udd_ep_trans_out_next+0xb2>
		ptr_job->nb_trans = ptr_job->buf_size;
    229a:	693b      	ldr	r3, [r7, #16]
    229c:	689a      	ldr	r2, [r3, #8]
    229e:	693b      	ldr	r3, [r7, #16]
    22a0:	60da      	str	r2, [r3, #12]
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    22a2:	69bb      	ldr	r3, [r7, #24]
    22a4:	889b      	ldrh	r3, [r3, #4]
    22a6:	1c3a      	adds	r2, r7, #0
    22a8:	320a      	adds	r2, #10
    22aa:	8812      	ldrh	r2, [r2, #0]
    22ac:	429a      	cmp	r2, r3
    22ae:	d165      	bne.n	237c <udd_ep_trans_out_next+0x18c>
    22b0:	693b      	ldr	r3, [r7, #16]
    22b2:	68da      	ldr	r2, [r3, #12]
    22b4:	693b      	ldr	r3, [r7, #16]
    22b6:	689b      	ldr	r3, [r3, #8]
    22b8:	429a      	cmp	r2, r3
    22ba:	d05f      	beq.n	237c <udd_ep_trans_out_next+0x18c>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    22bc:	693b      	ldr	r3, [r7, #16]
    22be:	689b      	ldr	r3, [r3, #8]
    22c0:	b299      	uxth	r1, r3
    22c2:	693b      	ldr	r3, [r7, #16]
    22c4:	68db      	ldr	r3, [r3, #12]
    22c6:	b29a      	uxth	r2, r3
    22c8:	1c3b      	adds	r3, r7, #0
    22ca:	331e      	adds	r3, #30
    22cc:	1a8a      	subs	r2, r1, r2
    22ce:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    22d0:	1c3b      	adds	r3, r7, #0
    22d2:	331e      	adds	r3, #30
    22d4:	881a      	ldrh	r2, [r3, #0]
    22d6:	4b39      	ldr	r3, [pc, #228]	; (23bc <udd_ep_trans_out_next+0x1cc>)
    22d8:	429a      	cmp	r2, r3
    22da:	d90f      	bls.n	22fc <udd_ep_trans_out_next+0x10c>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    22dc:	1c3b      	adds	r3, r7, #0
    22de:	330c      	adds	r3, #12
    22e0:	881a      	ldrh	r2, [r3, #0]
    22e2:	4936      	ldr	r1, [pc, #216]	; (23bc <udd_ep_trans_out_next+0x1cc>)
    22e4:	4b36      	ldr	r3, [pc, #216]	; (23c0 <udd_ep_trans_out_next+0x1d0>)
    22e6:	1c08      	adds	r0, r1, #0
    22e8:	1c11      	adds	r1, r2, #0
    22ea:	4798      	blx	r3
    22ec:	1c0b      	adds	r3, r1, #0
    22ee:	b29a      	uxth	r2, r3
    22f0:	1c3b      	adds	r3, r7, #0
    22f2:	331e      	adds	r3, #30
    22f4:	4931      	ldr	r1, [pc, #196]	; (23bc <udd_ep_trans_out_next+0x1cc>)
    22f6:	1a8a      	subs	r2, r1, r2
    22f8:	801a      	strh	r2, [r3, #0]
    22fa:	e012      	b.n	2322 <udd_ep_trans_out_next+0x132>
		} else {
			next_trans -= next_trans % ep_size;
    22fc:	1c3a      	adds	r2, r7, #0
    22fe:	321e      	adds	r2, #30
    2300:	1c3b      	adds	r3, r7, #0
    2302:	330c      	adds	r3, #12
    2304:	8811      	ldrh	r1, [r2, #0]
    2306:	881a      	ldrh	r2, [r3, #0]
    2308:	4b2a      	ldr	r3, [pc, #168]	; (23b4 <udd_ep_trans_out_next+0x1c4>)
    230a:	1c08      	adds	r0, r1, #0
    230c:	1c11      	adds	r1, r2, #0
    230e:	4798      	blx	r3
    2310:	1c0b      	adds	r3, r1, #0
    2312:	b29a      	uxth	r2, r3
    2314:	1c3b      	adds	r3, r7, #0
    2316:	331e      	adds	r3, #30
    2318:	1c39      	adds	r1, r7, #0
    231a:	311e      	adds	r1, #30
    231c:	8809      	ldrh	r1, [r1, #0]
    231e:	1a8a      	subs	r2, r1, r2
    2320:	801a      	strh	r2, [r3, #0]
		}

		if (next_trans < ep_size) {
    2322:	1c3a      	adds	r2, r7, #0
    2324:	321e      	adds	r2, #30
    2326:	1c3b      	adds	r3, r7, #0
    2328:	330c      	adds	r3, #12
    232a:	8812      	ldrh	r2, [r2, #0]
    232c:	881b      	ldrh	r3, [r3, #0]
    232e:	429a      	cmp	r2, r3
    2330:	d215      	bcs.n	235e <udd_ep_trans_out_next+0x16e>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    2332:	693b      	ldr	r3, [r7, #16]
    2334:	7c9a      	ldrb	r2, [r3, #18]
    2336:	2104      	movs	r1, #4
    2338:	430a      	orrs	r2, r1
    233a:	749a      	strb	r2, [r3, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    233c:	1c3b      	adds	r3, r7, #0
    233e:	330f      	adds	r3, #15
    2340:	781b      	ldrb	r3, [r3, #0]
    2342:	3b01      	subs	r3, #1
    2344:	019a      	lsls	r2, r3, #6
    2346:	4b1a      	ldr	r3, [pc, #104]	; (23b0 <udd_ep_trans_out_next+0x1c0>)
    2348:	18d2      	adds	r2, r2, r3
    234a:	1c3b      	adds	r3, r7, #0
    234c:	330c      	adds	r3, #12
    234e:	881b      	ldrh	r3, [r3, #0]
    2350:	481c      	ldr	r0, [pc, #112]	; (23c4 <udd_ep_trans_out_next+0x1d4>)
    2352:	1c39      	adds	r1, r7, #0
    2354:	310f      	adds	r1, #15
    2356:	7809      	ldrb	r1, [r1, #0]
    2358:	4c1b      	ldr	r4, [pc, #108]	; (23c8 <udd_ep_trans_out_next+0x1d8>)
    235a:	47a0      	blx	r4
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
		}
		return;
    235c:	e022      	b.n	23a4 <udd_ep_trans_out_next+0x1b4>
		if (next_trans < ep_size) {
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    235e:	693b      	ldr	r3, [r7, #16]
    2360:	685a      	ldr	r2, [r3, #4]
    2362:	693b      	ldr	r3, [r7, #16]
    2364:	68db      	ldr	r3, [r3, #12]
    2366:	18d2      	adds	r2, r2, r3
    2368:	1c3b      	adds	r3, r7, #0
    236a:	331e      	adds	r3, #30
    236c:	881b      	ldrh	r3, [r3, #0]
    236e:	4815      	ldr	r0, [pc, #84]	; (23c4 <udd_ep_trans_out_next+0x1d4>)
    2370:	1c39      	adds	r1, r7, #0
    2372:	310f      	adds	r1, #15
    2374:	7809      	ldrb	r1, [r1, #0]
    2376:	4c14      	ldr	r4, [pc, #80]	; (23c8 <udd_ep_trans_out_next+0x1d8>)
    2378:	47a0      	blx	r4
		}
		return;
    237a:	e013      	b.n	23a4 <udd_ep_trans_out_next+0x1b4>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    237c:	693b      	ldr	r3, [r7, #16]
    237e:	7c9a      	ldrb	r2, [r3, #18]
    2380:	2101      	movs	r1, #1
    2382:	438a      	bics	r2, r1
    2384:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    2386:	693b      	ldr	r3, [r7, #16]
    2388:	681b      	ldr	r3, [r3, #0]
    238a:	2b00      	cmp	r3, #0
    238c:	d00a      	beq.n	23a4 <udd_ep_trans_out_next+0x1b4>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    238e:	693b      	ldr	r3, [r7, #16]
    2390:	681c      	ldr	r4, [r3, #0]
    2392:	693b      	ldr	r3, [r7, #16]
    2394:	68da      	ldr	r2, [r3, #12]
    2396:	1c3b      	adds	r3, r7, #0
    2398:	3317      	adds	r3, #23
    239a:	781b      	ldrb	r3, [r3, #0]
    239c:	2000      	movs	r0, #0
    239e:	1c11      	adds	r1, r2, #0
    23a0:	1c1a      	adds	r2, r3, #0
    23a2:	47a0      	blx	r4
	}
}
    23a4:	46bd      	mov	sp, r7
    23a6:	b008      	add	sp, #32
    23a8:	bdb0      	pop	{r4, r5, r7, pc}
    23aa:	46c0      	nop			; (mov r8, r8)
    23ac:	00002029 	.word	0x00002029
    23b0:	20000974 	.word	0x20000974
    23b4:	0000661d 	.word	0x0000661d
    23b8:	00006781 	.word	0x00006781
    23bc:	00001fff 	.word	0x00001fff
    23c0:	000066dd 	.word	0x000066dd
    23c4:	20000b34 	.word	0x20000b34
    23c8:	0000490d 	.word	0x0000490d

000023cc <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    23cc:	b580      	push	{r7, lr}
    23ce:	b084      	sub	sp, #16
    23d0:	af00      	add	r7, sp, #0
    23d2:	6078      	str	r0, [r7, #4]
    23d4:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    23d6:	683b      	ldr	r3, [r7, #0]
    23d8:	60fb      	str	r3, [r7, #12]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    23da:	1c3b      	adds	r3, r7, #0
    23dc:	330b      	adds	r3, #11
    23de:	68fa      	ldr	r2, [r7, #12]
    23e0:	7992      	ldrb	r2, [r2, #6]
    23e2:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    23e4:	1c3b      	adds	r3, r7, #0
    23e6:	330b      	adds	r3, #11
    23e8:	781b      	ldrb	r3, [r3, #0]
    23ea:	b25b      	sxtb	r3, r3
    23ec:	2b00      	cmp	r3, #0
    23ee:	da04      	bge.n	23fa <udd_ep_transfer_process+0x2e>
		udd_ep_trans_in_next(pointer);
    23f0:	683b      	ldr	r3, [r7, #0]
    23f2:	1c18      	adds	r0, r3, #0
    23f4:	4b04      	ldr	r3, [pc, #16]	; (2408 <udd_ep_transfer_process+0x3c>)
    23f6:	4798      	blx	r3
    23f8:	e003      	b.n	2402 <udd_ep_transfer_process+0x36>
	} else {
		udd_ep_trans_out_next(pointer);
    23fa:	683b      	ldr	r3, [r7, #0]
    23fc:	1c18      	adds	r0, r3, #0
    23fe:	4b03      	ldr	r3, [pc, #12]	; (240c <udd_ep_transfer_process+0x40>)
    2400:	4798      	blx	r3
	}
}
    2402:	46bd      	mov	sp, r7
    2404:	b004      	add	sp, #16
    2406:	bd80      	pop	{r7, pc}
    2408:	00002065 	.word	0x00002065
    240c:	000021f1 	.word	0x000021f1

00002410 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    2410:	b590      	push	{r4, r7, lr}
    2412:	b085      	sub	sp, #20
    2414:	af00      	add	r7, sp, #0
    2416:	1c02      	adds	r2, r0, #0
    2418:	1dfb      	adds	r3, r7, #7
    241a:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    241c:	4a15      	ldr	r2, [pc, #84]	; (2474 <udd_ep_abort+0x64>)
    241e:	1dfb      	adds	r3, r7, #7
    2420:	781b      	ldrb	r3, [r3, #0]
    2422:	1c10      	adds	r0, r2, #0
    2424:	1c19      	adds	r1, r3, #0
    2426:	4b14      	ldr	r3, [pc, #80]	; (2478 <udd_ep_abort+0x68>)
    2428:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    242a:	1dfb      	adds	r3, r7, #7
    242c:	781b      	ldrb	r3, [r3, #0]
    242e:	1c18      	adds	r0, r3, #0
    2430:	4b12      	ldr	r3, [pc, #72]	; (247c <udd_ep_abort+0x6c>)
    2432:	4798      	blx	r3
    2434:	1c03      	adds	r3, r0, #0
    2436:	60fb      	str	r3, [r7, #12]
	if (!ptr_job->busy) {
    2438:	68fb      	ldr	r3, [r7, #12]
    243a:	7c9b      	ldrb	r3, [r3, #18]
    243c:	07db      	lsls	r3, r3, #31
    243e:	0fdb      	lsrs	r3, r3, #31
    2440:	b2db      	uxtb	r3, r3
    2442:	2b00      	cmp	r3, #0
    2444:	d100      	bne.n	2448 <udd_ep_abort+0x38>
		return;
    2446:	e012      	b.n	246e <udd_ep_abort+0x5e>
	}
	ptr_job->busy = false;
    2448:	68fb      	ldr	r3, [r7, #12]
    244a:	7c9a      	ldrb	r2, [r3, #18]
    244c:	2101      	movs	r1, #1
    244e:	438a      	bics	r2, r1
    2450:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    2452:	68fb      	ldr	r3, [r7, #12]
    2454:	681b      	ldr	r3, [r3, #0]
    2456:	2b00      	cmp	r3, #0
    2458:	d009      	beq.n	246e <udd_ep_abort+0x5e>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    245a:	68fb      	ldr	r3, [r7, #12]
    245c:	681c      	ldr	r4, [r3, #0]
    245e:	68fb      	ldr	r3, [r7, #12]
    2460:	68da      	ldr	r2, [r3, #12]
    2462:	1dfb      	adds	r3, r7, #7
    2464:	781b      	ldrb	r3, [r3, #0]
    2466:	2001      	movs	r0, #1
    2468:	1c11      	adds	r1, r2, #0
    246a:	1c1a      	adds	r2, r3, #0
    246c:	47a0      	blx	r4
	}
}
    246e:	46bd      	mov	sp, r7
    2470:	b005      	add	sp, #20
    2472:	bd90      	pop	{r4, r7, pc}
    2474:	20000b34 	.word	0x20000b34
    2478:	000045f5 	.word	0x000045f5
    247c:	00002029 	.word	0x00002029

00002480 <udd_ep_free>:
{
	return usb_device_get_micro_frame_number(&usb_device);
}

void udd_ep_free(udd_ep_id_t ep)
{
    2480:	b580      	push	{r7, lr}
    2482:	b084      	sub	sp, #16
    2484:	af00      	add	r7, sp, #0
    2486:	1c02      	adds	r2, r0, #0
    2488:	1dfb      	adds	r3, r7, #7
    248a:	701a      	strb	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    248c:	1c3b      	adds	r3, r7, #0
    248e:	3308      	adds	r3, #8
    2490:	1c18      	adds	r0, r3, #0
    2492:	4b19      	ldr	r3, [pc, #100]	; (24f8 <udd_ep_free+0x78>)
    2494:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2496:	1c3b      	adds	r3, r7, #0
    2498:	330f      	adds	r3, #15
    249a:	1dfa      	adds	r2, r7, #7
    249c:	7811      	ldrb	r1, [r2, #0]
    249e:	220f      	movs	r2, #15
    24a0:	400a      	ands	r2, r1
    24a2:	701a      	strb	r2, [r3, #0]
	udd_ep_abort(ep);
    24a4:	1dfb      	adds	r3, r7, #7
    24a6:	781b      	ldrb	r3, [r3, #0]
    24a8:	1c18      	adds	r0, r3, #0
    24aa:	4b14      	ldr	r3, [pc, #80]	; (24fc <udd_ep_free+0x7c>)
    24ac:	4798      	blx	r3

	config_ep.ep_address = ep;
    24ae:	1c3b      	adds	r3, r7, #0
    24b0:	3308      	adds	r3, #8
    24b2:	1dfa      	adds	r2, r7, #7
    24b4:	7812      	ldrb	r2, [r2, #0]
    24b6:	701a      	strb	r2, [r3, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    24b8:	1c3b      	adds	r3, r7, #0
    24ba:	3308      	adds	r3, #8
    24bc:	2200      	movs	r2, #0
    24be:	70da      	strb	r2, [r3, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    24c0:	4a0f      	ldr	r2, [pc, #60]	; (2500 <udd_ep_free+0x80>)
    24c2:	1c3b      	adds	r3, r7, #0
    24c4:	3308      	adds	r3, #8
    24c6:	1c10      	adds	r0, r2, #0
    24c8:	1c19      	adds	r1, r3, #0
    24ca:	4b0e      	ldr	r3, [pc, #56]	; (2504 <udd_ep_free+0x84>)
    24cc:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    24ce:	4a0c      	ldr	r2, [pc, #48]	; (2500 <udd_ep_free+0x80>)
    24d0:	1c3b      	adds	r3, r7, #0
    24d2:	330f      	adds	r3, #15
    24d4:	781b      	ldrb	r3, [r3, #0]
    24d6:	1c10      	adds	r0, r2, #0
    24d8:	1c19      	adds	r1, r3, #0
    24da:	2200      	movs	r2, #0
    24dc:	4b0a      	ldr	r3, [pc, #40]	; (2508 <udd_ep_free+0x88>)
    24de:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    24e0:	4a07      	ldr	r2, [pc, #28]	; (2500 <udd_ep_free+0x80>)
    24e2:	1dfb      	adds	r3, r7, #7
    24e4:	781b      	ldrb	r3, [r3, #0]
    24e6:	1c10      	adds	r0, r2, #0
    24e8:	1c19      	adds	r1, r3, #0
    24ea:	2200      	movs	r2, #0
    24ec:	4b07      	ldr	r3, [pc, #28]	; (250c <udd_ep_free+0x8c>)
    24ee:	4798      	blx	r3
}
    24f0:	46bd      	mov	sp, r7
    24f2:	b004      	add	sp, #16
    24f4:	bd80      	pop	{r7, pc}
    24f6:	46c0      	nop			; (mov r8, r8)
    24f8:	000040f9 	.word	0x000040f9
    24fc:	00002411 	.word	0x00002411
    2500:	20000b34 	.word	0x20000b34
    2504:	00004121 	.word	0x00004121
    2508:	00003d61 	.word	0x00003d61
    250c:	00003f5d 	.word	0x00003f5d

00002510 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    2510:	b590      	push	{r4, r7, lr}
    2512:	b087      	sub	sp, #28
    2514:	af00      	add	r7, sp, #0
    2516:	1dfb      	adds	r3, r7, #7
    2518:	7018      	strb	r0, [r3, #0]
    251a:	1dbb      	adds	r3, r7, #6
    251c:	7019      	strb	r1, [r3, #0]
    251e:	1d3b      	adds	r3, r7, #4
    2520:	801a      	strh	r2, [r3, #0]
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    2522:	1c3b      	adds	r3, r7, #0
    2524:	330c      	adds	r3, #12
    2526:	1c18      	adds	r0, r3, #0
    2528:	4b5a      	ldr	r3, [pc, #360]	; (2694 <udd_ep_alloc+0x184>)
    252a:	4798      	blx	r3

	config_ep.ep_address = ep;
    252c:	1c3b      	adds	r3, r7, #0
    252e:	330c      	adds	r3, #12
    2530:	1dfa      	adds	r2, r7, #7
    2532:	7812      	ldrb	r2, [r2, #0]
    2534:	701a      	strb	r2, [r3, #0]

	if(MaxEndpointSize <= 8) {
    2536:	1d3b      	adds	r3, r7, #4
    2538:	881b      	ldrh	r3, [r3, #0]
    253a:	2b08      	cmp	r3, #8
    253c:	d804      	bhi.n	2548 <udd_ep_alloc+0x38>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    253e:	1c3b      	adds	r3, r7, #0
    2540:	330c      	adds	r3, #12
    2542:	2200      	movs	r2, #0
    2544:	705a      	strb	r2, [r3, #1]
    2546:	e045      	b.n	25d4 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 16) {
    2548:	1d3b      	adds	r3, r7, #4
    254a:	881b      	ldrh	r3, [r3, #0]
    254c:	2b10      	cmp	r3, #16
    254e:	d804      	bhi.n	255a <udd_ep_alloc+0x4a>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    2550:	1c3b      	adds	r3, r7, #0
    2552:	330c      	adds	r3, #12
    2554:	2201      	movs	r2, #1
    2556:	705a      	strb	r2, [r3, #1]
    2558:	e03c      	b.n	25d4 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 32) {
    255a:	1d3b      	adds	r3, r7, #4
    255c:	881b      	ldrh	r3, [r3, #0]
    255e:	2b20      	cmp	r3, #32
    2560:	d804      	bhi.n	256c <udd_ep_alloc+0x5c>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    2562:	1c3b      	adds	r3, r7, #0
    2564:	330c      	adds	r3, #12
    2566:	2202      	movs	r2, #2
    2568:	705a      	strb	r2, [r3, #1]
    256a:	e033      	b.n	25d4 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 64) {
    256c:	1d3b      	adds	r3, r7, #4
    256e:	881b      	ldrh	r3, [r3, #0]
    2570:	2b40      	cmp	r3, #64	; 0x40
    2572:	d804      	bhi.n	257e <udd_ep_alloc+0x6e>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    2574:	1c3b      	adds	r3, r7, #0
    2576:	330c      	adds	r3, #12
    2578:	2203      	movs	r2, #3
    257a:	705a      	strb	r2, [r3, #1]
    257c:	e02a      	b.n	25d4 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 128) {
    257e:	1d3b      	adds	r3, r7, #4
    2580:	881b      	ldrh	r3, [r3, #0]
    2582:	2b80      	cmp	r3, #128	; 0x80
    2584:	d804      	bhi.n	2590 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    2586:	1c3b      	adds	r3, r7, #0
    2588:	330c      	adds	r3, #12
    258a:	2204      	movs	r2, #4
    258c:	705a      	strb	r2, [r3, #1]
    258e:	e021      	b.n	25d4 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 256) {
    2590:	1d3b      	adds	r3, r7, #4
    2592:	881a      	ldrh	r2, [r3, #0]
    2594:	2380      	movs	r3, #128	; 0x80
    2596:	005b      	lsls	r3, r3, #1
    2598:	429a      	cmp	r2, r3
    259a:	d804      	bhi.n	25a6 <udd_ep_alloc+0x96>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    259c:	1c3b      	adds	r3, r7, #0
    259e:	330c      	adds	r3, #12
    25a0:	2205      	movs	r2, #5
    25a2:	705a      	strb	r2, [r3, #1]
    25a4:	e016      	b.n	25d4 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 512) {
    25a6:	1d3b      	adds	r3, r7, #4
    25a8:	881a      	ldrh	r2, [r3, #0]
    25aa:	2380      	movs	r3, #128	; 0x80
    25ac:	009b      	lsls	r3, r3, #2
    25ae:	429a      	cmp	r2, r3
    25b0:	d804      	bhi.n	25bc <udd_ep_alloc+0xac>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    25b2:	1c3b      	adds	r3, r7, #0
    25b4:	330c      	adds	r3, #12
    25b6:	2206      	movs	r2, #6
    25b8:	705a      	strb	r2, [r3, #1]
    25ba:	e00b      	b.n	25d4 <udd_ep_alloc+0xc4>
	} else if(MaxEndpointSize <= 1023) {
    25bc:	1d3b      	adds	r3, r7, #4
    25be:	881a      	ldrh	r2, [r3, #0]
    25c0:	4b35      	ldr	r3, [pc, #212]	; (2698 <udd_ep_alloc+0x188>)
    25c2:	429a      	cmp	r2, r3
    25c4:	d804      	bhi.n	25d0 <udd_ep_alloc+0xc0>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    25c6:	1c3b      	adds	r3, r7, #0
    25c8:	330c      	adds	r3, #12
    25ca:	2207      	movs	r2, #7
    25cc:	705a      	strb	r2, [r3, #1]
    25ce:	e001      	b.n	25d4 <udd_ep_alloc+0xc4>
	} else {
		return false;
    25d0:	2300      	movs	r3, #0
    25d2:	e05b      	b.n	268c <udd_ep_alloc+0x17c>
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    25d4:	1dfb      	adds	r3, r7, #7
    25d6:	781b      	ldrb	r3, [r3, #0]
    25d8:	1c18      	adds	r0, r3, #0
    25da:	4b30      	ldr	r3, [pc, #192]	; (269c <udd_ep_alloc+0x18c>)
    25dc:	4798      	blx	r3
    25de:	1c03      	adds	r3, r0, #0
    25e0:	617b      	str	r3, [r7, #20]
	ptr_job->ep_size = MaxEndpointSize;
    25e2:	697b      	ldr	r3, [r7, #20]
    25e4:	1d3a      	adds	r2, r7, #4
    25e6:	8812      	ldrh	r2, [r2, #0]
    25e8:	821a      	strh	r2, [r3, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    25ea:	1dbb      	adds	r3, r7, #6
    25ec:	1dba      	adds	r2, r7, #6
    25ee:	7811      	ldrb	r1, [r2, #0]
    25f0:	2203      	movs	r2, #3
    25f2:	400a      	ands	r2, r1
    25f4:	701a      	strb	r2, [r3, #0]

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    25f6:	1dbb      	adds	r3, r7, #6
    25f8:	781b      	ldrb	r3, [r3, #0]
    25fa:	2b01      	cmp	r3, #1
    25fc:	d104      	bne.n	2608 <udd_ep_alloc+0xf8>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    25fe:	1c3b      	adds	r3, r7, #0
    2600:	330c      	adds	r3, #12
    2602:	2202      	movs	r2, #2
    2604:	70da      	strb	r2, [r3, #3]
    2606:	e013      	b.n	2630 <udd_ep_alloc+0x120>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    2608:	1dbb      	adds	r3, r7, #6
    260a:	781b      	ldrb	r3, [r3, #0]
    260c:	2b02      	cmp	r3, #2
    260e:	d104      	bne.n	261a <udd_ep_alloc+0x10a>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    2610:	1c3b      	adds	r3, r7, #0
    2612:	330c      	adds	r3, #12
    2614:	2203      	movs	r2, #3
    2616:	70da      	strb	r2, [r3, #3]
    2618:	e00a      	b.n	2630 <udd_ep_alloc+0x120>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    261a:	1dbb      	adds	r3, r7, #6
    261c:	781b      	ldrb	r3, [r3, #0]
    261e:	2b03      	cmp	r3, #3
    2620:	d104      	bne.n	262c <udd_ep_alloc+0x11c>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    2622:	1c3b      	adds	r3, r7, #0
    2624:	330c      	adds	r3, #12
    2626:	2204      	movs	r2, #4
    2628:	70da      	strb	r2, [r3, #3]
    262a:	e001      	b.n	2630 <udd_ep_alloc+0x120>
	} else {
		return false;
    262c:	2300      	movs	r3, #0
    262e:	e02d      	b.n	268c <udd_ep_alloc+0x17c>
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2630:	1c3b      	adds	r3, r7, #0
    2632:	3313      	adds	r3, #19
    2634:	1dfa      	adds	r2, r7, #7
    2636:	7811      	ldrb	r1, [r2, #0]
    2638:	220f      	movs	r2, #15
    263a:	400a      	ands	r2, r1
    263c:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    263e:	4a18      	ldr	r2, [pc, #96]	; (26a0 <udd_ep_alloc+0x190>)
    2640:	1c3b      	adds	r3, r7, #0
    2642:	330c      	adds	r3, #12
    2644:	1c10      	adds	r0, r2, #0
    2646:	1c19      	adds	r1, r3, #0
    2648:	4b16      	ldr	r3, [pc, #88]	; (26a4 <udd_ep_alloc+0x194>)
    264a:	4798      	blx	r3
    264c:	1c03      	adds	r3, r0, #0
    264e:	2b00      	cmp	r3, #0
    2650:	d001      	beq.n	2656 <udd_ep_alloc+0x146>
		return false;
    2652:	2300      	movs	r3, #0
    2654:	e01a      	b.n	268c <udd_ep_alloc+0x17c>
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    2656:	4912      	ldr	r1, [pc, #72]	; (26a0 <udd_ep_alloc+0x190>)
    2658:	1c3b      	adds	r3, r7, #0
    265a:	3313      	adds	r3, #19
    265c:	781a      	ldrb	r2, [r3, #0]
    265e:	4b12      	ldr	r3, [pc, #72]	; (26a8 <udd_ep_alloc+0x198>)
    2660:	1c08      	adds	r0, r1, #0
    2662:	1c11      	adds	r1, r2, #0
    2664:	2200      	movs	r2, #0
    2666:	4c11      	ldr	r4, [pc, #68]	; (26ac <udd_ep_alloc+0x19c>)
    2668:	47a0      	blx	r4
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    266a:	4a0d      	ldr	r2, [pc, #52]	; (26a0 <udd_ep_alloc+0x190>)
    266c:	1dfb      	adds	r3, r7, #7
    266e:	781b      	ldrb	r3, [r3, #0]
    2670:	1c10      	adds	r0, r2, #0
    2672:	1c19      	adds	r1, r3, #0
    2674:	2200      	movs	r2, #0
    2676:	4b0e      	ldr	r3, [pc, #56]	; (26b0 <udd_ep_alloc+0x1a0>)
    2678:	4798      	blx	r3
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    267a:	4a09      	ldr	r2, [pc, #36]	; (26a0 <udd_ep_alloc+0x190>)
    267c:	1dfb      	adds	r3, r7, #7
    267e:	781b      	ldrb	r3, [r3, #0]
    2680:	1c10      	adds	r0, r2, #0
    2682:	1c19      	adds	r1, r3, #0
    2684:	2201      	movs	r2, #1
    2686:	4b0a      	ldr	r3, [pc, #40]	; (26b0 <udd_ep_alloc+0x1a0>)
    2688:	4798      	blx	r3

	return true;
    268a:	2301      	movs	r3, #1
}
    268c:	1c18      	adds	r0, r3, #0
    268e:	46bd      	mov	sp, r7
    2690:	b007      	add	sp, #28
    2692:	bd90      	pop	{r4, r7, pc}
    2694:	000040f9 	.word	0x000040f9
    2698:	000003ff 	.word	0x000003ff
    269c:	00002029 	.word	0x00002029
    26a0:	20000b34 	.word	0x20000b34
    26a4:	00004121 	.word	0x00004121
    26a8:	000023cd 	.word	0x000023cd
    26ac:	00003ced 	.word	0x00003ced
    26b0:	00003dcd 	.word	0x00003dcd

000026b4 <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    26b4:	b580      	push	{r7, lr}
    26b6:	b082      	sub	sp, #8
    26b8:	af00      	add	r7, sp, #0
    26ba:	1c02      	adds	r2, r0, #0
    26bc:	1dfb      	adds	r3, r7, #7
    26be:	701a      	strb	r2, [r3, #0]
	return usb_device_endpoint_is_halted(&usb_device, ep);
    26c0:	4a05      	ldr	r2, [pc, #20]	; (26d8 <udd_ep_is_halted+0x24>)
    26c2:	1dfb      	adds	r3, r7, #7
    26c4:	781b      	ldrb	r3, [r3, #0]
    26c6:	1c10      	adds	r0, r2, #0
    26c8:	1c19      	adds	r1, r3, #0
    26ca:	4b04      	ldr	r3, [pc, #16]	; (26dc <udd_ep_is_halted+0x28>)
    26cc:	4798      	blx	r3
    26ce:	1c03      	adds	r3, r0, #0
}
    26d0:	1c18      	adds	r0, r3, #0
    26d2:	46bd      	mov	sp, r7
    26d4:	b002      	add	sp, #8
    26d6:	bd80      	pop	{r7, pc}
    26d8:	20000b34 	.word	0x20000b34
    26dc:	00004675 	.word	0x00004675

000026e0 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    26e0:	b580      	push	{r7, lr}
    26e2:	b084      	sub	sp, #16
    26e4:	af00      	add	r7, sp, #0
    26e6:	1c02      	adds	r2, r0, #0
    26e8:	1dfb      	adds	r3, r7, #7
    26ea:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    26ec:	1c3b      	adds	r3, r7, #0
    26ee:	330f      	adds	r3, #15
    26f0:	1dfa      	adds	r2, r7, #7
    26f2:	7811      	ldrb	r1, [r2, #0]
    26f4:	220f      	movs	r2, #15
    26f6:	400a      	ands	r2, r1
    26f8:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    26fa:	1c3b      	adds	r3, r7, #0
    26fc:	330f      	adds	r3, #15
    26fe:	781b      	ldrb	r3, [r3, #0]
    2700:	2b07      	cmp	r3, #7
    2702:	d901      	bls.n	2708 <udd_ep_set_halt+0x28>
		return false;
    2704:	2300      	movs	r3, #0
    2706:	e00c      	b.n	2722 <udd_ep_set_halt+0x42>
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    2708:	4a08      	ldr	r2, [pc, #32]	; (272c <udd_ep_set_halt+0x4c>)
    270a:	1dfb      	adds	r3, r7, #7
    270c:	781b      	ldrb	r3, [r3, #0]
    270e:	1c10      	adds	r0, r2, #0
    2710:	1c19      	adds	r1, r3, #0
    2712:	4b07      	ldr	r3, [pc, #28]	; (2730 <udd_ep_set_halt+0x50>)
    2714:	4798      	blx	r3

	udd_ep_abort(ep);
    2716:	1dfb      	adds	r3, r7, #7
    2718:	781b      	ldrb	r3, [r3, #0]
    271a:	1c18      	adds	r0, r3, #0
    271c:	4b05      	ldr	r3, [pc, #20]	; (2734 <udd_ep_set_halt+0x54>)
    271e:	4798      	blx	r3
	return true;
    2720:	2301      	movs	r3, #1
}
    2722:	1c18      	adds	r0, r3, #0
    2724:	46bd      	mov	sp, r7
    2726:	b004      	add	sp, #16
    2728:	bd80      	pop	{r7, pc}
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	20000b34 	.word	0x20000b34
    2730:	000046e5 	.word	0x000046e5
    2734:	00002411 	.word	0x00002411

00002738 <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    2738:	b580      	push	{r7, lr}
    273a:	b084      	sub	sp, #16
    273c:	af00      	add	r7, sp, #0
    273e:	1c02      	adds	r2, r0, #0
    2740:	1dfb      	adds	r3, r7, #7
    2742:	701a      	strb	r2, [r3, #0]
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    2744:	1c3b      	adds	r3, r7, #0
    2746:	330f      	adds	r3, #15
    2748:	1dfa      	adds	r2, r7, #7
    274a:	7811      	ldrb	r1, [r2, #0]
    274c:	220f      	movs	r2, #15
    274e:	400a      	ands	r2, r1
    2750:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    2752:	1c3b      	adds	r3, r7, #0
    2754:	330f      	adds	r3, #15
    2756:	781b      	ldrb	r3, [r3, #0]
    2758:	2b07      	cmp	r3, #7
    275a:	d901      	bls.n	2760 <udd_ep_clear_halt+0x28>
		return false;
    275c:	2300      	movs	r3, #0
    275e:	e01d      	b.n	279c <udd_ep_clear_halt+0x64>
	}
	ptr_job = udd_ep_get_job(ep);
    2760:	1dfb      	adds	r3, r7, #7
    2762:	781b      	ldrb	r3, [r3, #0]
    2764:	1c18      	adds	r0, r3, #0
    2766:	4b0f      	ldr	r3, [pc, #60]	; (27a4 <udd_ep_clear_halt+0x6c>)
    2768:	4798      	blx	r3
    276a:	1c03      	adds	r3, r0, #0
    276c:	60bb      	str	r3, [r7, #8]

	usb_device_endpoint_clear_halt(&usb_device, ep);
    276e:	4a0e      	ldr	r2, [pc, #56]	; (27a8 <udd_ep_clear_halt+0x70>)
    2770:	1dfb      	adds	r3, r7, #7
    2772:	781b      	ldrb	r3, [r3, #0]
    2774:	1c10      	adds	r0, r2, #0
    2776:	1c19      	adds	r1, r3, #0
    2778:	4b0c      	ldr	r3, [pc, #48]	; (27ac <udd_ep_clear_halt+0x74>)
    277a:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    277c:	68bb      	ldr	r3, [r7, #8]
    277e:	7c9b      	ldrb	r3, [r3, #18]
    2780:	07db      	lsls	r3, r3, #31
    2782:	0fdb      	lsrs	r3, r3, #31
    2784:	b2db      	uxtb	r3, r3
    2786:	2b01      	cmp	r3, #1
    2788:	d107      	bne.n	279a <udd_ep_clear_halt+0x62>
		ptr_job->busy = false;
    278a:	68bb      	ldr	r3, [r7, #8]
    278c:	7c9a      	ldrb	r2, [r3, #18]
    278e:	2101      	movs	r1, #1
    2790:	438a      	bics	r2, r1
    2792:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt();
    2794:	68bb      	ldr	r3, [r7, #8]
    2796:	681b      	ldr	r3, [r3, #0]
    2798:	4798      	blx	r3
	}

	return true;
    279a:	2301      	movs	r3, #1
}
    279c:	1c18      	adds	r0, r3, #0
    279e:	46bd      	mov	sp, r7
    27a0:	b004      	add	sp, #16
    27a2:	bd80      	pop	{r7, pc}
    27a4:	00002029 	.word	0x00002029
    27a8:	20000b34 	.word	0x20000b34
    27ac:	0000473d 	.word	0x0000473d

000027b0 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    27b0:	b580      	push	{r7, lr}
    27b2:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    27b4:	4b07      	ldr	r3, [pc, #28]	; (27d4 <udd_ctrl_stall_data+0x24>)
    27b6:	2205      	movs	r2, #5
    27b8:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    27ba:	4b07      	ldr	r3, [pc, #28]	; (27d8 <udd_ctrl_stall_data+0x28>)
    27bc:	1c18      	adds	r0, r3, #0
    27be:	2180      	movs	r1, #128	; 0x80
    27c0:	4b06      	ldr	r3, [pc, #24]	; (27dc <udd_ctrl_stall_data+0x2c>)
    27c2:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    27c4:	4b04      	ldr	r3, [pc, #16]	; (27d8 <udd_ctrl_stall_data+0x28>)
    27c6:	1c18      	adds	r0, r3, #0
    27c8:	2100      	movs	r1, #0
    27ca:	4b05      	ldr	r3, [pc, #20]	; (27e0 <udd_ctrl_stall_data+0x30>)
    27cc:	4798      	blx	r3
}
    27ce:	46bd      	mov	sp, r7
    27d0:	bd80      	pop	{r7, pc}
    27d2:	46c0      	nop			; (mov r8, r8)
    27d4:	20000606 	.word	0x20000606
    27d8:	20000b34 	.word	0x20000b34
    27dc:	000046e5 	.word	0x000046e5
    27e0:	0000473d 	.word	0x0000473d

000027e4 <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    27e4:	b590      	push	{r4, r7, lr}
    27e6:	b089      	sub	sp, #36	; 0x24
    27e8:	af00      	add	r7, sp, #0
    27ea:	60ba      	str	r2, [r7, #8]
    27ec:	607b      	str	r3, [r7, #4]
    27ee:	1c3b      	adds	r3, r7, #0
    27f0:	330f      	adds	r3, #15
    27f2:	1c02      	adds	r2, r0, #0
    27f4:	701a      	strb	r2, [r3, #0]
    27f6:	1c3b      	adds	r3, r7, #0
    27f8:	330e      	adds	r3, #14
    27fa:	1c0a      	adds	r2, r1, #0
    27fc:	701a      	strb	r2, [r3, #0]
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    27fe:	1c3b      	adds	r3, r7, #0
    2800:	331d      	adds	r3, #29
    2802:	1c3a      	adds	r2, r7, #0
    2804:	320f      	adds	r2, #15
    2806:	7811      	ldrb	r1, [r2, #0]
    2808:	220f      	movs	r2, #15
    280a:	400a      	ands	r2, r1
    280c:	701a      	strb	r2, [r3, #0]

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    280e:	1c3b      	adds	r3, r7, #0
    2810:	331d      	adds	r3, #29
    2812:	781b      	ldrb	r3, [r3, #0]
    2814:	2b07      	cmp	r3, #7
    2816:	d808      	bhi.n	282a <udd_ep_run+0x46>
    2818:	1c3b      	adds	r3, r7, #0
    281a:	330f      	adds	r3, #15
    281c:	781b      	ldrb	r3, [r3, #0]
    281e:	1c18      	adds	r0, r3, #0
    2820:	4b9d      	ldr	r3, [pc, #628]	; (2a98 <udd_ep_run+0x2b4>)
    2822:	4798      	blx	r3
    2824:	1c03      	adds	r3, r0, #0
    2826:	2b00      	cmp	r3, #0
    2828:	d001      	beq.n	282e <udd_ep_run+0x4a>
		return false;
    282a:	2300      	movs	r3, #0
    282c:	e130      	b.n	2a90 <udd_ep_run+0x2ac>
	}

	ptr_job = udd_ep_get_job(ep);
    282e:	1c3b      	adds	r3, r7, #0
    2830:	330f      	adds	r3, #15
    2832:	781b      	ldrb	r3, [r3, #0]
    2834:	1c18      	adds	r0, r3, #0
    2836:	4b99      	ldr	r3, [pc, #612]	; (2a9c <udd_ep_run+0x2b8>)
    2838:	4798      	blx	r3
    283a:	1c03      	adds	r3, r0, #0
    283c:	61bb      	str	r3, [r7, #24]

	flags = cpu_irq_save();
    283e:	4b98      	ldr	r3, [pc, #608]	; (2aa0 <udd_ep_run+0x2bc>)
    2840:	4798      	blx	r3
    2842:	1c03      	adds	r3, r0, #0
    2844:	617b      	str	r3, [r7, #20]
	if (ptr_job->busy == true) {
    2846:	69bb      	ldr	r3, [r7, #24]
    2848:	7c9b      	ldrb	r3, [r3, #18]
    284a:	07db      	lsls	r3, r3, #31
    284c:	0fdb      	lsrs	r3, r3, #31
    284e:	b2db      	uxtb	r3, r3
    2850:	2b01      	cmp	r3, #1
    2852:	d105      	bne.n	2860 <udd_ep_run+0x7c>
		cpu_irq_restore(flags);
    2854:	697b      	ldr	r3, [r7, #20]
    2856:	1c18      	adds	r0, r3, #0
    2858:	4b92      	ldr	r3, [pc, #584]	; (2aa4 <udd_ep_run+0x2c0>)
    285a:	4798      	blx	r3
		return false; /* Job already on going */
    285c:	2300      	movs	r3, #0
    285e:	e117      	b.n	2a90 <udd_ep_run+0x2ac>
	}
	ptr_job->busy = true;
    2860:	69bb      	ldr	r3, [r7, #24]
    2862:	7c9a      	ldrb	r2, [r3, #18]
    2864:	2101      	movs	r1, #1
    2866:	430a      	orrs	r2, r1
    2868:	749a      	strb	r2, [r3, #18]
	cpu_irq_restore(flags);
    286a:	697b      	ldr	r3, [r7, #20]
    286c:	1c18      	adds	r0, r3, #0
    286e:	4b8d      	ldr	r3, [pc, #564]	; (2aa4 <udd_ep_run+0x2c0>)
    2870:	4798      	blx	r3

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    2872:	69bb      	ldr	r3, [r7, #24]
    2874:	68ba      	ldr	r2, [r7, #8]
    2876:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
    2878:	69bb      	ldr	r3, [r7, #24]
    287a:	687a      	ldr	r2, [r7, #4]
    287c:	609a      	str	r2, [r3, #8]
	ptr_job->nb_trans = 0;
    287e:	69bb      	ldr	r3, [r7, #24]
    2880:	2200      	movs	r2, #0
    2882:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
    2884:	69bb      	ldr	r3, [r7, #24]
    2886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2888:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    288a:	69bb      	ldr	r3, [r7, #24]
    288c:	1c3a      	adds	r2, r7, #0
    288e:	320e      	adds	r2, #14
    2890:	7811      	ldrb	r1, [r2, #0]
    2892:	2201      	movs	r2, #1
    2894:	400a      	ands	r2, r1
    2896:	1892      	adds	r2, r2, r2
    2898:	7c99      	ldrb	r1, [r3, #18]
    289a:	2002      	movs	r0, #2
    289c:	4381      	bics	r1, r0
    289e:	430a      	orrs	r2, r1
    28a0:	749a      	strb	r2, [r3, #18]
	ptr_job->b_use_out_cache_buffer = false;
    28a2:	69bb      	ldr	r3, [r7, #24]
    28a4:	7c9a      	ldrb	r2, [r3, #18]
    28a6:	2104      	movs	r1, #4
    28a8:	438a      	bics	r2, r1
    28aa:	749a      	strb	r2, [r3, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    28ac:	1c3b      	adds	r3, r7, #0
    28ae:	330f      	adds	r3, #15
    28b0:	781b      	ldrb	r3, [r3, #0]
    28b2:	b25b      	sxtb	r3, r3
    28b4:	2b00      	cmp	r3, #0
    28b6:	db00      	blt.n	28ba <udd_ep_run+0xd6>
    28b8:	e077      	b.n	29aa <udd_ep_run+0x1c6>
		if (0 != ptr_job->buf_size) {
    28ba:	69bb      	ldr	r3, [r7, #24]
    28bc:	689b      	ldr	r3, [r3, #8]
    28be:	2b00      	cmp	r3, #0
    28c0:	d03f      	beq.n	2942 <udd_ep_run+0x15e>
			next_trans = ptr_job->buf_size;
    28c2:	69bb      	ldr	r3, [r7, #24]
    28c4:	689a      	ldr	r2, [r3, #8]
    28c6:	1c3b      	adds	r3, r7, #0
    28c8:	331e      	adds	r3, #30
    28ca:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    28cc:	1c3b      	adds	r3, r7, #0
    28ce:	331e      	adds	r3, #30
    28d0:	881a      	ldrh	r2, [r3, #0]
    28d2:	4b75      	ldr	r3, [pc, #468]	; (2aa8 <udd_ep_run+0x2c4>)
    28d4:	429a      	cmp	r2, r3
    28d6:	d90e      	bls.n	28f6 <udd_ep_run+0x112>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    28d8:	69bb      	ldr	r3, [r7, #24]
    28da:	8a1b      	ldrh	r3, [r3, #16]
    28dc:	1c1a      	adds	r2, r3, #0
    28de:	4972      	ldr	r1, [pc, #456]	; (2aa8 <udd_ep_run+0x2c4>)
    28e0:	4b72      	ldr	r3, [pc, #456]	; (2aac <udd_ep_run+0x2c8>)
    28e2:	1c08      	adds	r0, r1, #0
    28e4:	1c11      	adds	r1, r2, #0
    28e6:	4798      	blx	r3
    28e8:	1c0b      	adds	r3, r1, #0

	if (ep & USB_EP_DIR_IN) {
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    28ea:	b29a      	uxth	r2, r3
    28ec:	1c3b      	adds	r3, r7, #0
    28ee:	331e      	adds	r3, #30
    28f0:	496d      	ldr	r1, [pc, #436]	; (2aa8 <udd_ep_run+0x2c4>)
    28f2:	1a8a      	subs	r2, r1, r2
    28f4:	801a      	strh	r2, [r3, #0]
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    28f6:	69bb      	ldr	r3, [r7, #24]
    28f8:	7c9b      	ldrb	r3, [r3, #18]
    28fa:	079b      	lsls	r3, r3, #30
    28fc:	0fdb      	lsrs	r3, r3, #31
    28fe:	b2db      	uxtb	r3, r3
    2900:	2b00      	cmp	r3, #0
    2902:	d00e      	beq.n	2922 <udd_ep_run+0x13e>
					(0 == (next_trans % ptr_job->ep_size));
    2904:	69bb      	ldr	r3, [r7, #24]
    2906:	8a1a      	ldrh	r2, [r3, #16]
    2908:	1c3b      	adds	r3, r7, #0
    290a:	331e      	adds	r3, #30
    290c:	8819      	ldrh	r1, [r3, #0]
    290e:	4b68      	ldr	r3, [pc, #416]	; (2ab0 <udd_ep_run+0x2cc>)
    2910:	1c08      	adds	r0, r1, #0
    2912:	1c11      	adds	r1, r2, #0
    2914:	4798      	blx	r3
    2916:	1c0b      	adds	r3, r1, #0
    2918:	b29b      	uxth	r3, r3
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    291a:	2b00      	cmp	r3, #0
    291c:	d101      	bne.n	2922 <udd_ep_run+0x13e>
    291e:	2301      	movs	r3, #1
    2920:	e000      	b.n	2924 <udd_ep_run+0x140>
    2922:	2300      	movs	r3, #0
    2924:	b2db      	uxtb	r3, r3
    2926:	1c1a      	adds	r2, r3, #0
    2928:	2301      	movs	r3, #1
    292a:	4013      	ands	r3, r2
    292c:	b2d9      	uxtb	r1, r3
    292e:	69bb      	ldr	r3, [r7, #24]
    2930:	2201      	movs	r2, #1
    2932:	400a      	ands	r2, r1
    2934:	1892      	adds	r2, r2, r2
    2936:	7c99      	ldrb	r1, [r3, #18]
    2938:	2002      	movs	r0, #2
    293a:	4381      	bics	r1, r0
    293c:	430a      	orrs	r2, r1
    293e:	749a      	strb	r2, [r3, #18]
    2940:	e023      	b.n	298a <udd_ep_run+0x1a6>
					(0 == (next_trans % ptr_job->ep_size));
		} else if (true == ptr_job->b_shortpacket) {
    2942:	69bb      	ldr	r3, [r7, #24]
    2944:	7c9b      	ldrb	r3, [r3, #18]
    2946:	079b      	lsls	r3, r3, #30
    2948:	0fdb      	lsrs	r3, r3, #31
    294a:	b2db      	uxtb	r3, r3
    294c:	2b01      	cmp	r3, #1
    294e:	d109      	bne.n	2964 <udd_ep_run+0x180>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    2950:	69bb      	ldr	r3, [r7, #24]
    2952:	7c9a      	ldrb	r2, [r3, #18]
    2954:	2102      	movs	r1, #2
    2956:	438a      	bics	r2, r1
    2958:	749a      	strb	r2, [r3, #18]
			next_trans = 0;
    295a:	1c3b      	adds	r3, r7, #0
    295c:	331e      	adds	r3, #30
    295e:	2200      	movs	r2, #0
    2960:	801a      	strh	r2, [r3, #0]
    2962:	e012      	b.n	298a <udd_ep_run+0x1a6>
		} else {
			ptr_job->busy = false;
    2964:	69bb      	ldr	r3, [r7, #24]
    2966:	7c9a      	ldrb	r2, [r3, #18]
    2968:	2101      	movs	r1, #1
    296a:	438a      	bics	r2, r1
    296c:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    296e:	69bb      	ldr	r3, [r7, #24]
    2970:	681b      	ldr	r3, [r3, #0]
    2972:	2b00      	cmp	r3, #0
    2974:	d007      	beq.n	2986 <udd_ep_run+0x1a2>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    2976:	69bb      	ldr	r3, [r7, #24]
    2978:	681b      	ldr	r3, [r3, #0]
    297a:	1c3a      	adds	r2, r7, #0
    297c:	320f      	adds	r2, #15
    297e:	7812      	ldrb	r2, [r2, #0]
    2980:	2000      	movs	r0, #0
    2982:	2100      	movs	r1, #0
    2984:	4798      	blx	r3
			}
			return true;
    2986:	2301      	movs	r3, #1
    2988:	e082      	b.n	2a90 <udd_ep_run+0x2ac>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    298a:	69bb      	ldr	r3, [r7, #24]
    298c:	685a      	ldr	r2, [r3, #4]
    298e:	1c3b      	adds	r3, r7, #0
    2990:	331e      	adds	r3, #30
    2992:	881b      	ldrh	r3, [r3, #0]
    2994:	4847      	ldr	r0, [pc, #284]	; (2ab4 <udd_ep_run+0x2d0>)
    2996:	1c39      	adds	r1, r7, #0
    2998:	311d      	adds	r1, #29
    299a:	7809      	ldrb	r1, [r1, #0]
    299c:	4c46      	ldr	r4, [pc, #280]	; (2ab8 <udd_ep_run+0x2d4>)
    299e:	47a0      	blx	r4
    29a0:	1c03      	adds	r3, r0, #0
			if (NULL != ptr_job->call_trans) {
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
			}
			return true;
		}
		return (STATUS_OK ==
    29a2:	425a      	negs	r2, r3
    29a4:	4153      	adcs	r3, r2
    29a6:	b2db      	uxtb	r3, r3
    29a8:	e072      	b.n	2a90 <udd_ep_run+0x2ac>
				usb_device_endpoint_write_buffer_job(&usb_device,
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    29aa:	69bb      	ldr	r3, [r7, #24]
    29ac:	689b      	ldr	r3, [r3, #8]
    29ae:	2b00      	cmp	r3, #0
    29b0:	d05c      	beq.n	2a6c <udd_ep_run+0x288>
			next_trans = ptr_job->buf_size;
    29b2:	69bb      	ldr	r3, [r7, #24]
    29b4:	689a      	ldr	r2, [r3, #8]
    29b6:	1c3b      	adds	r3, r7, #0
    29b8:	331e      	adds	r3, #30
    29ba:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    29bc:	1c3b      	adds	r3, r7, #0
    29be:	331e      	adds	r3, #30
    29c0:	881a      	ldrh	r2, [r3, #0]
    29c2:	4b39      	ldr	r3, [pc, #228]	; (2aa8 <udd_ep_run+0x2c4>)
    29c4:	429a      	cmp	r2, r3
    29c6:	d90f      	bls.n	29e8 <udd_ep_run+0x204>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    29c8:	69bb      	ldr	r3, [r7, #24]
    29ca:	8a1b      	ldrh	r3, [r3, #16]
    29cc:	1c1a      	adds	r2, r3, #0
    29ce:	4936      	ldr	r1, [pc, #216]	; (2aa8 <udd_ep_run+0x2c4>)
    29d0:	4b36      	ldr	r3, [pc, #216]	; (2aac <udd_ep_run+0x2c8>)
    29d2:	1c08      	adds	r0, r1, #0
    29d4:	1c11      	adds	r1, r2, #0
    29d6:	4798      	blx	r3
    29d8:	1c0b      	adds	r3, r1, #0
		if (0 != ptr_job->buf_size) {
			next_trans = ptr_job->buf_size;
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    29da:	b29a      	uxth	r2, r3
    29dc:	1c3b      	adds	r3, r7, #0
    29de:	331e      	adds	r3, #30
    29e0:	4931      	ldr	r1, [pc, #196]	; (2aa8 <udd_ep_run+0x2c4>)
    29e2:	1a8a      	subs	r2, r1, r2
    29e4:	801a      	strh	r2, [r3, #0]
    29e6:	e011      	b.n	2a0c <udd_ep_run+0x228>
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    29e8:	69bb      	ldr	r3, [r7, #24]
    29ea:	8a1a      	ldrh	r2, [r3, #16]
    29ec:	1c3b      	adds	r3, r7, #0
    29ee:	331e      	adds	r3, #30
    29f0:	8819      	ldrh	r1, [r3, #0]
    29f2:	4b2f      	ldr	r3, [pc, #188]	; (2ab0 <udd_ep_run+0x2cc>)
    29f4:	1c08      	adds	r0, r1, #0
    29f6:	1c11      	adds	r1, r2, #0
    29f8:	4798      	blx	r3
    29fa:	1c0b      	adds	r3, r1, #0
    29fc:	b29a      	uxth	r2, r3
    29fe:	1c3b      	adds	r3, r7, #0
    2a00:	331e      	adds	r3, #30
    2a02:	1c39      	adds	r1, r7, #0
    2a04:	311e      	adds	r1, #30
    2a06:	8809      	ldrh	r1, [r1, #0]
    2a08:	1a8a      	subs	r2, r1, r2
    2a0a:	801a      	strh	r2, [r3, #0]
			}
			if (next_trans < ptr_job->ep_size) {
    2a0c:	69bb      	ldr	r3, [r7, #24]
    2a0e:	8a1b      	ldrh	r3, [r3, #16]
    2a10:	1c3a      	adds	r2, r7, #0
    2a12:	321e      	adds	r2, #30
    2a14:	8812      	ldrh	r2, [r2, #0]
    2a16:	429a      	cmp	r2, r3
    2a18:	d218      	bcs.n	2a4c <udd_ep_run+0x268>
				ptr_job->b_use_out_cache_buffer = true;
    2a1a:	69bb      	ldr	r3, [r7, #24]
    2a1c:	7c9a      	ldrb	r2, [r3, #18]
    2a1e:	2104      	movs	r1, #4
    2a20:	430a      	orrs	r2, r1
    2a22:	749a      	strb	r2, [r3, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    2a24:	1c3b      	adds	r3, r7, #0
    2a26:	331d      	adds	r3, #29
    2a28:	781b      	ldrb	r3, [r3, #0]
    2a2a:	3b01      	subs	r3, #1
    2a2c:	019a      	lsls	r2, r3, #6
    2a2e:	4b23      	ldr	r3, [pc, #140]	; (2abc <udd_ep_run+0x2d8>)
    2a30:	18d2      	adds	r2, r2, r3
								ptr_job->ep_size));
    2a32:	69bb      	ldr	r3, [r7, #24]
    2a34:	8a1b      	ldrh	r3, [r3, #16]
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2a36:	481f      	ldr	r0, [pc, #124]	; (2ab4 <udd_ep_run+0x2d0>)
    2a38:	1c39      	adds	r1, r7, #0
    2a3a:	311d      	adds	r1, #29
    2a3c:	7809      	ldrb	r1, [r1, #0]
    2a3e:	4c20      	ldr	r4, [pc, #128]	; (2ac0 <udd_ep_run+0x2dc>)
    2a40:	47a0      	blx	r4
    2a42:	1c03      	adds	r3, r0, #0
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
			}
			if (next_trans < ptr_job->ep_size) {
				ptr_job->b_use_out_cache_buffer = true;
				return (STATUS_OK ==
    2a44:	425a      	negs	r2, r3
    2a46:	4153      	adcs	r3, r2
    2a48:	b2db      	uxtb	r3, r3
    2a4a:	e021      	b.n	2a90 <udd_ep_run+0x2ac>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    2a4c:	69bb      	ldr	r3, [r7, #24]
    2a4e:	685a      	ldr	r2, [r3, #4]
    2a50:	1c3b      	adds	r3, r7, #0
    2a52:	331e      	adds	r3, #30
    2a54:	881b      	ldrh	r3, [r3, #0]
    2a56:	4817      	ldr	r0, [pc, #92]	; (2ab4 <udd_ep_run+0x2d0>)
    2a58:	1c39      	adds	r1, r7, #0
    2a5a:	311d      	adds	r1, #29
    2a5c:	7809      	ldrb	r1, [r1, #0]
    2a5e:	4c18      	ldr	r4, [pc, #96]	; (2ac0 <udd_ep_run+0x2dc>)
    2a60:	47a0      	blx	r4
    2a62:	1c03      	adds	r3, r0, #0
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
								ptr_job->ep_size));
			} else {
				return (STATUS_OK ==
    2a64:	425a      	negs	r2, r3
    2a66:	4153      	adcs	r3, r2
    2a68:	b2db      	uxtb	r3, r3
    2a6a:	e011      	b.n	2a90 <udd_ep_run+0x2ac>
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    2a6c:	69bb      	ldr	r3, [r7, #24]
    2a6e:	7c9a      	ldrb	r2, [r3, #18]
    2a70:	2101      	movs	r1, #1
    2a72:	438a      	bics	r2, r1
    2a74:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    2a76:	69bb      	ldr	r3, [r7, #24]
    2a78:	681b      	ldr	r3, [r3, #0]
    2a7a:	2b00      	cmp	r3, #0
    2a7c:	d007      	beq.n	2a8e <udd_ep_run+0x2aa>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    2a7e:	69bb      	ldr	r3, [r7, #24]
    2a80:	681b      	ldr	r3, [r3, #0]
    2a82:	1c3a      	adds	r2, r7, #0
    2a84:	320f      	adds	r2, #15
    2a86:	7812      	ldrb	r2, [r2, #0]
    2a88:	2000      	movs	r0, #0
    2a8a:	2100      	movs	r1, #0
    2a8c:	4798      	blx	r3
			}
			return true;
    2a8e:	2301      	movs	r3, #1
		}
	}
}
    2a90:	1c18      	adds	r0, r3, #0
    2a92:	46bd      	mov	sp, r7
    2a94:	b009      	add	sp, #36	; 0x24
    2a96:	bd90      	pop	{r4, r7, pc}
    2a98:	000026b5 	.word	0x000026b5
    2a9c:	00002029 	.word	0x00002029
    2aa0:	00001dc1 	.word	0x00001dc1
    2aa4:	00001e09 	.word	0x00001e09
    2aa8:	00001fff 	.word	0x00001fff
    2aac:	000066dd 	.word	0x000066dd
    2ab0:	0000661d 	.word	0x0000661d
    2ab4:	20000b34 	.word	0x20000b34
    2ab8:	00004855 	.word	0x00004855
    2abc:	20000974 	.word	0x20000974
    2ac0:	0000490d 	.word	0x0000490d

00002ac4 <udd_set_address>:

void udd_set_address(uint8_t address)
{
    2ac4:	b580      	push	{r7, lr}
    2ac6:	b082      	sub	sp, #8
    2ac8:	af00      	add	r7, sp, #0
    2aca:	1c02      	adds	r2, r0, #0
    2acc:	1dfb      	adds	r3, r7, #7
    2ace:	701a      	strb	r2, [r3, #0]
	usb_device_set_address(&usb_device,address);
    2ad0:	4a04      	ldr	r2, [pc, #16]	; (2ae4 <udd_set_address+0x20>)
    2ad2:	1dfb      	adds	r3, r7, #7
    2ad4:	781b      	ldrb	r3, [r3, #0]
    2ad6:	1c10      	adds	r0, r2, #0
    2ad8:	1c19      	adds	r1, r3, #0
    2ada:	4b03      	ldr	r3, [pc, #12]	; (2ae8 <udd_set_address+0x24>)
    2adc:	4798      	blx	r3
}
    2ade:	46bd      	mov	sp, r7
    2ae0:	b002      	add	sp, #8
    2ae2:	bd80      	pop	{r7, pc}
    2ae4:	20000b34 	.word	0x20000b34
    2ae8:	00001e79 	.word	0x00001e79

00002aec <udd_getaddress>:

uint8_t udd_getaddress(void)
{
    2aec:	b580      	push	{r7, lr}
    2aee:	af00      	add	r7, sp, #0
	return usb_device_get_address(&usb_device);
    2af0:	4b03      	ldr	r3, [pc, #12]	; (2b00 <udd_getaddress+0x14>)
    2af2:	1c18      	adds	r0, r3, #0
    2af4:	4b03      	ldr	r3, [pc, #12]	; (2b04 <udd_getaddress+0x18>)
    2af6:	4798      	blx	r3
    2af8:	1c03      	adds	r3, r0, #0
}
    2afa:	1c18      	adds	r0, r3, #0
    2afc:	46bd      	mov	sp, r7
    2afe:	bd80      	pop	{r7, pc}
    2b00:	20000b34 	.word	0x20000b34
    2b04:	00001e5d 	.word	0x00001e5d

00002b08 <udd_set_setup_payload>:
		usb_device_send_remote_wake_up(&usb_device);
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
    2b08:	b580      	push	{r7, lr}
    2b0a:	b082      	sub	sp, #8
    2b0c:	af00      	add	r7, sp, #0
    2b0e:	6078      	str	r0, [r7, #4]
    2b10:	1c0a      	adds	r2, r1, #0
    2b12:	1cbb      	adds	r3, r7, #2
    2b14:	801a      	strh	r2, [r3, #0]
	udd_g_ctrlreq.payload = payload;
    2b16:	4b05      	ldr	r3, [pc, #20]	; (2b2c <udd_set_setup_payload+0x24>)
    2b18:	687a      	ldr	r2, [r7, #4]
    2b1a:	609a      	str	r2, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    2b1c:	4b03      	ldr	r3, [pc, #12]	; (2b2c <udd_set_setup_payload+0x24>)
    2b1e:	1cba      	adds	r2, r7, #2
    2b20:	8812      	ldrh	r2, [r2, #0]
    2b22:	819a      	strh	r2, [r3, #12]
}
    2b24:	46bd      	mov	sp, r7
    2b26:	b002      	add	sp, #8
    2b28:	bd80      	pop	{r7, pc}
    2b2a:	46c0      	nop			; (mov r8, r8)
    2b2c:	20000c9c 	.word	0x20000c9c

00002b30 <udd_ctrl_fetch_ram>:

/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
    2b30:	b580      	push	{r7, lr}
    2b32:	af00      	add	r7, sp, #0
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    2b34:	4b13      	ldr	r3, [pc, #76]	; (2b84 <udd_ctrl_fetch_ram+0x54>)
    2b36:	781a      	ldrb	r2, [r3, #0]
    2b38:	4b13      	ldr	r3, [pc, #76]	; (2b88 <udd_ctrl_fetch_ram+0x58>)
    2b3a:	701a      	strb	r2, [r3, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    2b3c:	4b11      	ldr	r3, [pc, #68]	; (2b84 <udd_ctrl_fetch_ram+0x54>)
    2b3e:	785a      	ldrb	r2, [r3, #1]
    2b40:	4b11      	ldr	r3, [pc, #68]	; (2b88 <udd_ctrl_fetch_ram+0x58>)
    2b42:	705a      	strb	r2, [r3, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    2b44:	4b0f      	ldr	r3, [pc, #60]	; (2b84 <udd_ctrl_fetch_ram+0x54>)
    2b46:	78db      	ldrb	r3, [r3, #3]
    2b48:	021b      	lsls	r3, r3, #8
    2b4a:	b29a      	uxth	r2, r3
    2b4c:	4b0d      	ldr	r3, [pc, #52]	; (2b84 <udd_ctrl_fetch_ram+0x54>)
    2b4e:	789b      	ldrb	r3, [r3, #2]
    2b50:	18d3      	adds	r3, r2, r3
    2b52:	b29a      	uxth	r2, r3
    2b54:	4b0c      	ldr	r3, [pc, #48]	; (2b88 <udd_ctrl_fetch_ram+0x58>)
    2b56:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    2b58:	4b0a      	ldr	r3, [pc, #40]	; (2b84 <udd_ctrl_fetch_ram+0x54>)
    2b5a:	795b      	ldrb	r3, [r3, #5]
    2b5c:	021b      	lsls	r3, r3, #8
    2b5e:	b29a      	uxth	r2, r3
    2b60:	4b08      	ldr	r3, [pc, #32]	; (2b84 <udd_ctrl_fetch_ram+0x54>)
    2b62:	791b      	ldrb	r3, [r3, #4]
    2b64:	18d3      	adds	r3, r2, r3
    2b66:	b29a      	uxth	r2, r3
    2b68:	4b07      	ldr	r3, [pc, #28]	; (2b88 <udd_ctrl_fetch_ram+0x58>)
    2b6a:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    2b6c:	4b05      	ldr	r3, [pc, #20]	; (2b84 <udd_ctrl_fetch_ram+0x54>)
    2b6e:	79db      	ldrb	r3, [r3, #7]
    2b70:	021b      	lsls	r3, r3, #8
    2b72:	b29a      	uxth	r2, r3
    2b74:	4b03      	ldr	r3, [pc, #12]	; (2b84 <udd_ctrl_fetch_ram+0x54>)
    2b76:	799b      	ldrb	r3, [r3, #6]
    2b78:	18d3      	adds	r3, r2, r3
    2b7a:	b29a      	uxth	r2, r3
    2b7c:	4b02      	ldr	r3, [pc, #8]	; (2b88 <udd_ctrl_fetch_ram+0x58>)
    2b7e:	80da      	strh	r2, [r3, #6]
}
    2b80:	46bd      	mov	sp, r7
    2b82:	bd80      	pop	{r7, pc}
    2b84:	20000cb4 	.word	0x20000cb4
    2b88:	20000c9c 	.word	0x20000c9c

00002b8c <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    2b8c:	b598      	push	{r3, r4, r7, lr}
    2b8e:	af00      	add	r7, sp, #0
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    2b90:	4b09      	ldr	r3, [pc, #36]	; (2bb8 <udd_ctrl_send_zlp_in+0x2c>)
    2b92:	2203      	movs	r2, #3
    2b94:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2b96:	4a09      	ldr	r2, [pc, #36]	; (2bbc <udd_ctrl_send_zlp_in+0x30>)
    2b98:	4b09      	ldr	r3, [pc, #36]	; (2bc0 <udd_ctrl_send_zlp_in+0x34>)
    2b9a:	1c10      	adds	r0, r2, #0
    2b9c:	1c19      	adds	r1, r3, #0
    2b9e:	4b09      	ldr	r3, [pc, #36]	; (2bc4 <udd_ctrl_send_zlp_in+0x38>)
    2ba0:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    2ba2:	4b09      	ldr	r3, [pc, #36]	; (2bc8 <udd_ctrl_send_zlp_in+0x3c>)
    2ba4:	689b      	ldr	r3, [r3, #8]
    2ba6:	4a05      	ldr	r2, [pc, #20]	; (2bbc <udd_ctrl_send_zlp_in+0x30>)
    2ba8:	1c10      	adds	r0, r2, #0
    2baa:	2100      	movs	r1, #0
    2bac:	1c1a      	adds	r2, r3, #0
    2bae:	2300      	movs	r3, #0
    2bb0:	4c06      	ldr	r4, [pc, #24]	; (2bcc <udd_ctrl_send_zlp_in+0x40>)
    2bb2:	47a0      	blx	r4
}
    2bb4:	46bd      	mov	sp, r7
    2bb6:	bd98      	pop	{r3, r4, r7, pc}
    2bb8:	20000606 	.word	0x20000606
    2bbc:	20000b34 	.word	0x20000b34
    2bc0:	20000cb4 	.word	0x20000cb4
    2bc4:	000049b9 	.word	0x000049b9
    2bc8:	20000c9c 	.word	0x20000c9c
    2bcc:	00004855 	.word	0x00004855

00002bd0 <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    2bd0:	b590      	push	{r4, r7, lr}
    2bd2:	b083      	sub	sp, #12
    2bd4:	af00      	add	r7, sp, #0
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2bd6:	4b30      	ldr	r3, [pc, #192]	; (2c98 <udd_ctrl_in_sent+0xc8>)
    2bd8:	8999      	ldrh	r1, [r3, #12]
    2bda:	4b30      	ldr	r3, [pc, #192]	; (2c9c <udd_ctrl_in_sent+0xcc>)
    2bdc:	881a      	ldrh	r2, [r3, #0]
    2bde:	1dbb      	adds	r3, r7, #6
    2be0:	1a8a      	subs	r2, r1, r2
    2be2:	801a      	strh	r2, [r3, #0]

	if (0 == nb_remain) {
    2be4:	1dbb      	adds	r3, r7, #6
    2be6:	881b      	ldrh	r3, [r3, #0]
    2be8:	2b00      	cmp	r3, #0
    2bea:	d12f      	bne.n	2c4c <udd_ctrl_in_sent+0x7c>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2bec:	4b2c      	ldr	r3, [pc, #176]	; (2ca0 <udd_ctrl_in_sent+0xd0>)
    2bee:	881a      	ldrh	r2, [r3, #0]
    2bf0:	4b2a      	ldr	r3, [pc, #168]	; (2c9c <udd_ctrl_in_sent+0xcc>)
    2bf2:	881b      	ldrh	r3, [r3, #0]
    2bf4:	18d3      	adds	r3, r2, r3
    2bf6:	b29a      	uxth	r2, r3
    2bf8:	4b29      	ldr	r3, [pc, #164]	; (2ca0 <udd_ctrl_in_sent+0xd0>)
    2bfa:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    2bfc:	4b26      	ldr	r3, [pc, #152]	; (2c98 <udd_ctrl_in_sent+0xc8>)
    2bfe:	88da      	ldrh	r2, [r3, #6]
    2c00:	4b27      	ldr	r3, [pc, #156]	; (2ca0 <udd_ctrl_in_sent+0xd0>)
    2c02:	881b      	ldrh	r3, [r3, #0]
    2c04:	429a      	cmp	r2, r3
    2c06:	d003      	beq.n	2c10 <udd_ctrl_in_sent+0x40>
    2c08:	4b26      	ldr	r3, [pc, #152]	; (2ca4 <udd_ctrl_in_sent+0xd4>)
    2c0a:	781b      	ldrb	r3, [r3, #0]
    2c0c:	2b00      	cmp	r3, #0
    2c0e:	d009      	beq.n	2c24 <udd_ctrl_in_sent+0x54>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2c10:	4b25      	ldr	r3, [pc, #148]	; (2ca8 <udd_ctrl_in_sent+0xd8>)
    2c12:	2204      	movs	r2, #4
    2c14:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    2c16:	4a25      	ldr	r2, [pc, #148]	; (2cac <udd_ctrl_in_sent+0xdc>)
    2c18:	4b25      	ldr	r3, [pc, #148]	; (2cb0 <udd_ctrl_in_sent+0xe0>)
    2c1a:	1c10      	adds	r0, r2, #0
    2c1c:	1c19      	adds	r1, r3, #0
    2c1e:	4b25      	ldr	r3, [pc, #148]	; (2cb4 <udd_ctrl_in_sent+0xe4>)
    2c20:	4798      	blx	r3
			return;
    2c22:	e035      	b.n	2c90 <udd_ctrl_in_sent+0xc0>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    2c24:	4b1c      	ldr	r3, [pc, #112]	; (2c98 <udd_ctrl_in_sent+0xc8>)
    2c26:	695b      	ldr	r3, [r3, #20]
    2c28:	2b00      	cmp	r3, #0
    2c2a:	d00f      	beq.n	2c4c <udd_ctrl_in_sent+0x7c>
    2c2c:	4b1a      	ldr	r3, [pc, #104]	; (2c98 <udd_ctrl_in_sent+0xc8>)
    2c2e:	695b      	ldr	r3, [r3, #20]
    2c30:	4798      	blx	r3
    2c32:	1c03      	adds	r3, r0, #0
    2c34:	2201      	movs	r2, #1
    2c36:	4053      	eors	r3, r2
    2c38:	b2db      	uxtb	r3, r3
    2c3a:	2b00      	cmp	r3, #0
    2c3c:	d106      	bne.n	2c4c <udd_ctrl_in_sent+0x7c>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    2c3e:	4b17      	ldr	r3, [pc, #92]	; (2c9c <udd_ctrl_in_sent+0xcc>)
    2c40:	2200      	movs	r2, #0
    2c42:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    2c44:	1dbb      	adds	r3, r7, #6
    2c46:	4a14      	ldr	r2, [pc, #80]	; (2c98 <udd_ctrl_in_sent+0xc8>)
    2c48:	8992      	ldrh	r2, [r2, #12]
    2c4a:	801a      	strh	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    2c4c:	1dbb      	adds	r3, r7, #6
    2c4e:	881b      	ldrh	r3, [r3, #0]
    2c50:	2b3f      	cmp	r3, #63	; 0x3f
    2c52:	d906      	bls.n	2c62 <udd_ctrl_in_sent+0x92>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    2c54:	1dbb      	adds	r3, r7, #6
    2c56:	2240      	movs	r2, #64	; 0x40
    2c58:	801a      	strh	r2, [r3, #0]
		b_shortpacket = false;
    2c5a:	4b12      	ldr	r3, [pc, #72]	; (2ca4 <udd_ctrl_in_sent+0xd4>)
    2c5c:	2200      	movs	r2, #0
    2c5e:	701a      	strb	r2, [r3, #0]
    2c60:	e002      	b.n	2c68 <udd_ctrl_in_sent+0x98>
	} else {
		b_shortpacket = true;
    2c62:	4b10      	ldr	r3, [pc, #64]	; (2ca4 <udd_ctrl_in_sent+0xd4>)
    2c64:	2201      	movs	r2, #1
    2c66:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    2c68:	4b0b      	ldr	r3, [pc, #44]	; (2c98 <udd_ctrl_in_sent+0xc8>)
    2c6a:	689a      	ldr	r2, [r3, #8]
    2c6c:	4b0b      	ldr	r3, [pc, #44]	; (2c9c <udd_ctrl_in_sent+0xcc>)
    2c6e:	881b      	ldrh	r3, [r3, #0]
    2c70:	18d2      	adds	r2, r2, r3
    2c72:	1dbb      	adds	r3, r7, #6
    2c74:	881b      	ldrh	r3, [r3, #0]
    2c76:	490d      	ldr	r1, [pc, #52]	; (2cac <udd_ctrl_in_sent+0xdc>)
    2c78:	1c08      	adds	r0, r1, #0
    2c7a:	2100      	movs	r1, #0
    2c7c:	4c0e      	ldr	r4, [pc, #56]	; (2cb8 <udd_ctrl_in_sent+0xe8>)
    2c7e:	47a0      	blx	r4

	udd_ctrl_payload_nb_trans += nb_remain;
    2c80:	4b06      	ldr	r3, [pc, #24]	; (2c9c <udd_ctrl_in_sent+0xcc>)
    2c82:	881a      	ldrh	r2, [r3, #0]
    2c84:	1dbb      	adds	r3, r7, #6
    2c86:	881b      	ldrh	r3, [r3, #0]
    2c88:	18d3      	adds	r3, r2, r3
    2c8a:	b29a      	uxth	r2, r3
    2c8c:	4b03      	ldr	r3, [pc, #12]	; (2c9c <udd_ctrl_in_sent+0xcc>)
    2c8e:	801a      	strh	r2, [r3, #0]
}
    2c90:	46bd      	mov	sp, r7
    2c92:	b003      	add	sp, #12
    2c94:	bd90      	pop	{r4, r7, pc}
    2c96:	46c0      	nop			; (mov r8, r8)
    2c98:	20000c9c 	.word	0x20000c9c
    2c9c:	2000060a 	.word	0x2000060a
    2ca0:	20000608 	.word	0x20000608
    2ca4:	20000725 	.word	0x20000725
    2ca8:	20000606 	.word	0x20000606
    2cac:	20000b34 	.word	0x20000b34
    2cb0:	20000cb4 	.word	0x20000cb4
    2cb4:	000049b9 	.word	0x000049b9
    2cb8:	00004855 	.word	0x00004855

00002cbc <udd_ctrl_out_received>:
/**
 * \brief Process control endpoint OUT transaction
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_out_received(void* pointer)
{
    2cbc:	b590      	push	{r4, r7, lr}
    2cbe:	b085      	sub	sp, #20
    2cc0:	af00      	add	r7, sp, #0
    2cc2:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    2cc4:	687b      	ldr	r3, [r7, #4]
    2cc6:	60bb      	str	r3, [r7, #8]

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    2cc8:	1c3b      	adds	r3, r7, #0
    2cca:	330e      	adds	r3, #14
    2ccc:	68ba      	ldr	r2, [r7, #8]
    2cce:	8812      	ldrh	r2, [r2, #0]
    2cd0:	801a      	strh	r2, [r3, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    2cd2:	4b46      	ldr	r3, [pc, #280]	; (2dec <udd_ctrl_out_received+0x130>)
    2cd4:	899b      	ldrh	r3, [r3, #12]
    2cd6:	1c1a      	adds	r2, r3, #0
    2cd8:	4b45      	ldr	r3, [pc, #276]	; (2df0 <udd_ctrl_out_received+0x134>)
    2cda:	881b      	ldrh	r3, [r3, #0]
    2cdc:	1c19      	adds	r1, r3, #0
    2cde:	1c3b      	adds	r3, r7, #0
    2ce0:	330e      	adds	r3, #14
    2ce2:	881b      	ldrh	r3, [r3, #0]
    2ce4:	18cb      	adds	r3, r1, r3
    2ce6:	429a      	cmp	r2, r3
    2ce8:	da07      	bge.n	2cfa <udd_ctrl_out_received+0x3e>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    2cea:	4b40      	ldr	r3, [pc, #256]	; (2dec <udd_ctrl_out_received+0x130>)
    2cec:	8999      	ldrh	r1, [r3, #12]
    2cee:	4b40      	ldr	r3, [pc, #256]	; (2df0 <udd_ctrl_out_received+0x134>)
    2cf0:	881a      	ldrh	r2, [r3, #0]
    2cf2:	1c3b      	adds	r3, r7, #0
    2cf4:	330e      	adds	r3, #14
    2cf6:	1a8a      	subs	r2, r1, r2
    2cf8:	801a      	strh	r2, [r3, #0]
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    2cfa:	4b3c      	ldr	r3, [pc, #240]	; (2dec <udd_ctrl_out_received+0x130>)
    2cfc:	689a      	ldr	r2, [r3, #8]
    2cfe:	4b3c      	ldr	r3, [pc, #240]	; (2df0 <udd_ctrl_out_received+0x134>)
    2d00:	881b      	ldrh	r3, [r3, #0]
    2d02:	18d1      	adds	r1, r2, r3
    2d04:	1c3b      	adds	r3, r7, #0
    2d06:	330e      	adds	r3, #14
    2d08:	881b      	ldrh	r3, [r3, #0]
    2d0a:	4a3a      	ldr	r2, [pc, #232]	; (2df4 <udd_ctrl_out_received+0x138>)
    2d0c:	1c08      	adds	r0, r1, #0
    2d0e:	1c11      	adds	r1, r2, #0
    2d10:	1c1a      	adds	r2, r3, #0
    2d12:	4b39      	ldr	r3, [pc, #228]	; (2df8 <udd_ctrl_out_received+0x13c>)
    2d14:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    2d16:	4b36      	ldr	r3, [pc, #216]	; (2df0 <udd_ctrl_out_received+0x134>)
    2d18:	881a      	ldrh	r2, [r3, #0]
    2d1a:	1c3b      	adds	r3, r7, #0
    2d1c:	330e      	adds	r3, #14
    2d1e:	881b      	ldrh	r3, [r3, #0]
    2d20:	18d3      	adds	r3, r2, r3
    2d22:	b29a      	uxth	r2, r3
    2d24:	4b32      	ldr	r3, [pc, #200]	; (2df0 <udd_ctrl_out_received+0x134>)
    2d26:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2d28:	1c3b      	adds	r3, r7, #0
    2d2a:	330e      	adds	r3, #14
    2d2c:	881b      	ldrh	r3, [r3, #0]
    2d2e:	2b40      	cmp	r3, #64	; 0x40
    2d30:	d10a      	bne.n	2d48 <udd_ctrl_out_received+0x8c>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    2d32:	4b2e      	ldr	r3, [pc, #184]	; (2dec <udd_ctrl_out_received+0x130>)
    2d34:	88db      	ldrh	r3, [r3, #6]
    2d36:	1c1a      	adds	r2, r3, #0
    2d38:	4b30      	ldr	r3, [pc, #192]	; (2dfc <udd_ctrl_out_received+0x140>)
    2d3a:	881b      	ldrh	r3, [r3, #0]
    2d3c:	1c19      	adds	r1, r3, #0
    2d3e:	4b2c      	ldr	r3, [pc, #176]	; (2df0 <udd_ctrl_out_received+0x134>)
    2d40:	881b      	ldrh	r3, [r3, #0]
    2d42:	18cb      	adds	r3, r1, r3
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    2d44:	429a      	cmp	r2, r3
    2d46:	dc1a      	bgt.n	2d7e <udd_ctrl_out_received+0xc2>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    2d48:	4b29      	ldr	r3, [pc, #164]	; (2df0 <udd_ctrl_out_received+0x134>)
    2d4a:	881a      	ldrh	r2, [r3, #0]
    2d4c:	4b27      	ldr	r3, [pc, #156]	; (2dec <udd_ctrl_out_received+0x130>)
    2d4e:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    2d50:	4b26      	ldr	r3, [pc, #152]	; (2dec <udd_ctrl_out_received+0x130>)
    2d52:	695b      	ldr	r3, [r3, #20]
    2d54:	2b00      	cmp	r3, #0
    2d56:	d00f      	beq.n	2d78 <udd_ctrl_out_received+0xbc>
			if (!udd_g_ctrlreq.over_under_run()) {
    2d58:	4b24      	ldr	r3, [pc, #144]	; (2dec <udd_ctrl_out_received+0x130>)
    2d5a:	695b      	ldr	r3, [r3, #20]
    2d5c:	4798      	blx	r3
    2d5e:	1c03      	adds	r3, r0, #0
    2d60:	2201      	movs	r2, #1
    2d62:	4053      	eors	r3, r2
    2d64:	b2db      	uxtb	r3, r3
    2d66:	2b00      	cmp	r3, #0
    2d68:	d006      	beq.n	2d78 <udd_ctrl_out_received+0xbc>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2d6a:	4b25      	ldr	r3, [pc, #148]	; (2e00 <udd_ctrl_out_received+0x144>)
    2d6c:	2205      	movs	r2, #5
    2d6e:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    2d70:	2000      	movs	r0, #0
    2d72:	4b24      	ldr	r3, [pc, #144]	; (2e04 <udd_ctrl_out_received+0x148>)
    2d74:	4798      	blx	r3
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
    2d76:	e036      	b.n	2de6 <udd_ctrl_out_received+0x12a>
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    2d78:	4b23      	ldr	r3, [pc, #140]	; (2e08 <udd_ctrl_out_received+0x14c>)
    2d7a:	4798      	blx	r3
		return;
    2d7c:	e033      	b.n	2de6 <udd_ctrl_out_received+0x12a>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    2d7e:	4b1b      	ldr	r3, [pc, #108]	; (2dec <udd_ctrl_out_received+0x130>)
    2d80:	899a      	ldrh	r2, [r3, #12]
    2d82:	4b1b      	ldr	r3, [pc, #108]	; (2df0 <udd_ctrl_out_received+0x134>)
    2d84:	881b      	ldrh	r3, [r3, #0]
    2d86:	429a      	cmp	r2, r3
    2d88:	d125      	bne.n	2dd6 <udd_ctrl_out_received+0x11a>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    2d8a:	4b18      	ldr	r3, [pc, #96]	; (2dec <udd_ctrl_out_received+0x130>)
    2d8c:	695b      	ldr	r3, [r3, #20]
    2d8e:	2b00      	cmp	r3, #0
    2d90:	d106      	bne.n	2da0 <udd_ctrl_out_received+0xe4>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2d92:	4b1b      	ldr	r3, [pc, #108]	; (2e00 <udd_ctrl_out_received+0x144>)
    2d94:	2205      	movs	r2, #5
    2d96:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    2d98:	2000      	movs	r0, #0
    2d9a:	4b1a      	ldr	r3, [pc, #104]	; (2e04 <udd_ctrl_out_received+0x148>)
    2d9c:	4798      	blx	r3
			return;
    2d9e:	e022      	b.n	2de6 <udd_ctrl_out_received+0x12a>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    2da0:	4b12      	ldr	r3, [pc, #72]	; (2dec <udd_ctrl_out_received+0x130>)
    2da2:	695b      	ldr	r3, [r3, #20]
    2da4:	4798      	blx	r3
    2da6:	1c03      	adds	r3, r0, #0
    2da8:	2201      	movs	r2, #1
    2daa:	4053      	eors	r3, r2
    2dac:	b2db      	uxtb	r3, r3
    2dae:	2b00      	cmp	r3, #0
    2db0:	d006      	beq.n	2dc0 <udd_ctrl_out_received+0x104>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    2db2:	4b13      	ldr	r3, [pc, #76]	; (2e00 <udd_ctrl_out_received+0x144>)
    2db4:	2205      	movs	r2, #5
    2db6:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    2db8:	2000      	movs	r0, #0
    2dba:	4b12      	ldr	r3, [pc, #72]	; (2e04 <udd_ctrl_out_received+0x148>)
    2dbc:	4798      	blx	r3
			return;
    2dbe:	e012      	b.n	2de6 <udd_ctrl_out_received+0x12a>
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    2dc0:	4b0e      	ldr	r3, [pc, #56]	; (2dfc <udd_ctrl_out_received+0x140>)
    2dc2:	881a      	ldrh	r2, [r3, #0]
    2dc4:	4b0a      	ldr	r3, [pc, #40]	; (2df0 <udd_ctrl_out_received+0x134>)
    2dc6:	881b      	ldrh	r3, [r3, #0]
    2dc8:	18d3      	adds	r3, r2, r3
    2dca:	b29a      	uxth	r2, r3
    2dcc:	4b0b      	ldr	r3, [pc, #44]	; (2dfc <udd_ctrl_out_received+0x140>)
    2dce:	801a      	strh	r2, [r3, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    2dd0:	4b07      	ldr	r3, [pc, #28]	; (2df0 <udd_ctrl_out_received+0x134>)
    2dd2:	2200      	movs	r2, #0
    2dd4:	801a      	strh	r2, [r3, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2dd6:	4a0d      	ldr	r2, [pc, #52]	; (2e0c <udd_ctrl_out_received+0x150>)
    2dd8:	4b06      	ldr	r3, [pc, #24]	; (2df4 <udd_ctrl_out_received+0x138>)
    2dda:	1c10      	adds	r0, r2, #0
    2ddc:	2100      	movs	r1, #0
    2dde:	1c1a      	adds	r2, r3, #0
    2de0:	2340      	movs	r3, #64	; 0x40
    2de2:	4c0b      	ldr	r4, [pc, #44]	; (2e10 <udd_ctrl_out_received+0x154>)
    2de4:	47a0      	blx	r4
}
    2de6:	46bd      	mov	sp, r7
    2de8:	b005      	add	sp, #20
    2dea:	bd90      	pop	{r4, r7, pc}
    2dec:	20000c9c 	.word	0x20000c9c
    2df0:	2000060a 	.word	0x2000060a
    2df4:	20000cb4 	.word	0x20000cb4
    2df8:	00006781 	.word	0x00006781
    2dfc:	20000608 	.word	0x20000608
    2e00:	20000606 	.word	0x20000606
    2e04:	000026e1 	.word	0x000026e1
    2e08:	00002b8d 	.word	0x00002b8d
    2e0c:	20000b34 	.word	0x20000b34
    2e10:	0000490d 	.word	0x0000490d

00002e14 <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    2e14:	b590      	push	{r4, r7, lr}
    2e16:	b085      	sub	sp, #20
    2e18:	af00      	add	r7, sp, #0
    2e1a:	6078      	str	r0, [r7, #4]
    2e1c:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    2e1e:	683b      	ldr	r3, [r7, #0]
    2e20:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    2e22:	4b2b      	ldr	r3, [pc, #172]	; (2ed0 <_usb_ep0_on_setup+0xbc>)
    2e24:	781b      	ldrb	r3, [r3, #0]
    2e26:	2b00      	cmp	r3, #0
    2e28:	d009      	beq.n	2e3e <_usb_ep0_on_setup+0x2a>
		if (NULL != udd_g_ctrlreq.callback) {
    2e2a:	4b2a      	ldr	r3, [pc, #168]	; (2ed4 <_usb_ep0_on_setup+0xc0>)
    2e2c:	691b      	ldr	r3, [r3, #16]
    2e2e:	2b00      	cmp	r3, #0
    2e30:	d002      	beq.n	2e38 <_usb_ep0_on_setup+0x24>
			udd_g_ctrlreq.callback();
    2e32:	4b28      	ldr	r3, [pc, #160]	; (2ed4 <_usb_ep0_on_setup+0xc0>)
    2e34:	691b      	ldr	r3, [r3, #16]
    2e36:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    2e38:	4b25      	ldr	r3, [pc, #148]	; (2ed0 <_usb_ep0_on_setup+0xbc>)
    2e3a:	2200      	movs	r2, #0
    2e3c:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    2e3e:	68fb      	ldr	r3, [r7, #12]
    2e40:	881b      	ldrh	r3, [r3, #0]
    2e42:	2b08      	cmp	r3, #8
    2e44:	d002      	beq.n	2e4c <_usb_ep0_on_setup+0x38>
		udd_ctrl_stall_data();
    2e46:	4b24      	ldr	r3, [pc, #144]	; (2ed8 <_usb_ep0_on_setup+0xc4>)
    2e48:	4798      	blx	r3
		return;
    2e4a:	e03e      	b.n	2eca <_usb_ep0_on_setup+0xb6>
	} else {
		udd_ctrl_fetch_ram();
    2e4c:	4b23      	ldr	r3, [pc, #140]	; (2edc <_usb_ep0_on_setup+0xc8>)
    2e4e:	4798      	blx	r3
		if (false == udc_process_setup()) {
    2e50:	4b23      	ldr	r3, [pc, #140]	; (2ee0 <_usb_ep0_on_setup+0xcc>)
    2e52:	4798      	blx	r3
    2e54:	1c03      	adds	r3, r0, #0
    2e56:	2201      	movs	r2, #1
    2e58:	4053      	eors	r3, r2
    2e5a:	b2db      	uxtb	r3, r3
    2e5c:	2b00      	cmp	r3, #0
    2e5e:	d002      	beq.n	2e66 <_usb_ep0_on_setup+0x52>
			udd_ctrl_stall_data();
    2e60:	4b1d      	ldr	r3, [pc, #116]	; (2ed8 <_usb_ep0_on_setup+0xc4>)
    2e62:	4798      	blx	r3
			return;
    2e64:	e031      	b.n	2eca <_usb_ep0_on_setup+0xb6>
		} else if (Udd_setup_is_in()) {
    2e66:	4b1b      	ldr	r3, [pc, #108]	; (2ed4 <_usb_ep0_on_setup+0xc0>)
    2e68:	781b      	ldrb	r3, [r3, #0]
    2e6a:	b2db      	uxtb	r3, r3
    2e6c:	b25b      	sxtb	r3, r3
    2e6e:	2b00      	cmp	r3, #0
    2e70:	da13      	bge.n	2e9a <_usb_ep0_on_setup+0x86>
			udd_ctrl_prev_payload_nb_trans = 0;
    2e72:	4b1c      	ldr	r3, [pc, #112]	; (2ee4 <_usb_ep0_on_setup+0xd0>)
    2e74:	2200      	movs	r2, #0
    2e76:	801a      	strh	r2, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    2e78:	4b1b      	ldr	r3, [pc, #108]	; (2ee8 <_usb_ep0_on_setup+0xd4>)
    2e7a:	2200      	movs	r2, #0
    2e7c:	801a      	strh	r2, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    2e7e:	4b14      	ldr	r3, [pc, #80]	; (2ed0 <_usb_ep0_on_setup+0xbc>)
    2e80:	2202      	movs	r2, #2
    2e82:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2e84:	4a19      	ldr	r2, [pc, #100]	; (2eec <_usb_ep0_on_setup+0xd8>)
    2e86:	4b1a      	ldr	r3, [pc, #104]	; (2ef0 <_usb_ep0_on_setup+0xdc>)
    2e88:	1c10      	adds	r0, r2, #0
    2e8a:	2100      	movs	r1, #0
    2e8c:	1c1a      	adds	r2, r3, #0
    2e8e:	2340      	movs	r3, #64	; 0x40
    2e90:	4c18      	ldr	r4, [pc, #96]	; (2ef4 <_usb_ep0_on_setup+0xe0>)
    2e92:	47a0      	blx	r4
			udd_ctrl_in_sent();
    2e94:	4b18      	ldr	r3, [pc, #96]	; (2ef8 <_usb_ep0_on_setup+0xe4>)
    2e96:	4798      	blx	r3
    2e98:	e017      	b.n	2eca <_usb_ep0_on_setup+0xb6>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    2e9a:	4b0e      	ldr	r3, [pc, #56]	; (2ed4 <_usb_ep0_on_setup+0xc0>)
    2e9c:	88db      	ldrh	r3, [r3, #6]
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	d102      	bne.n	2ea8 <_usb_ep0_on_setup+0x94>
				udd_ctrl_send_zlp_in();
    2ea2:	4b16      	ldr	r3, [pc, #88]	; (2efc <_usb_ep0_on_setup+0xe8>)
    2ea4:	4798      	blx	r3
				return;
    2ea6:	e010      	b.n	2eca <_usb_ep0_on_setup+0xb6>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    2ea8:	4b0e      	ldr	r3, [pc, #56]	; (2ee4 <_usb_ep0_on_setup+0xd0>)
    2eaa:	2200      	movs	r2, #0
    2eac:	801a      	strh	r2, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    2eae:	4b0e      	ldr	r3, [pc, #56]	; (2ee8 <_usb_ep0_on_setup+0xd4>)
    2eb0:	2200      	movs	r2, #0
    2eb2:	801a      	strh	r2, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    2eb4:	4b06      	ldr	r3, [pc, #24]	; (2ed0 <_usb_ep0_on_setup+0xbc>)
    2eb6:	2201      	movs	r2, #1
    2eb8:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    2eba:	4a0c      	ldr	r2, [pc, #48]	; (2eec <_usb_ep0_on_setup+0xd8>)
    2ebc:	4b0c      	ldr	r3, [pc, #48]	; (2ef0 <_usb_ep0_on_setup+0xdc>)
    2ebe:	1c10      	adds	r0, r2, #0
    2ec0:	2100      	movs	r1, #0
    2ec2:	1c1a      	adds	r2, r3, #0
    2ec4:	2340      	movs	r3, #64	; 0x40
    2ec6:	4c0b      	ldr	r4, [pc, #44]	; (2ef4 <_usb_ep0_on_setup+0xe0>)
    2ec8:	47a0      	blx	r4
			}
		}
	}
}
    2eca:	46bd      	mov	sp, r7
    2ecc:	b005      	add	sp, #20
    2ece:	bd90      	pop	{r4, r7, pc}
    2ed0:	20000606 	.word	0x20000606
    2ed4:	20000c9c 	.word	0x20000c9c
    2ed8:	000027b1 	.word	0x000027b1
    2edc:	00002b31 	.word	0x00002b31
    2ee0:	00001b09 	.word	0x00001b09
    2ee4:	20000608 	.word	0x20000608
    2ee8:	2000060a 	.word	0x2000060a
    2eec:	20000b34 	.word	0x20000b34
    2ef0:	20000cb4 	.word	0x20000cb4
    2ef4:	0000490d 	.word	0x0000490d
    2ef8:	00002bd1 	.word	0x00002bd1
    2efc:	00002b8d 	.word	0x00002b8d

00002f00 <udd_ctrl_underflow>:
/**
 * \brief Control Endpoint Process when underflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_underflow(void* pointer)
{
    2f00:	b580      	push	{r7, lr}
    2f02:	b084      	sub	sp, #16
    2f04:	af00      	add	r7, sp, #0
    2f06:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    2f08:	687b      	ldr	r3, [r7, #4]
    2f0a:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    2f0c:	4b0a      	ldr	r3, [pc, #40]	; (2f38 <udd_ctrl_underflow+0x38>)
    2f0e:	781b      	ldrb	r3, [r3, #0]
    2f10:	2b01      	cmp	r3, #1
    2f12:	d102      	bne.n	2f1a <udd_ctrl_underflow+0x1a>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    2f14:	4b09      	ldr	r3, [pc, #36]	; (2f3c <udd_ctrl_underflow+0x3c>)
    2f16:	4798      	blx	r3
    2f18:	e00a      	b.n	2f30 <udd_ctrl_underflow+0x30>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    2f1a:	4b07      	ldr	r3, [pc, #28]	; (2f38 <udd_ctrl_underflow+0x38>)
    2f1c:	781b      	ldrb	r3, [r3, #0]
    2f1e:	2b04      	cmp	r3, #4
    2f20:	d106      	bne.n	2f30 <udd_ctrl_underflow+0x30>
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2f22:	68fb      	ldr	r3, [r7, #12]
    2f24:	799b      	ldrb	r3, [r3, #6]
    2f26:	4a06      	ldr	r2, [pc, #24]	; (2f40 <udd_ctrl_underflow+0x40>)
    2f28:	1c10      	adds	r0, r2, #0
    2f2a:	1c19      	adds	r1, r3, #0
    2f2c:	4b05      	ldr	r3, [pc, #20]	; (2f44 <udd_ctrl_underflow+0x44>)
    2f2e:	4798      	blx	r3
	}
}
    2f30:	46bd      	mov	sp, r7
    2f32:	b004      	add	sp, #16
    2f34:	bd80      	pop	{r7, pc}
    2f36:	46c0      	nop			; (mov r8, r8)
    2f38:	20000606 	.word	0x20000606
    2f3c:	00002b8d 	.word	0x00002b8d
    2f40:	20000b34 	.word	0x20000b34
    2f44:	000046e5 	.word	0x000046e5

00002f48 <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    2f48:	b580      	push	{r7, lr}
    2f4a:	b084      	sub	sp, #16
    2f4c:	af00      	add	r7, sp, #0
    2f4e:	6078      	str	r0, [r7, #4]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    2f50:	687b      	ldr	r3, [r7, #4]
    2f52:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    2f54:	4b0a      	ldr	r3, [pc, #40]	; (2f80 <udd_ctrl_overflow+0x38>)
    2f56:	781b      	ldrb	r3, [r3, #0]
    2f58:	2b02      	cmp	r3, #2
    2f5a:	d103      	bne.n	2f64 <udd_ctrl_overflow+0x1c>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    2f5c:	4b08      	ldr	r3, [pc, #32]	; (2f80 <udd_ctrl_overflow+0x38>)
    2f5e:	2204      	movs	r2, #4
    2f60:	701a      	strb	r2, [r3, #0]
    2f62:	e00a      	b.n	2f7a <udd_ctrl_overflow+0x32>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    2f64:	4b06      	ldr	r3, [pc, #24]	; (2f80 <udd_ctrl_overflow+0x38>)
    2f66:	781b      	ldrb	r3, [r3, #0]
    2f68:	2b03      	cmp	r3, #3
    2f6a:	d106      	bne.n	2f7a <udd_ctrl_overflow+0x32>
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    2f6c:	68fb      	ldr	r3, [r7, #12]
    2f6e:	799b      	ldrb	r3, [r3, #6]
    2f70:	4a04      	ldr	r2, [pc, #16]	; (2f84 <udd_ctrl_overflow+0x3c>)
    2f72:	1c10      	adds	r0, r2, #0
    2f74:	1c19      	adds	r1, r3, #0
    2f76:	4b04      	ldr	r3, [pc, #16]	; (2f88 <udd_ctrl_overflow+0x40>)
    2f78:	4798      	blx	r3
	}
}
    2f7a:	46bd      	mov	sp, r7
    2f7c:	b004      	add	sp, #16
    2f7e:	bd80      	pop	{r7, pc}
    2f80:	20000606 	.word	0x20000606
    2f84:	20000b34 	.word	0x20000b34
    2f88:	000046e5 	.word	0x000046e5

00002f8c <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    2f8c:	b580      	push	{r7, lr}
    2f8e:	b084      	sub	sp, #16
    2f90:	af00      	add	r7, sp, #0
    2f92:	6078      	str	r0, [r7, #4]
    2f94:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    2f96:	683b      	ldr	r3, [r7, #0]
    2f98:	60fb      	str	r3, [r7, #12]

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    2f9a:	68fb      	ldr	r3, [r7, #12]
    2f9c:	799b      	ldrb	r3, [r3, #6]
    2f9e:	b2db      	uxtb	r3, r3
    2fa0:	b25b      	sxtb	r3, r3
    2fa2:	2b00      	cmp	r3, #0
    2fa4:	da04      	bge.n	2fb0 <_usb_ep0_on_tansfer_fail+0x24>
		udd_ctrl_underflow(pointer);
    2fa6:	683b      	ldr	r3, [r7, #0]
    2fa8:	1c18      	adds	r0, r3, #0
    2faa:	4b05      	ldr	r3, [pc, #20]	; (2fc0 <_usb_ep0_on_tansfer_fail+0x34>)
    2fac:	4798      	blx	r3
    2fae:	e003      	b.n	2fb8 <_usb_ep0_on_tansfer_fail+0x2c>
	} else {
		udd_ctrl_overflow(pointer);
    2fb0:	683b      	ldr	r3, [r7, #0]
    2fb2:	1c18      	adds	r0, r3, #0
    2fb4:	4b03      	ldr	r3, [pc, #12]	; (2fc4 <_usb_ep0_on_tansfer_fail+0x38>)
    2fb6:	4798      	blx	r3
	}
}
    2fb8:	46bd      	mov	sp, r7
    2fba:	b004      	add	sp, #16
    2fbc:	bd80      	pop	{r7, pc}
    2fbe:	46c0      	nop			; (mov r8, r8)
    2fc0:	00002f01 	.word	0x00002f01
    2fc4:	00002f49 	.word	0x00002f49

00002fc8 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    2fc8:	b580      	push	{r7, lr}
    2fca:	b082      	sub	sp, #8
    2fcc:	af00      	add	r7, sp, #0
    2fce:	6078      	str	r0, [r7, #4]
    2fd0:	6039      	str	r1, [r7, #0]
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    2fd2:	4b0e      	ldr	r3, [pc, #56]	; (300c <_usb_ep0_on_tansfer_ok+0x44>)
    2fd4:	781b      	ldrb	r3, [r3, #0]
    2fd6:	2b01      	cmp	r3, #1
    2fd8:	d104      	bne.n	2fe4 <_usb_ep0_on_tansfer_ok+0x1c>
			udd_ctrl_out_received(pointer);
    2fda:	683b      	ldr	r3, [r7, #0]
    2fdc:	1c18      	adds	r0, r3, #0
    2fde:	4b0c      	ldr	r3, [pc, #48]	; (3010 <_usb_ep0_on_tansfer_ok+0x48>)
    2fe0:	4798      	blx	r3
    2fe2:	e010      	b.n	3006 <_usb_ep0_on_tansfer_ok+0x3e>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    2fe4:	4b09      	ldr	r3, [pc, #36]	; (300c <_usb_ep0_on_tansfer_ok+0x44>)
    2fe6:	781b      	ldrb	r3, [r3, #0]
    2fe8:	2b02      	cmp	r3, #2
    2fea:	d102      	bne.n	2ff2 <_usb_ep0_on_tansfer_ok+0x2a>
			udd_ctrl_in_sent();
    2fec:	4b09      	ldr	r3, [pc, #36]	; (3014 <_usb_ep0_on_tansfer_ok+0x4c>)
    2fee:	4798      	blx	r3
    2ff0:	e009      	b.n	3006 <_usb_ep0_on_tansfer_ok+0x3e>
		} else {
			if (NULL != udd_g_ctrlreq.callback) {
    2ff2:	4b09      	ldr	r3, [pc, #36]	; (3018 <_usb_ep0_on_tansfer_ok+0x50>)
    2ff4:	691b      	ldr	r3, [r3, #16]
    2ff6:	2b00      	cmp	r3, #0
    2ff8:	d002      	beq.n	3000 <_usb_ep0_on_tansfer_ok+0x38>
				udd_g_ctrlreq.callback();
    2ffa:	4b07      	ldr	r3, [pc, #28]	; (3018 <_usb_ep0_on_tansfer_ok+0x50>)
    2ffc:	691b      	ldr	r3, [r3, #16]
    2ffe:	4798      	blx	r3
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    3000:	4b02      	ldr	r3, [pc, #8]	; (300c <_usb_ep0_on_tansfer_ok+0x44>)
    3002:	2200      	movs	r2, #0
    3004:	701a      	strb	r2, [r3, #0]
		}
}
    3006:	46bd      	mov	sp, r7
    3008:	b002      	add	sp, #8
    300a:	bd80      	pop	{r7, pc}
    300c:	20000606 	.word	0x20000606
    3010:	00002cbd 	.word	0x00002cbd
    3014:	00002bd1 	.word	0x00002bd1
    3018:	20000c9c 	.word	0x20000c9c

0000301c <udd_ctrl_ep_enable>:
/**
 * \brief Enable Control Endpoint
 * \param[in] module_inst Pointer to USB module instance
 */
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
    301c:	b590      	push	{r4, r7, lr}
    301e:	b085      	sub	sp, #20
    3020:	af00      	add	r7, sp, #0
    3022:	6078      	str	r0, [r7, #4]
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    3024:	1c3b      	adds	r3, r7, #0
    3026:	330c      	adds	r3, #12
    3028:	1c18      	adds	r0, r3, #0
    302a:	4b22      	ldr	r3, [pc, #136]	; (30b4 <udd_ctrl_ep_enable+0x98>)
    302c:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    302e:	1c3b      	adds	r3, r7, #0
    3030:	330c      	adds	r3, #12
    3032:	2203      	movs	r2, #3
    3034:	705a      	strb	r2, [r3, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    3036:	687a      	ldr	r2, [r7, #4]
    3038:	1c3b      	adds	r3, r7, #0
    303a:	330c      	adds	r3, #12
    303c:	1c10      	adds	r0, r2, #0
    303e:	1c19      	adds	r1, r3, #0
    3040:	4b1d      	ldr	r3, [pc, #116]	; (30b8 <udd_ctrl_ep_enable+0x9c>)
    3042:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    3044:	687a      	ldr	r2, [r7, #4]
    3046:	4b1d      	ldr	r3, [pc, #116]	; (30bc <udd_ctrl_ep_enable+0xa0>)
    3048:	1c10      	adds	r0, r2, #0
    304a:	1c19      	adds	r1, r3, #0
    304c:	4b1c      	ldr	r3, [pc, #112]	; (30c0 <udd_ctrl_ep_enable+0xa4>)
    304e:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    3050:	687a      	ldr	r2, [r7, #4]
    3052:	4b1c      	ldr	r3, [pc, #112]	; (30c4 <udd_ctrl_ep_enable+0xa8>)
    3054:	1c10      	adds	r0, r2, #0
    3056:	2100      	movs	r1, #0
    3058:	2202      	movs	r2, #2
    305a:	4c1b      	ldr	r4, [pc, #108]	; (30c8 <udd_ctrl_ep_enable+0xac>)
    305c:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    305e:	687a      	ldr	r2, [r7, #4]
    3060:	4b1a      	ldr	r3, [pc, #104]	; (30cc <udd_ctrl_ep_enable+0xb0>)
    3062:	1c10      	adds	r0, r2, #0
    3064:	2100      	movs	r1, #0
    3066:	2200      	movs	r2, #0
    3068:	4c17      	ldr	r4, [pc, #92]	; (30c8 <udd_ctrl_ep_enable+0xac>)
    306a:	47a0      	blx	r4
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    306c:	687a      	ldr	r2, [r7, #4]
    306e:	4b18      	ldr	r3, [pc, #96]	; (30d0 <udd_ctrl_ep_enable+0xb4>)
    3070:	1c10      	adds	r0, r2, #0
    3072:	2100      	movs	r1, #0
    3074:	2201      	movs	r2, #1
    3076:	4c14      	ldr	r4, [pc, #80]	; (30c8 <udd_ctrl_ep_enable+0xac>)
    3078:	47a0      	blx	r4
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    307a:	687b      	ldr	r3, [r7, #4]
    307c:	1c18      	adds	r0, r3, #0
    307e:	2100      	movs	r1, #0
    3080:	2202      	movs	r2, #2
    3082:	4b14      	ldr	r3, [pc, #80]	; (30d4 <udd_ctrl_ep_enable+0xb8>)
    3084:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    3086:	687b      	ldr	r3, [r7, #4]
    3088:	1c18      	adds	r0, r3, #0
    308a:	2100      	movs	r1, #0
    308c:	2200      	movs	r2, #0
    308e:	4b11      	ldr	r3, [pc, #68]	; (30d4 <udd_ctrl_ep_enable+0xb8>)
    3090:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    3092:	687b      	ldr	r3, [r7, #4]
    3094:	1c18      	adds	r0, r3, #0
    3096:	2100      	movs	r1, #0
    3098:	2201      	movs	r2, #1
    309a:	4b0e      	ldr	r3, [pc, #56]	; (30d4 <udd_ctrl_ep_enable+0xb8>)
    309c:	4798      	blx	r3

#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
    309e:	687b      	ldr	r3, [r7, #4]
    30a0:	1c18      	adds	r0, r3, #0
    30a2:	2101      	movs	r1, #1
    30a4:	4b0c      	ldr	r3, [pc, #48]	; (30d8 <udd_ctrl_ep_enable+0xbc>)
    30a6:	4798      	blx	r3
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    30a8:	4b0c      	ldr	r3, [pc, #48]	; (30dc <udd_ctrl_ep_enable+0xc0>)
    30aa:	2200      	movs	r2, #0
    30ac:	701a      	strb	r2, [r3, #0]
}
    30ae:	46bd      	mov	sp, r7
    30b0:	b005      	add	sp, #20
    30b2:	bd90      	pop	{r4, r7, pc}
    30b4:	000040f9 	.word	0x000040f9
    30b8:	00004121 	.word	0x00004121
    30bc:	20000cb4 	.word	0x20000cb4
    30c0:	000049b9 	.word	0x000049b9
    30c4:	00002e15 	.word	0x00002e15
    30c8:	00003ced 	.word	0x00003ced
    30cc:	00002fc9 	.word	0x00002fc9
    30d0:	00002f8d 	.word	0x00002f8d
    30d4:	00003dcd 	.word	0x00003dcd
    30d8:	00001ea1 	.word	0x00001ea1
    30dc:	20000606 	.word	0x20000606

000030e0 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    30e0:	b580      	push	{r7, lr}
    30e2:	b082      	sub	sp, #8
    30e4:	af00      	add	r7, sp, #0
    30e6:	6078      	str	r0, [r7, #4]
    30e8:	6039      	str	r1, [r7, #0]
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    30ea:	4b09      	ldr	r3, [pc, #36]	; (3110 <_usb_on_suspend+0x30>)
    30ec:	1c18      	adds	r0, r3, #0
    30ee:	2104      	movs	r1, #4
    30f0:	4b08      	ldr	r3, [pc, #32]	; (3114 <_usb_on_suspend+0x34>)
    30f2:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    30f4:	4b06      	ldr	r3, [pc, #24]	; (3110 <_usb_on_suspend+0x30>)
    30f6:	1c18      	adds	r0, r3, #0
    30f8:	2102      	movs	r1, #2
    30fa:	4b07      	ldr	r3, [pc, #28]	; (3118 <_usb_on_suspend+0x38>)
    30fc:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    30fe:	2001      	movs	r0, #1
    3100:	4b06      	ldr	r3, [pc, #24]	; (311c <_usb_on_suspend+0x3c>)
    3102:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
    3104:	4b06      	ldr	r3, [pc, #24]	; (3120 <_usb_on_suspend+0x40>)
    3106:	4798      	blx	r3
#endif
}
    3108:	46bd      	mov	sp, r7
    310a:	b002      	add	sp, #8
    310c:	bd80      	pop	{r7, pc}
    310e:	46c0      	nop			; (mov r8, r8)
    3110:	20000b34 	.word	0x20000b34
    3114:	00003c99 	.word	0x00003c99
    3118:	00003c3d 	.word	0x00003c3d
    311c:	00001fa9 	.word	0x00001fa9
    3120:	0000335d 	.word	0x0000335d

00003124 <_usb_device_lpm_suspend>:

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    3124:	b580      	push	{r7, lr}
    3126:	b084      	sub	sp, #16
    3128:	af00      	add	r7, sp, #0
    312a:	6078      	str	r0, [r7, #4]
    312c:	6039      	str	r1, [r7, #0]
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;
    312e:	683b      	ldr	r3, [r7, #0]
    3130:	60fb      	str	r3, [r7, #12]

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    3132:	4b0a      	ldr	r3, [pc, #40]	; (315c <_usb_device_lpm_suspend+0x38>)
    3134:	1c18      	adds	r0, r3, #0
    3136:	2106      	movs	r1, #6
    3138:	4b09      	ldr	r3, [pc, #36]	; (3160 <_usb_device_lpm_suspend+0x3c>)
    313a:	4798      	blx	r3
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    313c:	4b07      	ldr	r3, [pc, #28]	; (315c <_usb_device_lpm_suspend+0x38>)
    313e:	1c18      	adds	r0, r3, #0
    3140:	2104      	movs	r1, #4
    3142:	4b07      	ldr	r3, [pc, #28]	; (3160 <_usb_device_lpm_suspend+0x3c>)
    3144:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3146:	4b05      	ldr	r3, [pc, #20]	; (315c <_usb_device_lpm_suspend+0x38>)
    3148:	1c18      	adds	r0, r3, #0
    314a:	2102      	movs	r1, #2
    314c:	4b05      	ldr	r3, [pc, #20]	; (3164 <_usb_device_lpm_suspend+0x40>)
    314e:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    3150:	2002      	movs	r0, #2
    3152:	4b05      	ldr	r3, [pc, #20]	; (3168 <_usb_device_lpm_suspend+0x44>)
    3154:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    3156:	46bd      	mov	sp, r7
    3158:	b004      	add	sp, #16
    315a:	bd80      	pop	{r7, pc}
    315c:	20000b34 	.word	0x20000b34
    3160:	00003c99 	.word	0x00003c99
    3164:	00003c3d 	.word	0x00003c3d
    3168:	00001fa9 	.word	0x00001fa9

0000316c <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    316c:	b580      	push	{r7, lr}
    316e:	b082      	sub	sp, #8
    3170:	af00      	add	r7, sp, #0
    3172:	6078      	str	r0, [r7, #4]
    3174:	6039      	str	r1, [r7, #0]
	udc_sof_notify();
    3176:	4b03      	ldr	r3, [pc, #12]	; (3184 <_usb_on_sof_notify+0x18>)
    3178:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
    317a:	4b03      	ldr	r3, [pc, #12]	; (3188 <_usb_on_sof_notify+0x1c>)
    317c:	4798      	blx	r3
#endif
}
    317e:	46bd      	mov	sp, r7
    3180:	b002      	add	sp, #8
    3182:	bd80      	pop	{r7, pc}
    3184:	00001225 	.word	0x00001225
    3188:	0000336d 	.word	0x0000336d

0000318c <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    318c:	b580      	push	{r7, lr}
    318e:	b082      	sub	sp, #8
    3190:	af00      	add	r7, sp, #0
    3192:	6078      	str	r0, [r7, #4]
    3194:	6039      	str	r1, [r7, #0]
	// Reset USB Device Stack Core
	udc_reset();
    3196:	4b07      	ldr	r3, [pc, #28]	; (31b4 <_usb_on_bus_reset+0x28>)
    3198:	4798      	blx	r3
	usb_device_set_address(module_inst,0);
    319a:	687b      	ldr	r3, [r7, #4]
    319c:	1c18      	adds	r0, r3, #0
    319e:	2100      	movs	r1, #0
    31a0:	4b05      	ldr	r3, [pc, #20]	; (31b8 <_usb_on_bus_reset+0x2c>)
    31a2:	4798      	blx	r3
	udd_ctrl_ep_enable(module_inst);
    31a4:	687b      	ldr	r3, [r7, #4]
    31a6:	1c18      	adds	r0, r3, #0
    31a8:	4b04      	ldr	r3, [pc, #16]	; (31bc <_usb_on_bus_reset+0x30>)
    31aa:	4798      	blx	r3
}
    31ac:	46bd      	mov	sp, r7
    31ae:	b002      	add	sp, #8
    31b0:	bd80      	pop	{r7, pc}
    31b2:	46c0      	nop			; (mov r8, r8)
    31b4:	000011b1 	.word	0x000011b1
    31b8:	00001e79 	.word	0x00001e79
    31bc:	0000301d 	.word	0x0000301d

000031c0 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    31c0:	b580      	push	{r7, lr}
    31c2:	b082      	sub	sp, #8
    31c4:	af00      	add	r7, sp, #0
    31c6:	6078      	str	r0, [r7, #4]
    31c8:	6039      	str	r1, [r7, #0]
	udd_wait_clock_ready();
    31ca:	4b10      	ldr	r3, [pc, #64]	; (320c <_usb_on_wakeup+0x4c>)
    31cc:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    31ce:	4b10      	ldr	r3, [pc, #64]	; (3210 <_usb_on_wakeup+0x50>)
    31d0:	1c18      	adds	r0, r3, #0
    31d2:	2102      	movs	r1, #2
    31d4:	4b0f      	ldr	r3, [pc, #60]	; (3214 <_usb_on_wakeup+0x54>)
    31d6:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    31d8:	4b0d      	ldr	r3, [pc, #52]	; (3210 <_usb_on_wakeup+0x50>)
    31da:	1c18      	adds	r0, r3, #0
    31dc:	2104      	movs	r1, #4
    31de:	4b0e      	ldr	r3, [pc, #56]	; (3218 <_usb_on_wakeup+0x58>)
    31e0:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    31e2:	4a0b      	ldr	r2, [pc, #44]	; (3210 <_usb_on_wakeup+0x50>)
    31e4:	4b0d      	ldr	r3, [pc, #52]	; (321c <_usb_on_wakeup+0x5c>)
    31e6:	1c10      	adds	r0, r2, #0
    31e8:	2106      	movs	r1, #6
    31ea:	1c1a      	adds	r2, r3, #0
    31ec:	4b0c      	ldr	r3, [pc, #48]	; (3220 <_usb_on_wakeup+0x60>)
    31ee:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    31f0:	4b07      	ldr	r3, [pc, #28]	; (3210 <_usb_on_wakeup+0x50>)
    31f2:	1c18      	adds	r0, r3, #0
    31f4:	2106      	movs	r1, #6
    31f6:	4b08      	ldr	r3, [pc, #32]	; (3218 <_usb_on_wakeup+0x58>)
    31f8:	4798      	blx	r3
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    31fa:	2003      	movs	r0, #3
    31fc:	4b09      	ldr	r3, [pc, #36]	; (3224 <_usb_on_wakeup+0x64>)
    31fe:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
    3200:	4b09      	ldr	r3, [pc, #36]	; (3228 <_usb_on_wakeup+0x68>)
    3202:	4798      	blx	r3
#endif
}
    3204:	46bd      	mov	sp, r7
    3206:	b002      	add	sp, #8
    3208:	bd80      	pop	{r7, pc}
    320a:	46c0      	nop			; (mov r8, r8)
    320c:	00001f71 	.word	0x00001f71
    3210:	20000b34 	.word	0x20000b34
    3214:	00003c99 	.word	0x00003c99
    3218:	00003c3d 	.word	0x00003c3d
    321c:	00003125 	.word	0x00003125
    3220:	00003bed 	.word	0x00003bed
    3224:	00001fa9 	.word	0x00001fa9
    3228:	00003365 	.word	0x00003365

0000322c <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    322c:	b580      	push	{r7, lr}
    322e:	af00      	add	r7, sp, #0
	udd_sleep_mode(UDD_STATE_IDLE);
    3230:	2003      	movs	r0, #3
    3232:	4b22      	ldr	r3, [pc, #136]	; (32bc <udd_attach+0x90>)
    3234:	4798      	blx	r3
	usb_device_attach(&usb_device);
    3236:	4b22      	ldr	r3, [pc, #136]	; (32c0 <udd_attach+0x94>)
    3238:	1c18      	adds	r0, r3, #0
    323a:	4b22      	ldr	r3, [pc, #136]	; (32c4 <udd_attach+0x98>)
    323c:	4798      	blx	r3

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    323e:	4a20      	ldr	r2, [pc, #128]	; (32c0 <udd_attach+0x94>)
    3240:	4b21      	ldr	r3, [pc, #132]	; (32c8 <udd_attach+0x9c>)
    3242:	1c10      	adds	r0, r2, #0
    3244:	2104      	movs	r1, #4
    3246:	1c1a      	adds	r2, r3, #0
    3248:	4b20      	ldr	r3, [pc, #128]	; (32cc <udd_attach+0xa0>)
    324a:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    324c:	4a1c      	ldr	r2, [pc, #112]	; (32c0 <udd_attach+0x94>)
    324e:	4b20      	ldr	r3, [pc, #128]	; (32d0 <udd_attach+0xa4>)
    3250:	1c10      	adds	r0, r2, #0
    3252:	2100      	movs	r1, #0
    3254:	1c1a      	adds	r2, r3, #0
    3256:	4b1d      	ldr	r3, [pc, #116]	; (32cc <udd_attach+0xa0>)
    3258:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    325a:	4a19      	ldr	r2, [pc, #100]	; (32c0 <udd_attach+0x94>)
    325c:	4b1d      	ldr	r3, [pc, #116]	; (32d4 <udd_attach+0xa8>)
    325e:	1c10      	adds	r0, r2, #0
    3260:	2101      	movs	r1, #1
    3262:	1c1a      	adds	r2, r3, #0
    3264:	4b19      	ldr	r3, [pc, #100]	; (32cc <udd_attach+0xa0>)
    3266:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    3268:	4a15      	ldr	r2, [pc, #84]	; (32c0 <udd_attach+0x94>)
    326a:	4b1b      	ldr	r3, [pc, #108]	; (32d8 <udd_attach+0xac>)
    326c:	1c10      	adds	r0, r2, #0
    326e:	2102      	movs	r1, #2
    3270:	1c1a      	adds	r2, r3, #0
    3272:	4b16      	ldr	r3, [pc, #88]	; (32cc <udd_attach+0xa0>)
    3274:	4798      	blx	r3

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    3276:	4b12      	ldr	r3, [pc, #72]	; (32c0 <udd_attach+0x94>)
    3278:	1c18      	adds	r0, r3, #0
    327a:	2104      	movs	r1, #4
    327c:	4b17      	ldr	r3, [pc, #92]	; (32dc <udd_attach+0xb0>)
    327e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    3280:	4b0f      	ldr	r3, [pc, #60]	; (32c0 <udd_attach+0x94>)
    3282:	1c18      	adds	r0, r3, #0
    3284:	2100      	movs	r1, #0
    3286:	4b15      	ldr	r3, [pc, #84]	; (32dc <udd_attach+0xb0>)
    3288:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    328a:	4b0d      	ldr	r3, [pc, #52]	; (32c0 <udd_attach+0x94>)
    328c:	1c18      	adds	r0, r3, #0
    328e:	2101      	movs	r1, #1
    3290:	4b12      	ldr	r3, [pc, #72]	; (32dc <udd_attach+0xb0>)
    3292:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    3294:	4b0a      	ldr	r3, [pc, #40]	; (32c0 <udd_attach+0x94>)
    3296:	1c18      	adds	r0, r3, #0
    3298:	2102      	movs	r1, #2
    329a:	4b10      	ldr	r3, [pc, #64]	; (32dc <udd_attach+0xb0>)
    329c:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    329e:	4a08      	ldr	r2, [pc, #32]	; (32c0 <udd_attach+0x94>)
    32a0:	4b0f      	ldr	r3, [pc, #60]	; (32e0 <udd_attach+0xb4>)
    32a2:	1c10      	adds	r0, r2, #0
    32a4:	2106      	movs	r1, #6
    32a6:	1c1a      	adds	r2, r3, #0
    32a8:	4b08      	ldr	r3, [pc, #32]	; (32cc <udd_attach+0xa0>)
    32aa:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    32ac:	4b04      	ldr	r3, [pc, #16]	; (32c0 <udd_attach+0x94>)
    32ae:	1c18      	adds	r0, r3, #0
    32b0:	2106      	movs	r1, #6
    32b2:	4b0a      	ldr	r3, [pc, #40]	; (32dc <udd_attach+0xb0>)
    32b4:	4798      	blx	r3
#endif
}
    32b6:	46bd      	mov	sp, r7
    32b8:	bd80      	pop	{r7, pc}
    32ba:	46c0      	nop			; (mov r8, r8)
    32bc:	00001fa9 	.word	0x00001fa9
    32c0:	20000b34 	.word	0x20000b34
    32c4:	00001e39 	.word	0x00001e39
    32c8:	000030e1 	.word	0x000030e1
    32cc:	00003bed 	.word	0x00003bed
    32d0:	0000316d 	.word	0x0000316d
    32d4:	0000318d 	.word	0x0000318d
    32d8:	000031c1 	.word	0x000031c1
    32dc:	00003c3d 	.word	0x00003c3d
    32e0:	00003125 	.word	0x00003125

000032e4 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    32e4:	b580      	push	{r7, lr}
    32e6:	b082      	sub	sp, #8
    32e8:	af00      	add	r7, sp, #0
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    32ea:	4b12      	ldr	r3, [pc, #72]	; (3334 <udd_enable+0x50>)
    32ec:	4798      	blx	r3
    32ee:	1c03      	adds	r3, r0, #0
    32f0:	607b      	str	r3, [r7, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    32f2:	1c3b      	adds	r3, r7, #0
    32f4:	1c18      	adds	r0, r3, #0
    32f6:	4b10      	ldr	r3, [pc, #64]	; (3338 <udd_enable+0x54>)
    32f8:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    32fa:	1c3b      	adds	r3, r7, #0
    32fc:	2200      	movs	r2, #0
    32fe:	709a      	strb	r2, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
    3300:	490e      	ldr	r1, [pc, #56]	; (333c <udd_enable+0x58>)
    3302:	4a0f      	ldr	r2, [pc, #60]	; (3340 <udd_enable+0x5c>)
    3304:	1c3b      	adds	r3, r7, #0
    3306:	1c08      	adds	r0, r1, #0
    3308:	1c11      	adds	r1, r2, #0
    330a:	1c1a      	adds	r2, r3, #0
    330c:	4b0d      	ldr	r3, [pc, #52]	; (3344 <udd_enable+0x60>)
    330e:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    3310:	4b0a      	ldr	r3, [pc, #40]	; (333c <udd_enable+0x58>)
    3312:	1c18      	adds	r0, r3, #0
    3314:	4b0c      	ldr	r3, [pc, #48]	; (3348 <udd_enable+0x64>)
    3316:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    3318:	4b0c      	ldr	r3, [pc, #48]	; (334c <udd_enable+0x68>)
    331a:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    331c:	2001      	movs	r0, #1
    331e:	4b0c      	ldr	r3, [pc, #48]	; (3350 <udd_enable+0x6c>)
    3320:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    3322:	4b0c      	ldr	r3, [pc, #48]	; (3354 <udd_enable+0x70>)
    3324:	4798      	blx	r3
# endif
#endif

	cpu_irq_restore(flags);
    3326:	687b      	ldr	r3, [r7, #4]
    3328:	1c18      	adds	r0, r3, #0
    332a:	4b0b      	ldr	r3, [pc, #44]	; (3358 <udd_enable+0x74>)
    332c:	4798      	blx	r3
}
    332e:	46bd      	mov	sp, r7
    3330:	b002      	add	sp, #8
    3332:	bd80      	pop	{r7, pc}
    3334:	00001dc1 	.word	0x00001dc1
    3338:	00004fb9 	.word	0x00004fb9
    333c:	20000b34 	.word	0x20000b34
    3340:	41005000 	.word	0x41005000
    3344:	00004fe1 	.word	0x00004fe1
    3348:	00004f59 	.word	0x00004f59
    334c:	00001f71 	.word	0x00001f71
    3350:	00001fa9 	.word	0x00001fa9
    3354:	0000322d 	.word	0x0000322d
    3358:	00001e09 	.word	0x00001e09

0000335c <main_suspend_action>:
 */ 
#include <asf.h>
#include "multi_hid_generic.h"

void main_suspend_action(void)
{
    335c:	b580      	push	{r7, lr}
    335e:	af00      	add	r7, sp, #0
}
    3360:	46bd      	mov	sp, r7
    3362:	bd80      	pop	{r7, pc}

00003364 <main_resume_action>:

void main_resume_action(void)
{
    3364:	b580      	push	{r7, lr}
    3366:	af00      	add	r7, sp, #0
}
    3368:	46bd      	mov	sp, r7
    336a:	bd80      	pop	{r7, pc}

0000336c <main_sof_action>:

void main_sof_action(void)
{
    336c:	b580      	push	{r7, lr}
    336e:	af00      	add	r7, sp, #0
}
    3370:	46bd      	mov	sp, r7
    3372:	bd80      	pop	{r7, pc}

00003374 <main_remotewakeup_enable>:

void main_remotewakeup_enable(void)
{
    3374:	b580      	push	{r7, lr}
    3376:	af00      	add	r7, sp, #0
}
    3378:	46bd      	mov	sp, r7
    337a:	bd80      	pop	{r7, pc}

0000337c <main_remotewakeup_disable>:

void main_remotewakeup_disable(void)
{
    337c:	b580      	push	{r7, lr}
    337e:	af00      	add	r7, sp, #0
}
    3380:	46bd      	mov	sp, r7
    3382:	bd80      	pop	{r7, pc}

00003384 <main_extra_string>:
	}
	return true;
}
#else
bool main_extra_string(void)
{
    3384:	b580      	push	{r7, lr}
    3386:	b084      	sub	sp, #16
    3388:	af00      	add	r7, sp, #0
		.header.bDescriptorType = USB_DT_STRING
	};

	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;
    338a:	1dfb      	adds	r3, r7, #7
    338c:	2200      	movs	r2, #0
    338e:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff)
    3390:	4b3d      	ldr	r3, [pc, #244]	; (3488 <main_extra_string+0x104>)
    3392:	885b      	ldrh	r3, [r3, #2]
    3394:	1c1a      	adds	r2, r3, #0
    3396:	23ff      	movs	r3, #255	; 0xff
    3398:	4013      	ands	r3, r2
    339a:	3b04      	subs	r3, #4
    339c:	2b06      	cmp	r3, #6
    339e:	d82e      	bhi.n	33fe <main_extra_string+0x7a>
    33a0:	009a      	lsls	r2, r3, #2
    33a2:	4b3a      	ldr	r3, [pc, #232]	; (348c <main_extra_string+0x108>)
    33a4:	18d3      	adds	r3, r2, r3
    33a6:	681b      	ldr	r3, [r3, #0]
    33a8:	469f      	mov	pc, r3
	{
		case UDI_HID_GENERIC_CHARGER_STRING_ID:
		str_lgt = sizeof(udi_hid_generic_charger_name) - 1;
    33aa:	1dfb      	adds	r3, r7, #7
    33ac:	2213      	movs	r2, #19
    33ae:	701a      	strb	r2, [r3, #0]
		str = udi_hid_generic_charger_name;
    33b0:	4b37      	ldr	r3, [pc, #220]	; (3490 <main_extra_string+0x10c>)
    33b2:	60bb      	str	r3, [r7, #8]
		break;
    33b4:	e025      	b.n	3402 <main_extra_string+0x7e>
		
		case UDI_HID_GENERIC_BATTERY1_STRING_ID:
		str_lgt = sizeof(udi_hid_generic_battery1_name) - 1;
    33b6:	1dfb      	adds	r3, r7, #7
    33b8:	2214      	movs	r2, #20
    33ba:	701a      	strb	r2, [r3, #0]
		str = udi_hid_generic_battery1_name;
    33bc:	4b35      	ldr	r3, [pc, #212]	; (3494 <main_extra_string+0x110>)
    33be:	60bb      	str	r3, [r7, #8]
		break;
    33c0:	e01f      	b.n	3402 <main_extra_string+0x7e>
		
		case UDI_HID_GENERIC_BATTERY2_STRING_ID:
		str_lgt = sizeof(udi_hid_generic_battery2_name)-1;
    33c2:	1dfb      	adds	r3, r7, #7
    33c4:	2214      	movs	r2, #20
    33c6:	701a      	strb	r2, [r3, #0]
		str = udi_hid_generic_battery2_name;
    33c8:	4b33      	ldr	r3, [pc, #204]	; (3498 <main_extra_string+0x114>)
    33ca:	60bb      	str	r3, [r7, #8]
		break;
    33cc:	e019      	b.n	3402 <main_extra_string+0x7e>
		
		case UDI_HID_GENERIC_BATTERY3_STRING_ID:
		str_lgt = sizeof(udi_hid_generic_battery3_name) - 1;
    33ce:	1dfb      	adds	r3, r7, #7
    33d0:	2214      	movs	r2, #20
    33d2:	701a      	strb	r2, [r3, #0]
		str = udi_hid_generic_battery3_name;
    33d4:	4b31      	ldr	r3, [pc, #196]	; (349c <main_extra_string+0x118>)
    33d6:	60bb      	str	r3, [r7, #8]
		break;
    33d8:	e013      	b.n	3402 <main_extra_string+0x7e>
		
		case UDI_HID_GENERIC_BATTERY4_STRING_ID:
		str_lgt = sizeof(udi_hid_generic_battery4_name) - 1;
    33da:	1dfb      	adds	r3, r7, #7
    33dc:	2214      	movs	r2, #20
    33de:	701a      	strb	r2, [r3, #0]
		str = udi_hid_generic_battery4_name;
    33e0:	4b2f      	ldr	r3, [pc, #188]	; (34a0 <main_extra_string+0x11c>)
    33e2:	60bb      	str	r3, [r7, #8]
		break;
    33e4:	e00d      	b.n	3402 <main_extra_string+0x7e>
		
		case UDI_HID_GENERIC_BATTERY5_STRING_ID:
		str_lgt = sizeof(udi_hid_generic_battery5_name) - 1;
    33e6:	1dfb      	adds	r3, r7, #7
    33e8:	2214      	movs	r2, #20
    33ea:	701a      	strb	r2, [r3, #0]
		str = udi_hid_generic_battery5_name;
    33ec:	4b2d      	ldr	r3, [pc, #180]	; (34a4 <main_extra_string+0x120>)
    33ee:	60bb      	str	r3, [r7, #8]
		break;
    33f0:	e007      	b.n	3402 <main_extra_string+0x7e>
		
		case UDI_HID_GENERIC_BATTERY6_STRING_ID:
		str_lgt = sizeof(udi_hid_generic_battery6_name) - 1;
    33f2:	1dfb      	adds	r3, r7, #7
    33f4:	2214      	movs	r2, #20
    33f6:	701a      	strb	r2, [r3, #0]
		str = udi_hid_generic_battery6_name;
    33f8:	4b2b      	ldr	r3, [pc, #172]	; (34a8 <main_extra_string+0x124>)
    33fa:	60bb      	str	r3, [r7, #8]
		break;
    33fc:	e001      	b.n	3402 <main_extra_string+0x7e>
		
		default:
		return false;
    33fe:	2300      	movs	r3, #0
    3400:	e03e      	b.n	3480 <main_extra_string+0xfc>
	}

	if (str_lgt!=0)
    3402:	1dfb      	adds	r3, r7, #7
    3404:	781b      	ldrb	r3, [r3, #0]
    3406:	2b00      	cmp	r3, #0
    3408:	d02f      	beq.n	346a <main_extra_string+0xe6>
	{
		for( i=0; i<str_lgt; i++)
    340a:	1c3b      	adds	r3, r7, #0
    340c:	330f      	adds	r3, #15
    340e:	2200      	movs	r2, #0
    3410:	701a      	strb	r2, [r3, #0]
    3412:	e013      	b.n	343c <main_extra_string+0xb8>
		{
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    3414:	1c3b      	adds	r3, r7, #0
    3416:	330f      	adds	r3, #15
    3418:	781b      	ldrb	r3, [r3, #0]
    341a:	1c3a      	adds	r2, r7, #0
    341c:	320f      	adds	r2, #15
    341e:	7812      	ldrb	r2, [r2, #0]
    3420:	68b9      	ldr	r1, [r7, #8]
    3422:	188a      	adds	r2, r1, r2
    3424:	7812      	ldrb	r2, [r2, #0]
    3426:	4921      	ldr	r1, [pc, #132]	; (34ac <main_extra_string+0x128>)
    3428:	005b      	lsls	r3, r3, #1
    342a:	18cb      	adds	r3, r1, r3
    342c:	805a      	strh	r2, [r3, #2]
		return false;
	}

	if (str_lgt!=0)
	{
		for( i=0; i<str_lgt; i++)
    342e:	1c3b      	adds	r3, r7, #0
    3430:	330f      	adds	r3, #15
    3432:	781a      	ldrb	r2, [r3, #0]
    3434:	1c3b      	adds	r3, r7, #0
    3436:	330f      	adds	r3, #15
    3438:	3201      	adds	r2, #1
    343a:	701a      	strb	r2, [r3, #0]
    343c:	1c3a      	adds	r2, r7, #0
    343e:	320f      	adds	r2, #15
    3440:	1dfb      	adds	r3, r7, #7
    3442:	7812      	ldrb	r2, [r2, #0]
    3444:	781b      	ldrb	r3, [r3, #0]
    3446:	429a      	cmp	r2, r3
    3448:	d3e4      	bcc.n	3414 <main_extra_string+0x90>
		{
			extra_strings_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		extra_strings_desc.header.bLength = 2 + (str_lgt) * 2;
    344a:	1dfb      	adds	r3, r7, #7
    344c:	781b      	ldrb	r3, [r3, #0]
    344e:	3301      	adds	r3, #1
    3450:	b2db      	uxtb	r3, r3
    3452:	18db      	adds	r3, r3, r3
    3454:	b2da      	uxtb	r2, r3
    3456:	4b15      	ldr	r3, [pc, #84]	; (34ac <main_extra_string+0x128>)
    3458:	701a      	strb	r2, [r3, #0]
		udd_g_ctrlreq.payload_size = extra_strings_desc.header.bLength;
    345a:	4b14      	ldr	r3, [pc, #80]	; (34ac <main_extra_string+0x128>)
    345c:	781b      	ldrb	r3, [r3, #0]
    345e:	1c1a      	adds	r2, r3, #0
    3460:	4b09      	ldr	r3, [pc, #36]	; (3488 <main_extra_string+0x104>)
    3462:	819a      	strh	r2, [r3, #12]
		udd_g_ctrlreq.payload = (uint8_t *) &extra_strings_desc;
    3464:	4b08      	ldr	r3, [pc, #32]	; (3488 <main_extra_string+0x104>)
    3466:	4a11      	ldr	r2, [pc, #68]	; (34ac <main_extra_string+0x128>)
    3468:	609a      	str	r2, [r3, #8]
	}

	// if the string is larger than request length, then cut it
	if (udd_g_ctrlreq.payload_size > udd_g_ctrlreq.req.wLength)
    346a:	4b07      	ldr	r3, [pc, #28]	; (3488 <main_extra_string+0x104>)
    346c:	899a      	ldrh	r2, [r3, #12]
    346e:	4b06      	ldr	r3, [pc, #24]	; (3488 <main_extra_string+0x104>)
    3470:	88db      	ldrh	r3, [r3, #6]
    3472:	429a      	cmp	r2, r3
    3474:	d903      	bls.n	347e <main_extra_string+0xfa>
	{
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    3476:	4b04      	ldr	r3, [pc, #16]	; (3488 <main_extra_string+0x104>)
    3478:	88da      	ldrh	r2, [r3, #6]
    347a:	4b03      	ldr	r3, [pc, #12]	; (3488 <main_extra_string+0x104>)
    347c:	819a      	strh	r2, [r3, #12]
	}
	return true;
    347e:	2301      	movs	r3, #1
}
    3480:	1c18      	adds	r0, r3, #0
    3482:	46bd      	mov	sp, r7
    3484:	b004      	add	sp, #16
    3486:	bd80      	pop	{r7, pc}
    3488:	20000c9c 	.word	0x20000c9c
    348c:	000067e0 	.word	0x000067e0
    3490:	200002e4 	.word	0x200002e4
    3494:	200002f8 	.word	0x200002f8
    3498:	20000310 	.word	0x20000310
    349c:	20000328 	.word	0x20000328
    34a0:	20000340 	.word	0x20000340
    34a4:	20000358 	.word	0x20000358
    34a8:	20000370 	.word	0x20000370
    34ac:	20000388 	.word	0x20000388

000034b0 <main_generic_charger_enable>:
void main_hid_set_feature(uint8_t* report)
{
}
#else
bool main_generic_charger_enable(void)
{
    34b0:	b580      	push	{r7, lr}
    34b2:	af00      	add	r7, sp, #0
	main_b_generic_charger_enable = true;
    34b4:	4b03      	ldr	r3, [pc, #12]	; (34c4 <main_generic_charger_enable+0x14>)
    34b6:	2201      	movs	r2, #1
    34b8:	701a      	strb	r2, [r3, #0]
	return true;
    34ba:	2301      	movs	r3, #1
}
    34bc:	1c18      	adds	r0, r3, #0
    34be:	46bd      	mov	sp, r7
    34c0:	bd80      	pop	{r7, pc}
    34c2:	46c0      	nop			; (mov r8, r8)
    34c4:	20000726 	.word	0x20000726

000034c8 <main_generic_battery1_enable>:

bool main_generic_battery1_enable(void)
{
    34c8:	b580      	push	{r7, lr}
    34ca:	af00      	add	r7, sp, #0
	main_b_generic_battery1_enable = true;
    34cc:	4b03      	ldr	r3, [pc, #12]	; (34dc <main_generic_battery1_enable+0x14>)
    34ce:	2201      	movs	r2, #1
    34d0:	701a      	strb	r2, [r3, #0]
	return true;
    34d2:	2301      	movs	r3, #1
}
    34d4:	1c18      	adds	r0, r3, #0
    34d6:	46bd      	mov	sp, r7
    34d8:	bd80      	pop	{r7, pc}
    34da:	46c0      	nop			; (mov r8, r8)
    34dc:	20000727 	.word	0x20000727

000034e0 <main_generic_battery2_enable>:

bool main_generic_battery2_enable(void)
{
    34e0:	b580      	push	{r7, lr}
    34e2:	af00      	add	r7, sp, #0
	main_b_generic_battery2_enable = true;
    34e4:	4b03      	ldr	r3, [pc, #12]	; (34f4 <main_generic_battery2_enable+0x14>)
    34e6:	2201      	movs	r2, #1
    34e8:	701a      	strb	r2, [r3, #0]
	return true;
    34ea:	2301      	movs	r3, #1
}
    34ec:	1c18      	adds	r0, r3, #0
    34ee:	46bd      	mov	sp, r7
    34f0:	bd80      	pop	{r7, pc}
    34f2:	46c0      	nop			; (mov r8, r8)
    34f4:	20000728 	.word	0x20000728

000034f8 <main_generic_battery3_enable>:

bool main_generic_battery3_enable(void)
{
    34f8:	b580      	push	{r7, lr}
    34fa:	af00      	add	r7, sp, #0
	main_b_generic_battery3_enable = true;
    34fc:	4b03      	ldr	r3, [pc, #12]	; (350c <main_generic_battery3_enable+0x14>)
    34fe:	2201      	movs	r2, #1
    3500:	701a      	strb	r2, [r3, #0]
	return true;
    3502:	2301      	movs	r3, #1
}
    3504:	1c18      	adds	r0, r3, #0
    3506:	46bd      	mov	sp, r7
    3508:	bd80      	pop	{r7, pc}
    350a:	46c0      	nop			; (mov r8, r8)
    350c:	20000729 	.word	0x20000729

00003510 <main_generic_battery4_enable>:

bool main_generic_battery4_enable(void)
{
    3510:	b580      	push	{r7, lr}
    3512:	af00      	add	r7, sp, #0
	main_b_generic_battery4_enable = true;
    3514:	4b03      	ldr	r3, [pc, #12]	; (3524 <main_generic_battery4_enable+0x14>)
    3516:	2201      	movs	r2, #1
    3518:	701a      	strb	r2, [r3, #0]
	return true;
    351a:	2301      	movs	r3, #1
}
    351c:	1c18      	adds	r0, r3, #0
    351e:	46bd      	mov	sp, r7
    3520:	bd80      	pop	{r7, pc}
    3522:	46c0      	nop			; (mov r8, r8)
    3524:	2000072a 	.word	0x2000072a

00003528 <main_generic_battery5_enable>:

bool main_generic_battery5_enable(void)
{
    3528:	b580      	push	{r7, lr}
    352a:	af00      	add	r7, sp, #0
	main_b_generic_battery5_enable = true;
    352c:	4b03      	ldr	r3, [pc, #12]	; (353c <main_generic_battery5_enable+0x14>)
    352e:	2201      	movs	r2, #1
    3530:	701a      	strb	r2, [r3, #0]
	return true;
    3532:	2301      	movs	r3, #1
}
    3534:	1c18      	adds	r0, r3, #0
    3536:	46bd      	mov	sp, r7
    3538:	bd80      	pop	{r7, pc}
    353a:	46c0      	nop			; (mov r8, r8)
    353c:	2000072b 	.word	0x2000072b

00003540 <main_generic_battery6_enable>:

bool main_generic_battery6_enable(void)
{
    3540:	b580      	push	{r7, lr}
    3542:	af00      	add	r7, sp, #0
	main_b_generic_battery6_enable = true;
    3544:	4b03      	ldr	r3, [pc, #12]	; (3554 <main_generic_battery6_enable+0x14>)
    3546:	2201      	movs	r2, #1
    3548:	701a      	strb	r2, [r3, #0]
	return true;
    354a:	2301      	movs	r3, #1
}
    354c:	1c18      	adds	r0, r3, #0
    354e:	46bd      	mov	sp, r7
    3550:	bd80      	pop	{r7, pc}
    3552:	46c0      	nop			; (mov r8, r8)
    3554:	2000072c 	.word	0x2000072c

00003558 <main_generic_charger_disable>:

void main_generic_charger_disable(void)
{
    3558:	b580      	push	{r7, lr}
    355a:	af00      	add	r7, sp, #0
	main_b_generic_charger_enable = false;
    355c:	4b02      	ldr	r3, [pc, #8]	; (3568 <main_generic_charger_disable+0x10>)
    355e:	2200      	movs	r2, #0
    3560:	701a      	strb	r2, [r3, #0]
}
    3562:	46bd      	mov	sp, r7
    3564:	bd80      	pop	{r7, pc}
    3566:	46c0      	nop			; (mov r8, r8)
    3568:	20000726 	.word	0x20000726

0000356c <main_generic_battery1_disable>:

void main_generic_battery1_disable(void)
{
    356c:	b580      	push	{r7, lr}
    356e:	af00      	add	r7, sp, #0
	main_b_generic_battery1_enable = false;
    3570:	4b02      	ldr	r3, [pc, #8]	; (357c <main_generic_battery1_disable+0x10>)
    3572:	2200      	movs	r2, #0
    3574:	701a      	strb	r2, [r3, #0]
}
    3576:	46bd      	mov	sp, r7
    3578:	bd80      	pop	{r7, pc}
    357a:	46c0      	nop			; (mov r8, r8)
    357c:	20000727 	.word	0x20000727

00003580 <main_generic_battery2_disable>:

void main_generic_battery2_disable(void)
{
    3580:	b580      	push	{r7, lr}
    3582:	af00      	add	r7, sp, #0
	main_b_generic_battery2_enable = false;
    3584:	4b02      	ldr	r3, [pc, #8]	; (3590 <main_generic_battery2_disable+0x10>)
    3586:	2200      	movs	r2, #0
    3588:	701a      	strb	r2, [r3, #0]
}
    358a:	46bd      	mov	sp, r7
    358c:	bd80      	pop	{r7, pc}
    358e:	46c0      	nop			; (mov r8, r8)
    3590:	20000728 	.word	0x20000728

00003594 <main_generic_battery3_disable>:

void main_generic_battery3_disable(void)
{
    3594:	b580      	push	{r7, lr}
    3596:	af00      	add	r7, sp, #0
	main_b_generic_battery3_enable = false;
    3598:	4b02      	ldr	r3, [pc, #8]	; (35a4 <main_generic_battery3_disable+0x10>)
    359a:	2200      	movs	r2, #0
    359c:	701a      	strb	r2, [r3, #0]
}
    359e:	46bd      	mov	sp, r7
    35a0:	bd80      	pop	{r7, pc}
    35a2:	46c0      	nop			; (mov r8, r8)
    35a4:	20000729 	.word	0x20000729

000035a8 <main_generic_battery4_disable>:

void main_generic_battery4_disable(void)
{
    35a8:	b580      	push	{r7, lr}
    35aa:	af00      	add	r7, sp, #0
	main_b_generic_battery4_enable = false;
    35ac:	4b02      	ldr	r3, [pc, #8]	; (35b8 <main_generic_battery4_disable+0x10>)
    35ae:	2200      	movs	r2, #0
    35b0:	701a      	strb	r2, [r3, #0]
}
    35b2:	46bd      	mov	sp, r7
    35b4:	bd80      	pop	{r7, pc}
    35b6:	46c0      	nop			; (mov r8, r8)
    35b8:	2000072a 	.word	0x2000072a

000035bc <main_generic_battery5_disable>:

void main_generic_battery5_disable(void)
{
    35bc:	b580      	push	{r7, lr}
    35be:	af00      	add	r7, sp, #0
	main_b_generic_battery5_enable = false;
    35c0:	4b02      	ldr	r3, [pc, #8]	; (35cc <main_generic_battery5_disable+0x10>)
    35c2:	2200      	movs	r2, #0
    35c4:	701a      	strb	r2, [r3, #0]
}
    35c6:	46bd      	mov	sp, r7
    35c8:	bd80      	pop	{r7, pc}
    35ca:	46c0      	nop			; (mov r8, r8)
    35cc:	2000072b 	.word	0x2000072b

000035d0 <main_generic_battery6_disable>:

void main_generic_battery6_disable(void)
{
    35d0:	b580      	push	{r7, lr}
    35d2:	af00      	add	r7, sp, #0
	main_b_generic_battery6_enable = false;
    35d4:	4b02      	ldr	r3, [pc, #8]	; (35e0 <main_generic_battery6_disable+0x10>)
    35d6:	2200      	movs	r2, #0
    35d8:	701a      	strb	r2, [r3, #0]
}
    35da:	46bd      	mov	sp, r7
    35dc:	bd80      	pop	{r7, pc}
    35de:	46c0      	nop			; (mov r8, r8)
    35e0:	2000072c 	.word	0x2000072c

000035e4 <main_hid_charger_set_feature>:

void main_hid_charger_set_feature(uint8_t* report)
{
    35e4:	b580      	push	{r7, lr}
    35e6:	b082      	sub	sp, #8
    35e8:	af00      	add	r7, sp, #0
    35ea:	6078      	str	r0, [r7, #4]
}
    35ec:	46bd      	mov	sp, r7
    35ee:	b002      	add	sp, #8
    35f0:	bd80      	pop	{r7, pc}
    35f2:	46c0      	nop			; (mov r8, r8)

000035f4 <main_hid_battery1_set_feature>:

void main_hid_battery1_set_feature(uint8_t* report)
{
    35f4:	b580      	push	{r7, lr}
    35f6:	b082      	sub	sp, #8
    35f8:	af00      	add	r7, sp, #0
    35fa:	6078      	str	r0, [r7, #4]
}
    35fc:	46bd      	mov	sp, r7
    35fe:	b002      	add	sp, #8
    3600:	bd80      	pop	{r7, pc}
    3602:	46c0      	nop			; (mov r8, r8)

00003604 <main_hid_battery2_set_feature>:

void main_hid_battery2_set_feature(uint8_t* report)
{
    3604:	b580      	push	{r7, lr}
    3606:	b082      	sub	sp, #8
    3608:	af00      	add	r7, sp, #0
    360a:	6078      	str	r0, [r7, #4]
}
    360c:	46bd      	mov	sp, r7
    360e:	b002      	add	sp, #8
    3610:	bd80      	pop	{r7, pc}
    3612:	46c0      	nop			; (mov r8, r8)

00003614 <main_hid_battery3_set_feature>:

void main_hid_battery3_set_feature(uint8_t* report)
{
    3614:	b580      	push	{r7, lr}
    3616:	b082      	sub	sp, #8
    3618:	af00      	add	r7, sp, #0
    361a:	6078      	str	r0, [r7, #4]
}
    361c:	46bd      	mov	sp, r7
    361e:	b002      	add	sp, #8
    3620:	bd80      	pop	{r7, pc}
    3622:	46c0      	nop			; (mov r8, r8)

00003624 <main_hid_battery4_set_feature>:

void main_hid_battery4_set_feature(uint8_t* report)
{
    3624:	b580      	push	{r7, lr}
    3626:	b082      	sub	sp, #8
    3628:	af00      	add	r7, sp, #0
    362a:	6078      	str	r0, [r7, #4]
}
    362c:	46bd      	mov	sp, r7
    362e:	b002      	add	sp, #8
    3630:	bd80      	pop	{r7, pc}
    3632:	46c0      	nop			; (mov r8, r8)

00003634 <main_hid_battery5_set_feature>:

void main_hid_battery5_set_feature(uint8_t* report)
{
    3634:	b580      	push	{r7, lr}
    3636:	b082      	sub	sp, #8
    3638:	af00      	add	r7, sp, #0
    363a:	6078      	str	r0, [r7, #4]
}
    363c:	46bd      	mov	sp, r7
    363e:	b002      	add	sp, #8
    3640:	bd80      	pop	{r7, pc}
    3642:	46c0      	nop			; (mov r8, r8)

00003644 <main_hid_battery6_set_feature>:

void main_hid_battery6_set_feature(uint8_t* report)
{
    3644:	b580      	push	{r7, lr}
    3646:	b082      	sub	sp, #8
    3648:	af00      	add	r7, sp, #0
    364a:	6078      	str	r0, [r7, #4]
}
    364c:	46bd      	mov	sp, r7
    364e:	b002      	add	sp, #8
    3650:	bd80      	pop	{r7, pc}
    3652:	46c0      	nop			; (mov r8, r8)

00003654 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3654:	b580      	push	{r7, lr}
    3656:	b082      	sub	sp, #8
    3658:	af00      	add	r7, sp, #0
    365a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    365c:	687b      	ldr	r3, [r7, #4]
    365e:	2200      	movs	r2, #0
    3660:	701a      	strb	r2, [r3, #0]
}
    3662:	46bd      	mov	sp, r7
    3664:	b002      	add	sp, #8
    3666:	bd80      	pop	{r7, pc}

00003668 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3668:	b580      	push	{r7, lr}
    366a:	b082      	sub	sp, #8
    366c:	af00      	add	r7, sp, #0
    366e:	1c02      	adds	r2, r0, #0
    3670:	6039      	str	r1, [r7, #0]
    3672:	1dfb      	adds	r3, r7, #7
    3674:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3676:	1dfb      	adds	r3, r7, #7
    3678:	781b      	ldrb	r3, [r3, #0]
    367a:	2b01      	cmp	r3, #1
    367c:	d00a      	beq.n	3694 <system_apb_clock_set_mask+0x2c>
    367e:	2b02      	cmp	r3, #2
    3680:	d00f      	beq.n	36a2 <system_apb_clock_set_mask+0x3a>
    3682:	2b00      	cmp	r3, #0
    3684:	d114      	bne.n	36b0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3686:	4b0e      	ldr	r3, [pc, #56]	; (36c0 <system_apb_clock_set_mask+0x58>)
    3688:	4a0d      	ldr	r2, [pc, #52]	; (36c0 <system_apb_clock_set_mask+0x58>)
    368a:	6991      	ldr	r1, [r2, #24]
    368c:	683a      	ldr	r2, [r7, #0]
    368e:	430a      	orrs	r2, r1
    3690:	619a      	str	r2, [r3, #24]
			break;
    3692:	e00f      	b.n	36b4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3694:	4b0a      	ldr	r3, [pc, #40]	; (36c0 <system_apb_clock_set_mask+0x58>)
    3696:	4a0a      	ldr	r2, [pc, #40]	; (36c0 <system_apb_clock_set_mask+0x58>)
    3698:	69d1      	ldr	r1, [r2, #28]
    369a:	683a      	ldr	r2, [r7, #0]
    369c:	430a      	orrs	r2, r1
    369e:	61da      	str	r2, [r3, #28]
			break;
    36a0:	e008      	b.n	36b4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    36a2:	4b07      	ldr	r3, [pc, #28]	; (36c0 <system_apb_clock_set_mask+0x58>)
    36a4:	4a06      	ldr	r2, [pc, #24]	; (36c0 <system_apb_clock_set_mask+0x58>)
    36a6:	6a11      	ldr	r1, [r2, #32]
    36a8:	683a      	ldr	r2, [r7, #0]
    36aa:	430a      	orrs	r2, r1
    36ac:	621a      	str	r2, [r3, #32]
			break;
    36ae:	e001      	b.n	36b4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    36b0:	2317      	movs	r3, #23
    36b2:	e000      	b.n	36b6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    36b4:	2300      	movs	r3, #0
}
    36b6:	1c18      	adds	r0, r3, #0
    36b8:	46bd      	mov	sp, r7
    36ba:	b002      	add	sp, #8
    36bc:	bd80      	pop	{r7, pc}
    36be:	46c0      	nop			; (mov r8, r8)
    36c0:	40000400 	.word	0x40000400

000036c4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    36c4:	b580      	push	{r7, lr}
    36c6:	b082      	sub	sp, #8
    36c8:	af00      	add	r7, sp, #0
    36ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    36cc:	687b      	ldr	r3, [r7, #4]
    36ce:	2280      	movs	r2, #128	; 0x80
    36d0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    36d2:	687b      	ldr	r3, [r7, #4]
    36d4:	2200      	movs	r2, #0
    36d6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    36d8:	687b      	ldr	r3, [r7, #4]
    36da:	2201      	movs	r2, #1
    36dc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    36de:	687b      	ldr	r3, [r7, #4]
    36e0:	2200      	movs	r2, #0
    36e2:	70da      	strb	r2, [r3, #3]
}
    36e4:	46bd      	mov	sp, r7
    36e6:	b002      	add	sp, #8
    36e8:	bd80      	pop	{r7, pc}
    36ea:	46c0      	nop			; (mov r8, r8)

000036ec <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    36ec:	b580      	push	{r7, lr}
    36ee:	b082      	sub	sp, #8
    36f0:	af00      	add	r7, sp, #0
    36f2:	1c02      	adds	r2, r0, #0
    36f4:	1dfb      	adds	r3, r7, #7
    36f6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    36f8:	4b06      	ldr	r3, [pc, #24]	; (3714 <system_interrupt_enable+0x28>)
    36fa:	1dfa      	adds	r2, r7, #7
    36fc:	7812      	ldrb	r2, [r2, #0]
    36fe:	1c11      	adds	r1, r2, #0
    3700:	221f      	movs	r2, #31
    3702:	400a      	ands	r2, r1
    3704:	2101      	movs	r1, #1
    3706:	1c08      	adds	r0, r1, #0
    3708:	4090      	lsls	r0, r2
    370a:	1c02      	adds	r2, r0, #0
    370c:	601a      	str	r2, [r3, #0]
}
    370e:	46bd      	mov	sp, r7
    3710:	b002      	add	sp, #8
    3712:	bd80      	pop	{r7, pc}
    3714:	e000e100 	.word	0xe000e100

00003718 <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    3718:	b580      	push	{r7, lr}
    371a:	b082      	sub	sp, #8
    371c:	af00      	add	r7, sp, #0
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    371e:	4bbe      	ldr	r3, [pc, #760]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    3720:	681b      	ldr	r3, [r3, #0]
    3722:	681b      	ldr	r3, [r3, #0]
    3724:	8c1b      	ldrh	r3, [r3, #32]
    3726:	b29b      	uxth	r3, r3
    3728:	1c1a      	adds	r2, r3, #0
    372a:	4bbc      	ldr	r3, [pc, #752]	; (3a1c <_usb_host_interrupt_handler+0x304>)
    372c:	1c10      	adds	r0, r2, #0
    372e:	4798      	blx	r3
    3730:	1c03      	adds	r3, r0, #0
    3732:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    3734:	687b      	ldr	r3, [r7, #4]
    3736:	2b1f      	cmp	r3, #31
    3738:	d900      	bls.n	373c <_usb_host_interrupt_handler+0x24>
    373a:	e179      	b.n	3a30 <_usb_host_interrupt_handler+0x318>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    373c:	4bb6      	ldr	r3, [pc, #728]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    373e:	681b      	ldr	r3, [r3, #0]
    3740:	681a      	ldr	r2, [r3, #0]
    3742:	687b      	ldr	r3, [r7, #4]
    3744:	3308      	adds	r3, #8
    3746:	015b      	lsls	r3, r3, #5
    3748:	18d3      	adds	r3, r2, r3
    374a:	79db      	ldrb	r3, [r3, #7]
    374c:	b2db      	uxtb	r3, r3
    374e:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    3750:	683a      	ldr	r2, [r7, #0]
    3752:	2303      	movs	r3, #3
    3754:	4013      	ands	r3, r2
    3756:	d100      	bne.n	375a <_usb_host_interrupt_handler+0x42>
    3758:	e08a      	b.n	3870 <_usb_host_interrupt_handler+0x158>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    375a:	687b      	ldr	r3, [r7, #4]
    375c:	2201      	movs	r2, #1
    375e:	1c11      	adds	r1, r2, #0
    3760:	4099      	lsls	r1, r3
    3762:	1c0b      	adds	r3, r1, #0
    3764:	43db      	mvns	r3, r3
    3766:	1c1a      	adds	r2, r3, #0
    3768:	4bad      	ldr	r3, [pc, #692]	; (3a20 <_usb_host_interrupt_handler+0x308>)
    376a:	681b      	ldr	r3, [r3, #0]
    376c:	401a      	ands	r2, r3
    376e:	4bac      	ldr	r3, [pc, #688]	; (3a20 <_usb_host_interrupt_handler+0x308>)
    3770:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3772:	4ba9      	ldr	r3, [pc, #676]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    3774:	681b      	ldr	r3, [r3, #0]
    3776:	681a      	ldr	r2, [r3, #0]
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	3308      	adds	r3, #8
    377c:	015b      	lsls	r3, r3, #5
    377e:	18d3      	adds	r3, r2, r3
    3780:	2203      	movs	r2, #3
    3782:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3784:	4ba4      	ldr	r3, [pc, #656]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    3786:	6819      	ldr	r1, [r3, #0]
    3788:	23a8      	movs	r3, #168	; 0xa8
    378a:	687a      	ldr	r2, [r7, #4]
    378c:	188a      	adds	r2, r1, r2
    378e:	18d3      	adds	r3, r2, r3
    3790:	799b      	ldrb	r3, [r3, #6]
    3792:	1c1a      	adds	r2, r3, #0
    3794:	2301      	movs	r3, #1
    3796:	4013      	ands	r3, r2
    3798:	d06a      	beq.n	3870 <_usb_host_interrupt_handler+0x158>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    379a:	687b      	ldr	r3, [r7, #4]
    379c:	b2da      	uxtb	r2, r3
    379e:	4ba1      	ldr	r3, [pc, #644]	; (3a24 <_usb_host_interrupt_handler+0x30c>)
    37a0:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    37a2:	4b9d      	ldr	r3, [pc, #628]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    37a4:	681b      	ldr	r3, [r3, #0]
    37a6:	681b      	ldr	r3, [r3, #0]
    37a8:	687a      	ldr	r2, [r7, #4]
    37aa:	3208      	adds	r2, #8
    37ac:	0152      	lsls	r2, r2, #5
    37ae:	5cd2      	ldrb	r2, [r2, r3]
    37b0:	2303      	movs	r3, #3
    37b2:	4013      	ands	r3, r2
    37b4:	b2db      	uxtb	r3, r3
    37b6:	2b01      	cmp	r3, #1
    37b8:	d11f      	bne.n	37fa <_usb_host_interrupt_handler+0xe2>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    37ba:	4a9b      	ldr	r2, [pc, #620]	; (3a28 <_usb_host_interrupt_handler+0x310>)
    37bc:	687b      	ldr	r3, [r7, #4]
    37be:	015b      	lsls	r3, r3, #5
    37c0:	18d3      	adds	r3, r2, r3
    37c2:	685b      	ldr	r3, [r3, #4]
    37c4:	049b      	lsls	r3, r3, #18
    37c6:	0c9b      	lsrs	r3, r3, #18
    37c8:	b29b      	uxth	r3, r3
    37ca:	1c1a      	adds	r2, r3, #0
    37cc:	4b95      	ldr	r3, [pc, #596]	; (3a24 <_usb_host_interrupt_handler+0x30c>)
    37ce:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    37d0:	4a95      	ldr	r2, [pc, #596]	; (3a28 <_usb_host_interrupt_handler+0x310>)
    37d2:	687b      	ldr	r3, [r7, #4]
    37d4:	015b      	lsls	r3, r3, #5
    37d6:	18d3      	adds	r3, r2, r3
    37d8:	685b      	ldr	r3, [r3, #4]
    37da:	0b9b      	lsrs	r3, r3, #14
    37dc:	049b      	lsls	r3, r3, #18
    37de:	0c9b      	lsrs	r3, r3, #18
    37e0:	b29b      	uxth	r3, r3
    37e2:	1c1a      	adds	r2, r3, #0
    37e4:	4b8f      	ldr	r3, [pc, #572]	; (3a24 <_usb_host_interrupt_handler+0x30c>)
    37e6:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    37e8:	4a8f      	ldr	r2, [pc, #572]	; (3a28 <_usb_host_interrupt_handler+0x310>)
    37ea:	687b      	ldr	r3, [r7, #4]
    37ec:	015b      	lsls	r3, r3, #5
    37ee:	18d3      	adds	r3, r2, r3
    37f0:	685a      	ldr	r2, [r3, #4]
    37f2:	0b92      	lsrs	r2, r2, #14
    37f4:	0392      	lsls	r2, r2, #14
    37f6:	605a      	str	r2, [r3, #4]
    37f8:	e02d      	b.n	3856 <_usb_host_interrupt_handler+0x13e>
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    37fa:	4a8b      	ldr	r2, [pc, #556]	; (3a28 <_usb_host_interrupt_handler+0x310>)
    37fc:	687b      	ldr	r3, [r7, #4]
    37fe:	015b      	lsls	r3, r3, #5
    3800:	18d3      	adds	r3, r2, r3
    3802:	685b      	ldr	r3, [r3, #4]
    3804:	0b9b      	lsrs	r3, r3, #14
    3806:	049b      	lsls	r3, r3, #18
    3808:	0c9b      	lsrs	r3, r3, #18
    380a:	b29b      	uxth	r3, r3
    380c:	1c1a      	adds	r2, r3, #0
    380e:	4b85      	ldr	r3, [pc, #532]	; (3a24 <_usb_host_interrupt_handler+0x30c>)
    3810:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3812:	4a85      	ldr	r2, [pc, #532]	; (3a28 <_usb_host_interrupt_handler+0x310>)
    3814:	687b      	ldr	r3, [r7, #4]
    3816:	015b      	lsls	r3, r3, #5
    3818:	18d3      	adds	r3, r2, r3
    381a:	685b      	ldr	r3, [r3, #4]
    381c:	049b      	lsls	r3, r3, #18
    381e:	0c9b      	lsrs	r3, r3, #18
    3820:	b29b      	uxth	r3, r3
    3822:	1c1a      	adds	r2, r3, #0
    3824:	4b7f      	ldr	r3, [pc, #508]	; (3a24 <_usb_host_interrupt_handler+0x30c>)
    3826:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3828:	4a7f      	ldr	r2, [pc, #508]	; (3a28 <_usb_host_interrupt_handler+0x310>)
    382a:	687b      	ldr	r3, [r7, #4]
    382c:	015b      	lsls	r3, r3, #5
    382e:	18d3      	adds	r3, r2, r3
    3830:	6859      	ldr	r1, [r3, #4]
    3832:	4a7e      	ldr	r2, [pc, #504]	; (3a2c <_usb_host_interrupt_handler+0x314>)
    3834:	400a      	ands	r2, r1
    3836:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    3838:	4b7a      	ldr	r3, [pc, #488]	; (3a24 <_usb_host_interrupt_handler+0x30c>)
    383a:	885b      	ldrh	r3, [r3, #2]
    383c:	2b00      	cmp	r3, #0
    383e:	d10a      	bne.n	3856 <_usb_host_interrupt_handler+0x13e>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3840:	4a79      	ldr	r2, [pc, #484]	; (3a28 <_usb_host_interrupt_handler+0x310>)
    3842:	687b      	ldr	r3, [r7, #4]
    3844:	015b      	lsls	r3, r3, #5
    3846:	18d3      	adds	r3, r2, r3
    3848:	685b      	ldr	r3, [r3, #4]
    384a:	049b      	lsls	r3, r3, #18
    384c:	0c9b      	lsrs	r3, r3, #18
    384e:	b29b      	uxth	r3, r3
    3850:	1c1a      	adds	r2, r3, #0
    3852:	4b74      	ldr	r3, [pc, #464]	; (3a24 <_usb_host_interrupt_handler+0x30c>)
    3854:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    3856:	4b70      	ldr	r3, [pc, #448]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    3858:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    385a:	687b      	ldr	r3, [r7, #4]
    385c:	3302      	adds	r3, #2
    385e:	011b      	lsls	r3, r3, #4
    3860:	18d3      	adds	r3, r2, r3
    3862:	685a      	ldr	r2, [r3, #4]
    3864:	4b6c      	ldr	r3, [pc, #432]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    3866:	6819      	ldr	r1, [r3, #0]
    3868:	4b6e      	ldr	r3, [pc, #440]	; (3a24 <_usb_host_interrupt_handler+0x30c>)
    386a:	1c08      	adds	r0, r1, #0
    386c:	1c19      	adds	r1, r3, #0
    386e:	4790      	blx	r2
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    3870:	683a      	ldr	r2, [r7, #0]
    3872:	2304      	movs	r3, #4
    3874:	4013      	ands	r3, r2
    3876:	d014      	beq.n	38a2 <_usb_host_interrupt_handler+0x18a>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3878:	687b      	ldr	r3, [r7, #4]
    387a:	2201      	movs	r2, #1
    387c:	1c11      	adds	r1, r2, #0
    387e:	4099      	lsls	r1, r3
    3880:	1c0b      	adds	r3, r1, #0
    3882:	43db      	mvns	r3, r3
    3884:	1c1a      	adds	r2, r3, #0
    3886:	4b66      	ldr	r3, [pc, #408]	; (3a20 <_usb_host_interrupt_handler+0x308>)
    3888:	681b      	ldr	r3, [r3, #0]
    388a:	401a      	ands	r2, r3
    388c:	4b64      	ldr	r3, [pc, #400]	; (3a20 <_usb_host_interrupt_handler+0x308>)
    388e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3890:	4b61      	ldr	r3, [pc, #388]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    3892:	681b      	ldr	r3, [r3, #0]
    3894:	681a      	ldr	r2, [r3, #0]
    3896:	687b      	ldr	r3, [r7, #4]
    3898:	3308      	adds	r3, #8
    389a:	015b      	lsls	r3, r3, #5
    389c:	18d3      	adds	r3, r2, r3
    389e:	2204      	movs	r2, #4
    38a0:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    38a2:	683a      	ldr	r2, [r7, #0]
    38a4:	2308      	movs	r3, #8
    38a6:	4013      	ands	r3, r2
    38a8:	d03d      	beq.n	3926 <_usb_host_interrupt_handler+0x20e>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    38aa:	687b      	ldr	r3, [r7, #4]
    38ac:	2201      	movs	r2, #1
    38ae:	1c11      	adds	r1, r2, #0
    38b0:	4099      	lsls	r1, r3
    38b2:	1c0b      	adds	r3, r1, #0
    38b4:	43db      	mvns	r3, r3
    38b6:	1c1a      	adds	r2, r3, #0
    38b8:	4b59      	ldr	r3, [pc, #356]	; (3a20 <_usb_host_interrupt_handler+0x308>)
    38ba:	681b      	ldr	r3, [r3, #0]
    38bc:	401a      	ands	r2, r3
    38be:	4b58      	ldr	r3, [pc, #352]	; (3a20 <_usb_host_interrupt_handler+0x308>)
    38c0:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    38c2:	4b55      	ldr	r3, [pc, #340]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    38c4:	681b      	ldr	r3, [r3, #0]
    38c6:	681a      	ldr	r2, [r3, #0]
    38c8:	687b      	ldr	r3, [r7, #4]
    38ca:	3308      	adds	r3, #8
    38cc:	015b      	lsls	r3, r3, #5
    38ce:	18d3      	adds	r3, r2, r3
    38d0:	2208      	movs	r2, #8
    38d2:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    38d4:	4b50      	ldr	r3, [pc, #320]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    38d6:	6819      	ldr	r1, [r3, #0]
    38d8:	23a8      	movs	r3, #168	; 0xa8
    38da:	687a      	ldr	r2, [r7, #4]
    38dc:	188a      	adds	r2, r1, r2
    38de:	18d3      	adds	r3, r2, r3
    38e0:	799b      	ldrb	r3, [r3, #6]
    38e2:	1c1a      	adds	r2, r3, #0
    38e4:	2302      	movs	r3, #2
    38e6:	4013      	ands	r3, r2
    38e8:	d01d      	beq.n	3926 <_usb_host_interrupt_handler+0x20e>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    38ea:	687b      	ldr	r3, [r7, #4]
    38ec:	b2da      	uxtb	r2, r3
    38ee:	4b4d      	ldr	r3, [pc, #308]	; (3a24 <_usb_host_interrupt_handler+0x30c>)
    38f0:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    38f2:	4a4d      	ldr	r2, [pc, #308]	; (3a28 <_usb_host_interrupt_handler+0x310>)
    38f4:	687b      	ldr	r3, [r7, #4]
    38f6:	015b      	lsls	r3, r3, #5
    38f8:	18d3      	adds	r3, r2, r3
    38fa:	3308      	adds	r3, #8
    38fc:	88db      	ldrh	r3, [r3, #6]
    38fe:	b29b      	uxth	r3, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
				pipe_callback_para.pipe_error_status =
    3900:	b2da      	uxtb	r2, r3
    3902:	231f      	movs	r3, #31
    3904:	4013      	ands	r3, r2
    3906:	b2da      	uxtb	r2, r3
    3908:	4b46      	ldr	r3, [pc, #280]	; (3a24 <_usb_host_interrupt_handler+0x30c>)
    390a:	705a      	strb	r2, [r3, #1]
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
				(_usb_instances->host_pipe_callback[pipe_int]
    390c:	4b42      	ldr	r3, [pc, #264]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    390e:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    3910:	687b      	ldr	r3, [r7, #4]
    3912:	011b      	lsls	r3, r3, #4
    3914:	18d3      	adds	r3, r2, r3
    3916:	3324      	adds	r3, #36	; 0x24
    3918:	685a      	ldr	r2, [r3, #4]
    391a:	4b3f      	ldr	r3, [pc, #252]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    391c:	6819      	ldr	r1, [r3, #0]
    391e:	4b41      	ldr	r3, [pc, #260]	; (3a24 <_usb_host_interrupt_handler+0x30c>)
    3920:	1c08      	adds	r0, r1, #0
    3922:	1c19      	adds	r1, r3, #0
    3924:	4790      	blx	r2
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    3926:	683a      	ldr	r2, [r7, #0]
    3928:	2310      	movs	r3, #16
    392a:	4013      	ands	r3, r2
    392c:	d03b      	beq.n	39a6 <_usb_host_interrupt_handler+0x28e>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    392e:	687b      	ldr	r3, [r7, #4]
    3930:	2201      	movs	r2, #1
    3932:	1c11      	adds	r1, r2, #0
    3934:	4099      	lsls	r1, r3
    3936:	1c0b      	adds	r3, r1, #0
    3938:	43db      	mvns	r3, r3
    393a:	1c1a      	adds	r2, r3, #0
    393c:	4b38      	ldr	r3, [pc, #224]	; (3a20 <_usb_host_interrupt_handler+0x308>)
    393e:	681b      	ldr	r3, [r3, #0]
    3940:	401a      	ands	r2, r3
    3942:	4b37      	ldr	r3, [pc, #220]	; (3a20 <_usb_host_interrupt_handler+0x308>)
    3944:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3946:	4b34      	ldr	r3, [pc, #208]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    3948:	681b      	ldr	r3, [r3, #0]
    394a:	681a      	ldr	r2, [r3, #0]
    394c:	687b      	ldr	r3, [r7, #4]
    394e:	3308      	adds	r3, #8
    3950:	015b      	lsls	r3, r3, #5
    3952:	18d3      	adds	r3, r2, r3
    3954:	2210      	movs	r2, #16
    3956:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3958:	4b2f      	ldr	r3, [pc, #188]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    395a:	6819      	ldr	r1, [r3, #0]
    395c:	23a8      	movs	r3, #168	; 0xa8
    395e:	687a      	ldr	r2, [r7, #4]
    3960:	188a      	adds	r2, r1, r2
    3962:	18d3      	adds	r3, r2, r3
    3964:	799b      	ldrb	r3, [r3, #6]
    3966:	1c1a      	adds	r2, r3, #0
    3968:	2304      	movs	r3, #4
    396a:	4013      	ands	r3, r2
    396c:	d01b      	beq.n	39a6 <_usb_host_interrupt_handler+0x28e>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    396e:	687b      	ldr	r3, [r7, #4]
    3970:	b2da      	uxtb	r2, r3
    3972:	4b2c      	ldr	r3, [pc, #176]	; (3a24 <_usb_host_interrupt_handler+0x30c>)
    3974:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3976:	4a2c      	ldr	r2, [pc, #176]	; (3a28 <_usb_host_interrupt_handler+0x310>)
    3978:	687b      	ldr	r3, [r7, #4]
    397a:	015b      	lsls	r3, r3, #5
    397c:	18d3      	adds	r3, r2, r3
    397e:	685b      	ldr	r3, [r3, #4]
    3980:	0b9b      	lsrs	r3, r3, #14
    3982:	049b      	lsls	r3, r3, #18
    3984:	0c9b      	lsrs	r3, r3, #18
    3986:	b29b      	uxth	r3, r3
    3988:	1c1a      	adds	r2, r3, #0
    398a:	4b26      	ldr	r3, [pc, #152]	; (3a24 <_usb_host_interrupt_handler+0x30c>)
    398c:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    398e:	4b22      	ldr	r3, [pc, #136]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    3990:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    3992:	687b      	ldr	r3, [r7, #4]
    3994:	011b      	lsls	r3, r3, #4
    3996:	18d3      	adds	r3, r2, r3
    3998:	3328      	adds	r3, #40	; 0x28
    399a:	685a      	ldr	r2, [r3, #4]
    399c:	4b1e      	ldr	r3, [pc, #120]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    399e:	681b      	ldr	r3, [r3, #0]
    39a0:	1c18      	adds	r0, r3, #0
    39a2:	2100      	movs	r1, #0
    39a4:	4790      	blx	r2
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    39a6:	683a      	ldr	r2, [r7, #0]
    39a8:	2320      	movs	r3, #32
    39aa:	4013      	ands	r3, r2
    39ac:	d100      	bne.n	39b0 <_usb_host_interrupt_handler+0x298>
    39ae:	e115      	b.n	3bdc <_usb_host_interrupt_handler+0x4c4>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    39b0:	687b      	ldr	r3, [r7, #4]
    39b2:	2201      	movs	r2, #1
    39b4:	1c11      	adds	r1, r2, #0
    39b6:	4099      	lsls	r1, r3
    39b8:	1c0b      	adds	r3, r1, #0
    39ba:	43db      	mvns	r3, r3
    39bc:	1c1a      	adds	r2, r3, #0
    39be:	4b18      	ldr	r3, [pc, #96]	; (3a20 <_usb_host_interrupt_handler+0x308>)
    39c0:	681b      	ldr	r3, [r3, #0]
    39c2:	401a      	ands	r2, r3
    39c4:	4b16      	ldr	r3, [pc, #88]	; (3a20 <_usb_host_interrupt_handler+0x308>)
    39c6:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    39c8:	4b13      	ldr	r3, [pc, #76]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    39ca:	681b      	ldr	r3, [r3, #0]
    39cc:	681a      	ldr	r2, [r3, #0]
    39ce:	687b      	ldr	r3, [r7, #4]
    39d0:	3308      	adds	r3, #8
    39d2:	015b      	lsls	r3, r3, #5
    39d4:	18d3      	adds	r3, r2, r3
    39d6:	2220      	movs	r2, #32
    39d8:	71da      	strb	r2, [r3, #7]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    39da:	4b0f      	ldr	r3, [pc, #60]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    39dc:	6819      	ldr	r1, [r3, #0]
    39de:	23a8      	movs	r3, #168	; 0xa8
    39e0:	687a      	ldr	r2, [r7, #4]
    39e2:	188a      	adds	r2, r1, r2
    39e4:	18d3      	adds	r3, r2, r3
    39e6:	799b      	ldrb	r3, [r3, #6]
    39e8:	1c1a      	adds	r2, r3, #0
    39ea:	2308      	movs	r3, #8
    39ec:	4013      	ands	r3, r2
    39ee:	d100      	bne.n	39f2 <_usb_host_interrupt_handler+0x2da>
    39f0:	e0f4      	b.n	3bdc <_usb_host_interrupt_handler+0x4c4>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    39f2:	687b      	ldr	r3, [r7, #4]
    39f4:	b2da      	uxtb	r2, r3
    39f6:	4b0b      	ldr	r3, [pc, #44]	; (3a24 <_usb_host_interrupt_handler+0x30c>)
    39f8:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    39fa:	4b07      	ldr	r3, [pc, #28]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    39fc:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    39fe:	687b      	ldr	r3, [r7, #4]
    3a00:	011b      	lsls	r3, r3, #4
    3a02:	18d3      	adds	r3, r2, r3
    3a04:	332c      	adds	r3, #44	; 0x2c
    3a06:	685a      	ldr	r2, [r3, #4]
    3a08:	4b03      	ldr	r3, [pc, #12]	; (3a18 <_usb_host_interrupt_handler+0x300>)
    3a0a:	6819      	ldr	r1, [r3, #0]
    3a0c:	4b05      	ldr	r3, [pc, #20]	; (3a24 <_usb_host_interrupt_handler+0x30c>)
    3a0e:	1c08      	adds	r0, r1, #0
    3a10:	1c19      	adds	r1, r3, #0
    3a12:	4790      	blx	r2
    3a14:	e0e2      	b.n	3bdc <_usb_host_interrupt_handler+0x4c4>
    3a16:	46c0      	nop			; (mov r8, r8)
    3a18:	20000730 	.word	0x20000730
    3a1c:	000066f5 	.word	0x000066f5
    3a20:	20000748 	.word	0x20000748
    3a24:	20000734 	.word	0x20000734
    3a28:	20000cf4 	.word	0x20000cf4
    3a2c:	f0003fff 	.word	0xf0003fff

	} else {
		/* host interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    3a30:	4b6c      	ldr	r3, [pc, #432]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3a32:	681b      	ldr	r3, [r3, #0]
    3a34:	681b      	ldr	r3, [r3, #0]
    3a36:	8b9b      	ldrh	r3, [r3, #28]
    3a38:	b29b      	uxth	r3, r3
    3a3a:	603b      	str	r3, [r7, #0]

		/* host SOF interrupt */
		if (flags & USB_HOST_INTFLAG_HSOF) {
    3a3c:	683a      	ldr	r2, [r7, #0]
    3a3e:	2304      	movs	r3, #4
    3a40:	4013      	ands	r3, r2
    3a42:	d013      	beq.n	3a6c <_usb_host_interrupt_handler+0x354>
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    3a44:	4b67      	ldr	r3, [pc, #412]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3a46:	681b      	ldr	r3, [r3, #0]
    3a48:	681b      	ldr	r3, [r3, #0]
    3a4a:	2204      	movs	r2, #4
    3a4c:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    3a4e:	4b65      	ldr	r3, [pc, #404]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3a50:	681a      	ldr	r2, [r3, #0]
    3a52:	23a5      	movs	r3, #165	; 0xa5
    3a54:	5cd3      	ldrb	r3, [r2, r3]
    3a56:	1c1a      	adds	r2, r3, #0
    3a58:	2301      	movs	r3, #1
    3a5a:	4013      	ands	r3, r2
    3a5c:	d006      	beq.n	3a6c <_usb_host_interrupt_handler+0x354>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    3a5e:	4b61      	ldr	r3, [pc, #388]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3a60:	681b      	ldr	r3, [r3, #0]
    3a62:	685a      	ldr	r2, [r3, #4]
    3a64:	4b5f      	ldr	r3, [pc, #380]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3a66:	681b      	ldr	r3, [r3, #0]
    3a68:	1c18      	adds	r0, r3, #0
    3a6a:	4790      	blx	r2
			}
		}

		/* host reset interrupt */
		if (flags & USB_HOST_INTFLAG_RST) {
    3a6c:	683a      	ldr	r2, [r7, #0]
    3a6e:	2308      	movs	r3, #8
    3a70:	4013      	ands	r3, r2
    3a72:	d016      	beq.n	3aa2 <_usb_host_interrupt_handler+0x38a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    3a74:	4b5c      	ldr	r3, [pc, #368]	; (3be8 <_usb_host_interrupt_handler+0x4d0>)
    3a76:	2200      	movs	r2, #0
    3a78:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    3a7a:	4b5a      	ldr	r3, [pc, #360]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3a7c:	681b      	ldr	r3, [r3, #0]
    3a7e:	681b      	ldr	r3, [r3, #0]
    3a80:	2208      	movs	r2, #8
    3a82:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    3a84:	4b57      	ldr	r3, [pc, #348]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3a86:	681a      	ldr	r2, [r3, #0]
    3a88:	23a5      	movs	r3, #165	; 0xa5
    3a8a:	5cd3      	ldrb	r3, [r2, r3]
    3a8c:	1c1a      	adds	r2, r3, #0
    3a8e:	2302      	movs	r3, #2
    3a90:	4013      	ands	r3, r2
    3a92:	d006      	beq.n	3aa2 <_usb_host_interrupt_handler+0x38a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    3a94:	4b53      	ldr	r3, [pc, #332]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3a96:	681b      	ldr	r3, [r3, #0]
    3a98:	689a      	ldr	r2, [r3, #8]
    3a9a:	4b52      	ldr	r3, [pc, #328]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3a9c:	681b      	ldr	r3, [r3, #0]
    3a9e:	1c18      	adds	r0, r3, #0
    3aa0:	4790      	blx	r2
			}
		}

		/* host upstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    3aa2:	683a      	ldr	r2, [r7, #0]
    3aa4:	2340      	movs	r3, #64	; 0x40
    3aa6:	4013      	ands	r3, r2
    3aa8:	d013      	beq.n	3ad2 <_usb_host_interrupt_handler+0x3ba>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    3aaa:	4b4e      	ldr	r3, [pc, #312]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3aac:	681b      	ldr	r3, [r3, #0]
    3aae:	681b      	ldr	r3, [r3, #0]
    3ab0:	2240      	movs	r2, #64	; 0x40
    3ab2:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    3ab4:	4b4b      	ldr	r3, [pc, #300]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3ab6:	681a      	ldr	r2, [r3, #0]
    3ab8:	23a5      	movs	r3, #165	; 0xa5
    3aba:	5cd3      	ldrb	r3, [r2, r3]
    3abc:	1c1a      	adds	r2, r3, #0
    3abe:	2310      	movs	r3, #16
    3ac0:	4013      	ands	r3, r2
    3ac2:	d006      	beq.n	3ad2 <_usb_host_interrupt_handler+0x3ba>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    3ac4:	4b47      	ldr	r3, [pc, #284]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3ac6:	681b      	ldr	r3, [r3, #0]
    3ac8:	695a      	ldr	r2, [r3, #20]
    3aca:	4b46      	ldr	r3, [pc, #280]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3acc:	681b      	ldr	r3, [r3, #0]
    3ace:	1c18      	adds	r0, r3, #0
    3ad0:	4790      	blx	r2
			}
		}

		/* host downstream resume interrupts */
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    3ad2:	683a      	ldr	r2, [r7, #0]
    3ad4:	2320      	movs	r3, #32
    3ad6:	4013      	ands	r3, r2
    3ad8:	d013      	beq.n	3b02 <_usb_host_interrupt_handler+0x3ea>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    3ada:	4b42      	ldr	r3, [pc, #264]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3adc:	681b      	ldr	r3, [r3, #0]
    3ade:	681b      	ldr	r3, [r3, #0]
    3ae0:	2220      	movs	r2, #32
    3ae2:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    3ae4:	4b3f      	ldr	r3, [pc, #252]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3ae6:	681a      	ldr	r2, [r3, #0]
    3ae8:	23a5      	movs	r3, #165	; 0xa5
    3aea:	5cd3      	ldrb	r3, [r2, r3]
    3aec:	1c1a      	adds	r2, r3, #0
    3aee:	2308      	movs	r3, #8
    3af0:	4013      	ands	r3, r2
    3af2:	d006      	beq.n	3b02 <_usb_host_interrupt_handler+0x3ea>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    3af4:	4b3b      	ldr	r3, [pc, #236]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3af6:	681b      	ldr	r3, [r3, #0]
    3af8:	691a      	ldr	r2, [r3, #16]
    3afa:	4b3a      	ldr	r3, [pc, #232]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3afc:	681b      	ldr	r3, [r3, #0]
    3afe:	1c18      	adds	r0, r3, #0
    3b00:	4790      	blx	r2
			}
		}

		/* host wakeup interrupts */
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    3b02:	683a      	ldr	r2, [r7, #0]
    3b04:	2310      	movs	r3, #16
    3b06:	4013      	ands	r3, r2
    3b08:	d013      	beq.n	3b32 <_usb_host_interrupt_handler+0x41a>
			/* clear the flags */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    3b0a:	4b36      	ldr	r3, [pc, #216]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3b0c:	681b      	ldr	r3, [r3, #0]
    3b0e:	681b      	ldr	r3, [r3, #0]
    3b10:	2210      	movs	r2, #16
    3b12:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    3b14:	4b33      	ldr	r3, [pc, #204]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3b16:	681a      	ldr	r2, [r3, #0]
    3b18:	23a5      	movs	r3, #165	; 0xa5
    3b1a:	5cd3      	ldrb	r3, [r2, r3]
    3b1c:	1c1a      	adds	r2, r3, #0
    3b1e:	2304      	movs	r3, #4
    3b20:	4013      	ands	r3, r2
    3b22:	d006      	beq.n	3b32 <_usb_host_interrupt_handler+0x41a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    3b24:	4b2f      	ldr	r3, [pc, #188]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3b26:	681b      	ldr	r3, [r3, #0]
    3b28:	68da      	ldr	r2, [r3, #12]
    3b2a:	4b2e      	ldr	r3, [pc, #184]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3b2c:	681b      	ldr	r3, [r3, #0]
    3b2e:	1c18      	adds	r0, r3, #0
    3b30:	4790      	blx	r2
			}
		}

		/* host ram access interrupt  */
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    3b32:	683a      	ldr	r2, [r7, #0]
    3b34:	2380      	movs	r3, #128	; 0x80
    3b36:	4013      	ands	r3, r2
    3b38:	d016      	beq.n	3b68 <_usb_host_interrupt_handler+0x450>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    3b3a:	4b2b      	ldr	r3, [pc, #172]	; (3be8 <_usb_host_interrupt_handler+0x4d0>)
    3b3c:	2200      	movs	r2, #0
    3b3e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3b40:	4b28      	ldr	r3, [pc, #160]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3b42:	681b      	ldr	r3, [r3, #0]
    3b44:	681b      	ldr	r3, [r3, #0]
    3b46:	2280      	movs	r2, #128	; 0x80
    3b48:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    3b4a:	4b26      	ldr	r3, [pc, #152]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3b4c:	681a      	ldr	r2, [r3, #0]
    3b4e:	23a5      	movs	r3, #165	; 0xa5
    3b50:	5cd3      	ldrb	r3, [r2, r3]
    3b52:	1c1a      	adds	r2, r3, #0
    3b54:	2320      	movs	r3, #32
    3b56:	4013      	ands	r3, r2
    3b58:	d006      	beq.n	3b68 <_usb_host_interrupt_handler+0x450>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    3b5a:	4b22      	ldr	r3, [pc, #136]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3b5c:	681b      	ldr	r3, [r3, #0]
    3b5e:	699a      	ldr	r2, [r3, #24]
    3b60:	4b20      	ldr	r3, [pc, #128]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3b62:	681b      	ldr	r3, [r3, #0]
    3b64:	1c18      	adds	r0, r3, #0
    3b66:	4790      	blx	r2
			}
		}

		/* host connect interrupt */
		if (flags & USB_HOST_INTFLAG_DCONN) {
    3b68:	683a      	ldr	r2, [r7, #0]
    3b6a:	2380      	movs	r3, #128	; 0x80
    3b6c:	005b      	lsls	r3, r3, #1
    3b6e:	4013      	ands	r3, r2
    3b70:	d017      	beq.n	3ba2 <_usb_host_interrupt_handler+0x48a>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    3b72:	4b1d      	ldr	r3, [pc, #116]	; (3be8 <_usb_host_interrupt_handler+0x4d0>)
    3b74:	2200      	movs	r2, #0
    3b76:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3b78:	4b1a      	ldr	r3, [pc, #104]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3b7a:	681b      	ldr	r3, [r3, #0]
    3b7c:	681b      	ldr	r3, [r3, #0]
    3b7e:	2280      	movs	r2, #128	; 0x80
    3b80:	0052      	lsls	r2, r2, #1
    3b82:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    3b84:	4b17      	ldr	r3, [pc, #92]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3b86:	681a      	ldr	r2, [r3, #0]
    3b88:	23a5      	movs	r3, #165	; 0xa5
    3b8a:	5cd3      	ldrb	r3, [r2, r3]
    3b8c:	1c1a      	adds	r2, r3, #0
    3b8e:	2340      	movs	r3, #64	; 0x40
    3b90:	4013      	ands	r3, r2
    3b92:	d006      	beq.n	3ba2 <_usb_host_interrupt_handler+0x48a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    3b94:	4b13      	ldr	r3, [pc, #76]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3b96:	681b      	ldr	r3, [r3, #0]
    3b98:	69da      	ldr	r2, [r3, #28]
    3b9a:	4b12      	ldr	r3, [pc, #72]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3b9c:	681b      	ldr	r3, [r3, #0]
    3b9e:	1c18      	adds	r0, r3, #0
    3ba0:	4790      	blx	r2
			}
		}

		/* host disconnect interrupt 	*/
		if (flags & USB_HOST_INTFLAG_DDISC) {
    3ba2:	683a      	ldr	r2, [r7, #0]
    3ba4:	2380      	movs	r3, #128	; 0x80
    3ba6:	009b      	lsls	r3, r3, #2
    3ba8:	4013      	ands	r3, r2
    3baa:	d017      	beq.n	3bdc <_usb_host_interrupt_handler+0x4c4>
			/* Clear busy status */
			host_pipe_job_busy_status = 0;
    3bac:	4b0e      	ldr	r3, [pc, #56]	; (3be8 <_usb_host_interrupt_handler+0x4d0>)
    3bae:	2200      	movs	r2, #0
    3bb0:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    3bb2:	4b0c      	ldr	r3, [pc, #48]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3bb4:	681b      	ldr	r3, [r3, #0]
    3bb6:	681b      	ldr	r3, [r3, #0]
    3bb8:	2280      	movs	r2, #128	; 0x80
    3bba:	0092      	lsls	r2, r2, #2
    3bbc:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    3bbe:	4b09      	ldr	r3, [pc, #36]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3bc0:	681a      	ldr	r2, [r3, #0]
    3bc2:	23a5      	movs	r3, #165	; 0xa5
    3bc4:	5cd3      	ldrb	r3, [r2, r3]
    3bc6:	b2db      	uxtb	r3, r3
    3bc8:	b25b      	sxtb	r3, r3
    3bca:	2b00      	cmp	r3, #0
    3bcc:	da06      	bge.n	3bdc <_usb_host_interrupt_handler+0x4c4>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    3bce:	4b05      	ldr	r3, [pc, #20]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3bd0:	681b      	ldr	r3, [r3, #0]
    3bd2:	6a1a      	ldr	r2, [r3, #32]
    3bd4:	4b03      	ldr	r3, [pc, #12]	; (3be4 <_usb_host_interrupt_handler+0x4cc>)
    3bd6:	681b      	ldr	r3, [r3, #0]
    3bd8:	1c18      	adds	r0, r3, #0
    3bda:	4790      	blx	r2
			}
		}

	}
}
    3bdc:	46bd      	mov	sp, r7
    3bde:	b002      	add	sp, #8
    3be0:	bd80      	pop	{r7, pc}
    3be2:	46c0      	nop			; (mov r8, r8)
    3be4:	20000730 	.word	0x20000730
    3be8:	20000748 	.word	0x20000748

00003bec <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    3bec:	b580      	push	{r7, lr}
    3bee:	b084      	sub	sp, #16
    3bf0:	af00      	add	r7, sp, #0
    3bf2:	60f8      	str	r0, [r7, #12]
    3bf4:	607a      	str	r2, [r7, #4]
    3bf6:	1c3b      	adds	r3, r7, #0
    3bf8:	330b      	adds	r3, #11
    3bfa:	1c0a      	adds	r2, r1, #0
    3bfc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    3bfe:	1c3b      	adds	r3, r7, #0
    3c00:	330b      	adds	r3, #11
    3c02:	781a      	ldrb	r2, [r3, #0]
    3c04:	68fb      	ldr	r3, [r7, #12]
    3c06:	322e      	adds	r2, #46	; 0x2e
    3c08:	0092      	lsls	r2, r2, #2
    3c0a:	6879      	ldr	r1, [r7, #4]
    3c0c:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    3c0e:	68fa      	ldr	r2, [r7, #12]
    3c10:	23aa      	movs	r3, #170	; 0xaa
    3c12:	005b      	lsls	r3, r3, #1
    3c14:	5ad2      	ldrh	r2, [r2, r3]
    3c16:	1c3b      	adds	r3, r7, #0
    3c18:	330b      	adds	r3, #11
    3c1a:	7819      	ldrb	r1, [r3, #0]
    3c1c:	4b06      	ldr	r3, [pc, #24]	; (3c38 <usb_device_register_callback+0x4c>)
    3c1e:	0049      	lsls	r1, r1, #1
    3c20:	5acb      	ldrh	r3, [r1, r3]
    3c22:	4313      	orrs	r3, r2
    3c24:	b299      	uxth	r1, r3
    3c26:	68fa      	ldr	r2, [r7, #12]
    3c28:	23aa      	movs	r3, #170	; 0xaa
    3c2a:	005b      	lsls	r3, r3, #1
    3c2c:	52d1      	strh	r1, [r2, r3]

	return STATUS_OK;
    3c2e:	2300      	movs	r3, #0
}
    3c30:	1c18      	adds	r0, r3, #0
    3c32:	46bd      	mov	sp, r7
    3c34:	b004      	add	sp, #16
    3c36:	bd80      	pop	{r7, pc}
    3c38:	000067fc 	.word	0x000067fc

00003c3c <usb_device_enable_callback>:
 * \return Status of the callback enable operation.
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_enable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    3c3c:	b580      	push	{r7, lr}
    3c3e:	b082      	sub	sp, #8
    3c40:	af00      	add	r7, sp, #0
    3c42:	6078      	str	r0, [r7, #4]
    3c44:	1c0a      	adds	r2, r1, #0
    3c46:	1cfb      	adds	r3, r7, #3
    3c48:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    3c4a:	687b      	ldr	r3, [r7, #4]
    3c4c:	681b      	ldr	r3, [r3, #0]
    3c4e:	1cfa      	adds	r2, r7, #3
    3c50:	7811      	ldrb	r1, [r2, #0]
    3c52:	4a10      	ldr	r2, [pc, #64]	; (3c94 <usb_device_enable_callback+0x58>)
    3c54:	0049      	lsls	r1, r1, #1
    3c56:	5a8a      	ldrh	r2, [r1, r2]
    3c58:	839a      	strh	r2, [r3, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    3c5a:	687a      	ldr	r2, [r7, #4]
    3c5c:	23ab      	movs	r3, #171	; 0xab
    3c5e:	005b      	lsls	r3, r3, #1
    3c60:	5ad2      	ldrh	r2, [r2, r3]
    3c62:	1cfb      	adds	r3, r7, #3
    3c64:	7819      	ldrb	r1, [r3, #0]
    3c66:	4b0b      	ldr	r3, [pc, #44]	; (3c94 <usb_device_enable_callback+0x58>)
    3c68:	0049      	lsls	r1, r1, #1
    3c6a:	5acb      	ldrh	r3, [r1, r3]
    3c6c:	4313      	orrs	r3, r2
    3c6e:	b299      	uxth	r1, r3
    3c70:	687a      	ldr	r2, [r7, #4]
    3c72:	23ab      	movs	r3, #171	; 0xab
    3c74:	005b      	lsls	r3, r3, #1
    3c76:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    3c78:	687b      	ldr	r3, [r7, #4]
    3c7a:	681b      	ldr	r3, [r3, #0]
    3c7c:	1cfa      	adds	r2, r7, #3
    3c7e:	7811      	ldrb	r1, [r2, #0]
    3c80:	4a04      	ldr	r2, [pc, #16]	; (3c94 <usb_device_enable_callback+0x58>)
    3c82:	0049      	lsls	r1, r1, #1
    3c84:	5a8a      	ldrh	r2, [r1, r2]
    3c86:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
    3c88:	2300      	movs	r3, #0
}
    3c8a:	1c18      	adds	r0, r3, #0
    3c8c:	46bd      	mov	sp, r7
    3c8e:	b002      	add	sp, #8
    3c90:	bd80      	pop	{r7, pc}
    3c92:	46c0      	nop			; (mov r8, r8)
    3c94:	000067fc 	.word	0x000067fc

00003c98 <usb_device_disable_callback>:
 * \return Status of the callback disable operation.
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_disable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    3c98:	b580      	push	{r7, lr}
    3c9a:	b082      	sub	sp, #8
    3c9c:	af00      	add	r7, sp, #0
    3c9e:	6078      	str	r0, [r7, #4]
    3ca0:	1c0a      	adds	r2, r1, #0
    3ca2:	1cfb      	adds	r3, r7, #3
    3ca4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    3ca6:	687a      	ldr	r2, [r7, #4]
    3ca8:	23ab      	movs	r3, #171	; 0xab
    3caa:	005b      	lsls	r3, r3, #1
    3cac:	5ad3      	ldrh	r3, [r2, r3]
    3cae:	b29b      	uxth	r3, r3
    3cb0:	1cfa      	adds	r2, r7, #3
    3cb2:	7811      	ldrb	r1, [r2, #0]
    3cb4:	4a0c      	ldr	r2, [pc, #48]	; (3ce8 <usb_device_disable_callback+0x50>)
    3cb6:	0049      	lsls	r1, r1, #1
    3cb8:	5a8a      	ldrh	r2, [r1, r2]
    3cba:	b292      	uxth	r2, r2
    3cbc:	43d2      	mvns	r2, r2
    3cbe:	b292      	uxth	r2, r2
    3cc0:	4013      	ands	r3, r2
    3cc2:	b29b      	uxth	r3, r3
    3cc4:	b299      	uxth	r1, r3
    3cc6:	687a      	ldr	r2, [r7, #4]
    3cc8:	23ab      	movs	r3, #171	; 0xab
    3cca:	005b      	lsls	r3, r3, #1
    3ccc:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    3cce:	687b      	ldr	r3, [r7, #4]
    3cd0:	681b      	ldr	r3, [r3, #0]
    3cd2:	1cfa      	adds	r2, r7, #3
    3cd4:	7811      	ldrb	r1, [r2, #0]
    3cd6:	4a04      	ldr	r2, [pc, #16]	; (3ce8 <usb_device_disable_callback+0x50>)
    3cd8:	0049      	lsls	r1, r1, #1
    3cda:	5a8a      	ldrh	r2, [r1, r2]
    3cdc:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    3cde:	2300      	movs	r3, #0
}
    3ce0:	1c18      	adds	r0, r3, #0
    3ce2:	46bd      	mov	sp, r7
    3ce4:	b002      	add	sp, #8
    3ce6:	bd80      	pop	{r7, pc}
    3ce8:	000067fc 	.word	0x000067fc

00003cec <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    3cec:	b580      	push	{r7, lr}
    3cee:	b084      	sub	sp, #16
    3cf0:	af00      	add	r7, sp, #0
    3cf2:	60f8      	str	r0, [r7, #12]
    3cf4:	607b      	str	r3, [r7, #4]
    3cf6:	1c3b      	adds	r3, r7, #0
    3cf8:	330b      	adds	r3, #11
    3cfa:	7019      	strb	r1, [r3, #0]
    3cfc:	1c3b      	adds	r3, r7, #0
    3cfe:	330a      	adds	r3, #10
    3d00:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    3d02:	1c3b      	adds	r3, r7, #0
    3d04:	330b      	adds	r3, #11
    3d06:	7819      	ldrb	r1, [r3, #0]
    3d08:	1c3b      	adds	r3, r7, #0
    3d0a:	330a      	adds	r3, #10
    3d0c:	781b      	ldrb	r3, [r3, #0]
    3d0e:	68fa      	ldr	r2, [r7, #12]
    3d10:	0089      	lsls	r1, r1, #2
    3d12:	18cb      	adds	r3, r1, r3
    3d14:	3334      	adds	r3, #52	; 0x34
    3d16:	009b      	lsls	r3, r3, #2
    3d18:	18d3      	adds	r3, r2, r3
    3d1a:	687a      	ldr	r2, [r7, #4]
    3d1c:	605a      	str	r2, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3d1e:	1c3b      	adds	r3, r7, #0
    3d20:	330b      	adds	r3, #11
    3d22:	7819      	ldrb	r1, [r3, #0]
    3d24:	1c3b      	adds	r3, r7, #0
    3d26:	330b      	adds	r3, #11
    3d28:	781a      	ldrb	r2, [r3, #0]
    3d2a:	68f8      	ldr	r0, [r7, #12]
    3d2c:	23ac      	movs	r3, #172	; 0xac
    3d2e:	005b      	lsls	r3, r3, #1
    3d30:	1882      	adds	r2, r0, r2
    3d32:	18d3      	adds	r3, r2, r3
    3d34:	781a      	ldrb	r2, [r3, #0]
    3d36:	1c3b      	adds	r3, r7, #0
    3d38:	330a      	adds	r3, #10
    3d3a:	781b      	ldrb	r3, [r3, #0]
    3d3c:	4807      	ldr	r0, [pc, #28]	; (3d5c <usb_device_endpoint_register_callback+0x70>)
    3d3e:	5cc3      	ldrb	r3, [r0, r3]
    3d40:	4313      	orrs	r3, r2
    3d42:	b2da      	uxtb	r2, r3
    3d44:	68f8      	ldr	r0, [r7, #12]
    3d46:	23ac      	movs	r3, #172	; 0xac
    3d48:	005b      	lsls	r3, r3, #1
    3d4a:	1841      	adds	r1, r0, r1
    3d4c:	18cb      	adds	r3, r1, r3
    3d4e:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    3d50:	2300      	movs	r3, #0
}
    3d52:	1c18      	adds	r0, r3, #0
    3d54:	46bd      	mov	sp, r7
    3d56:	b004      	add	sp, #16
    3d58:	bd80      	pop	{r7, pc}
    3d5a:	46c0      	nop			; (mov r8, r8)
    3d5c:	0000680c 	.word	0x0000680c

00003d60 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    3d60:	b580      	push	{r7, lr}
    3d62:	b082      	sub	sp, #8
    3d64:	af00      	add	r7, sp, #0
    3d66:	6078      	str	r0, [r7, #4]
    3d68:	1cfb      	adds	r3, r7, #3
    3d6a:	7019      	strb	r1, [r3, #0]
    3d6c:	1cbb      	adds	r3, r7, #2
    3d6e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    3d70:	1cfb      	adds	r3, r7, #3
    3d72:	7819      	ldrb	r1, [r3, #0]
    3d74:	1cbb      	adds	r3, r7, #2
    3d76:	781b      	ldrb	r3, [r3, #0]
    3d78:	687a      	ldr	r2, [r7, #4]
    3d7a:	0089      	lsls	r1, r1, #2
    3d7c:	18cb      	adds	r3, r1, r3
    3d7e:	3334      	adds	r3, #52	; 0x34
    3d80:	009b      	lsls	r3, r3, #2
    3d82:	18d3      	adds	r3, r2, r3
    3d84:	2200      	movs	r2, #0
    3d86:	605a      	str	r2, [r3, #4]

	/* Clear the bit corresponding to the callback_type */
	module_inst->deivce_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3d88:	1cfb      	adds	r3, r7, #3
    3d8a:	7819      	ldrb	r1, [r3, #0]
    3d8c:	1cfb      	adds	r3, r7, #3
    3d8e:	781a      	ldrb	r2, [r3, #0]
    3d90:	6878      	ldr	r0, [r7, #4]
    3d92:	23ac      	movs	r3, #172	; 0xac
    3d94:	005b      	lsls	r3, r3, #1
    3d96:	1882      	adds	r2, r0, r2
    3d98:	18d3      	adds	r3, r2, r3
    3d9a:	781b      	ldrb	r3, [r3, #0]
    3d9c:	b2db      	uxtb	r3, r3
    3d9e:	1cba      	adds	r2, r7, #2
    3da0:	7812      	ldrb	r2, [r2, #0]
    3da2:	4809      	ldr	r0, [pc, #36]	; (3dc8 <usb_device_endpoint_unregister_callback+0x68>)
    3da4:	5c82      	ldrb	r2, [r0, r2]
    3da6:	b2d2      	uxtb	r2, r2
    3da8:	43d2      	mvns	r2, r2
    3daa:	b2d2      	uxtb	r2, r2
    3dac:	4013      	ands	r3, r2
    3dae:	b2db      	uxtb	r3, r3
    3db0:	b2da      	uxtb	r2, r3
    3db2:	6878      	ldr	r0, [r7, #4]
    3db4:	23ac      	movs	r3, #172	; 0xac
    3db6:	005b      	lsls	r3, r3, #1
    3db8:	1841      	adds	r1, r0, r1
    3dba:	18cb      	adds	r3, r1, r3
    3dbc:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    3dbe:	2300      	movs	r3, #0
}
    3dc0:	1c18      	adds	r0, r3, #0
    3dc2:	46bd      	mov	sp, r7
    3dc4:	b002      	add	sp, #8
    3dc6:	bd80      	pop	{r7, pc}
    3dc8:	0000680c 	.word	0x0000680c

00003dcc <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3dcc:	b580      	push	{r7, lr}
    3dce:	b084      	sub	sp, #16
    3dd0:	af00      	add	r7, sp, #0
    3dd2:	6078      	str	r0, [r7, #4]
    3dd4:	1cfb      	adds	r3, r7, #3
    3dd6:	7019      	strb	r1, [r3, #0]
    3dd8:	1cbb      	adds	r3, r7, #2
    3dda:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3ddc:	1c3b      	adds	r3, r7, #0
    3dde:	330f      	adds	r3, #15
    3de0:	1cfa      	adds	r2, r7, #3
    3de2:	7811      	ldrb	r1, [r2, #0]
    3de4:	220f      	movs	r2, #15
    3de6:	400a      	ands	r2, r1
    3de8:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    3dea:	1c3b      	adds	r3, r7, #0
    3dec:	330f      	adds	r3, #15
    3dee:	7819      	ldrb	r1, [r3, #0]
    3df0:	1c3b      	adds	r3, r7, #0
    3df2:	330f      	adds	r3, #15
    3df4:	781a      	ldrb	r2, [r3, #0]
    3df6:	6878      	ldr	r0, [r7, #4]
    3df8:	23b0      	movs	r3, #176	; 0xb0
    3dfa:	005b      	lsls	r3, r3, #1
    3dfc:	1882      	adds	r2, r0, r2
    3dfe:	18d3      	adds	r3, r2, r3
    3e00:	781a      	ldrb	r2, [r3, #0]
    3e02:	1cbb      	adds	r3, r7, #2
    3e04:	781b      	ldrb	r3, [r3, #0]
    3e06:	4854      	ldr	r0, [pc, #336]	; (3f58 <usb_device_endpoint_enable_callback+0x18c>)
    3e08:	5cc3      	ldrb	r3, [r0, r3]
    3e0a:	4313      	orrs	r3, r2
    3e0c:	b2da      	uxtb	r2, r3
    3e0e:	6878      	ldr	r0, [r7, #4]
    3e10:	23b0      	movs	r3, #176	; 0xb0
    3e12:	005b      	lsls	r3, r3, #1
    3e14:	1841      	adds	r1, r0, r1
    3e16:	18cb      	adds	r3, r1, r3
    3e18:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3e1a:	1cbb      	adds	r3, r7, #2
    3e1c:	781b      	ldrb	r3, [r3, #0]
    3e1e:	2b00      	cmp	r3, #0
    3e20:	d12f      	bne.n	3e82 <usb_device_endpoint_enable_callback+0xb6>
		if (ep_num == 0) { // control endpoint
    3e22:	1c3b      	adds	r3, r7, #0
    3e24:	330f      	adds	r3, #15
    3e26:	781b      	ldrb	r3, [r3, #0]
    3e28:	2b00      	cmp	r3, #0
    3e2a:	d10c      	bne.n	3e46 <usb_device_endpoint_enable_callback+0x7a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    3e2c:	687b      	ldr	r3, [r7, #4]
    3e2e:	6819      	ldr	r1, [r3, #0]
    3e30:	1c3b      	adds	r3, r7, #0
    3e32:	330f      	adds	r3, #15
    3e34:	781a      	ldrb	r2, [r3, #0]
    3e36:	2384      	movs	r3, #132	; 0x84
    3e38:	005b      	lsls	r3, r3, #1
    3e3a:	0152      	lsls	r2, r2, #5
    3e3c:	188a      	adds	r2, r1, r2
    3e3e:	18d3      	adds	r3, r2, r3
    3e40:	2203      	movs	r2, #3
    3e42:	705a      	strb	r2, [r3, #1]
    3e44:	e01d      	b.n	3e82 <usb_device_endpoint_enable_callback+0xb6>
		} else if (ep & USB_EP_DIR_IN) {
    3e46:	1cfb      	adds	r3, r7, #3
    3e48:	781b      	ldrb	r3, [r3, #0]
    3e4a:	b25b      	sxtb	r3, r3
    3e4c:	2b00      	cmp	r3, #0
    3e4e:	da0c      	bge.n	3e6a <usb_device_endpoint_enable_callback+0x9e>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    3e50:	687b      	ldr	r3, [r7, #4]
    3e52:	6819      	ldr	r1, [r3, #0]
    3e54:	1c3b      	adds	r3, r7, #0
    3e56:	330f      	adds	r3, #15
    3e58:	781a      	ldrb	r2, [r3, #0]
    3e5a:	2384      	movs	r3, #132	; 0x84
    3e5c:	005b      	lsls	r3, r3, #1
    3e5e:	0152      	lsls	r2, r2, #5
    3e60:	188a      	adds	r2, r1, r2
    3e62:	18d3      	adds	r3, r2, r3
    3e64:	2202      	movs	r2, #2
    3e66:	705a      	strb	r2, [r3, #1]
    3e68:	e00b      	b.n	3e82 <usb_device_endpoint_enable_callback+0xb6>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    3e6a:	687b      	ldr	r3, [r7, #4]
    3e6c:	6819      	ldr	r1, [r3, #0]
    3e6e:	1c3b      	adds	r3, r7, #0
    3e70:	330f      	adds	r3, #15
    3e72:	781a      	ldrb	r2, [r3, #0]
    3e74:	2384      	movs	r3, #132	; 0x84
    3e76:	005b      	lsls	r3, r3, #1
    3e78:	0152      	lsls	r2, r2, #5
    3e7a:	188a      	adds	r2, r1, r2
    3e7c:	18d3      	adds	r3, r2, r3
    3e7e:	2201      	movs	r2, #1
    3e80:	705a      	strb	r2, [r3, #1]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    3e82:	1cbb      	adds	r3, r7, #2
    3e84:	781b      	ldrb	r3, [r3, #0]
    3e86:	2b01      	cmp	r3, #1
    3e88:	d12f      	bne.n	3eea <usb_device_endpoint_enable_callback+0x11e>
		if (ep_num == 0) { // control endpoint
    3e8a:	1c3b      	adds	r3, r7, #0
    3e8c:	330f      	adds	r3, #15
    3e8e:	781b      	ldrb	r3, [r3, #0]
    3e90:	2b00      	cmp	r3, #0
    3e92:	d10c      	bne.n	3eae <usb_device_endpoint_enable_callback+0xe2>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    3e94:	687b      	ldr	r3, [r7, #4]
    3e96:	6819      	ldr	r1, [r3, #0]
    3e98:	1c3b      	adds	r3, r7, #0
    3e9a:	330f      	adds	r3, #15
    3e9c:	781a      	ldrb	r2, [r3, #0]
    3e9e:	2384      	movs	r3, #132	; 0x84
    3ea0:	005b      	lsls	r3, r3, #1
    3ea2:	0152      	lsls	r2, r2, #5
    3ea4:	188a      	adds	r2, r1, r2
    3ea6:	18d3      	adds	r3, r2, r3
    3ea8:	220c      	movs	r2, #12
    3eaa:	705a      	strb	r2, [r3, #1]
    3eac:	e01d      	b.n	3eea <usb_device_endpoint_enable_callback+0x11e>
		} else if (ep & USB_EP_DIR_IN) {
    3eae:	1cfb      	adds	r3, r7, #3
    3eb0:	781b      	ldrb	r3, [r3, #0]
    3eb2:	b25b      	sxtb	r3, r3
    3eb4:	2b00      	cmp	r3, #0
    3eb6:	da0c      	bge.n	3ed2 <usb_device_endpoint_enable_callback+0x106>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    3eb8:	687b      	ldr	r3, [r7, #4]
    3eba:	6819      	ldr	r1, [r3, #0]
    3ebc:	1c3b      	adds	r3, r7, #0
    3ebe:	330f      	adds	r3, #15
    3ec0:	781a      	ldrb	r2, [r3, #0]
    3ec2:	2384      	movs	r3, #132	; 0x84
    3ec4:	005b      	lsls	r3, r3, #1
    3ec6:	0152      	lsls	r2, r2, #5
    3ec8:	188a      	adds	r2, r1, r2
    3eca:	18d3      	adds	r3, r2, r3
    3ecc:	2208      	movs	r2, #8
    3ece:	705a      	strb	r2, [r3, #1]
    3ed0:	e00b      	b.n	3eea <usb_device_endpoint_enable_callback+0x11e>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    3ed2:	687b      	ldr	r3, [r7, #4]
    3ed4:	6819      	ldr	r1, [r3, #0]
    3ed6:	1c3b      	adds	r3, r7, #0
    3ed8:	330f      	adds	r3, #15
    3eda:	781a      	ldrb	r2, [r3, #0]
    3edc:	2384      	movs	r3, #132	; 0x84
    3ede:	005b      	lsls	r3, r3, #1
    3ee0:	0152      	lsls	r2, r2, #5
    3ee2:	188a      	adds	r2, r1, r2
    3ee4:	18d3      	adds	r3, r2, r3
    3ee6:	2204      	movs	r2, #4
    3ee8:	705a      	strb	r2, [r3, #1]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    3eea:	1cbb      	adds	r3, r7, #2
    3eec:	781b      	ldrb	r3, [r3, #0]
    3eee:	2b02      	cmp	r3, #2
    3ef0:	d10b      	bne.n	3f0a <usb_device_endpoint_enable_callback+0x13e>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    3ef2:	687b      	ldr	r3, [r7, #4]
    3ef4:	6819      	ldr	r1, [r3, #0]
    3ef6:	1c3b      	adds	r3, r7, #0
    3ef8:	330f      	adds	r3, #15
    3efa:	781a      	ldrb	r2, [r3, #0]
    3efc:	2384      	movs	r3, #132	; 0x84
    3efe:	005b      	lsls	r3, r3, #1
    3f00:	0152      	lsls	r2, r2, #5
    3f02:	188a      	adds	r2, r1, r2
    3f04:	18d3      	adds	r3, r2, r3
    3f06:	2210      	movs	r2, #16
    3f08:	705a      	strb	r2, [r3, #1]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    3f0a:	1cbb      	adds	r3, r7, #2
    3f0c:	781b      	ldrb	r3, [r3, #0]
    3f0e:	2b03      	cmp	r3, #3
    3f10:	d11d      	bne.n	3f4e <usb_device_endpoint_enable_callback+0x182>
		if (ep & USB_EP_DIR_IN) {
    3f12:	1cfb      	adds	r3, r7, #3
    3f14:	781b      	ldrb	r3, [r3, #0]
    3f16:	b25b      	sxtb	r3, r3
    3f18:	2b00      	cmp	r3, #0
    3f1a:	da0c      	bge.n	3f36 <usb_device_endpoint_enable_callback+0x16a>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    3f1c:	687b      	ldr	r3, [r7, #4]
    3f1e:	6819      	ldr	r1, [r3, #0]
    3f20:	1c3b      	adds	r3, r7, #0
    3f22:	330f      	adds	r3, #15
    3f24:	781a      	ldrb	r2, [r3, #0]
    3f26:	2384      	movs	r3, #132	; 0x84
    3f28:	005b      	lsls	r3, r3, #1
    3f2a:	0152      	lsls	r2, r2, #5
    3f2c:	188a      	adds	r2, r1, r2
    3f2e:	18d3      	adds	r3, r2, r3
    3f30:	2240      	movs	r2, #64	; 0x40
    3f32:	705a      	strb	r2, [r3, #1]
    3f34:	e00b      	b.n	3f4e <usb_device_endpoint_enable_callback+0x182>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    3f36:	687b      	ldr	r3, [r7, #4]
    3f38:	6819      	ldr	r1, [r3, #0]
    3f3a:	1c3b      	adds	r3, r7, #0
    3f3c:	330f      	adds	r3, #15
    3f3e:	781a      	ldrb	r2, [r3, #0]
    3f40:	2384      	movs	r3, #132	; 0x84
    3f42:	005b      	lsls	r3, r3, #1
    3f44:	0152      	lsls	r2, r2, #5
    3f46:	188a      	adds	r2, r1, r2
    3f48:	18d3      	adds	r3, r2, r3
    3f4a:	2220      	movs	r2, #32
    3f4c:	705a      	strb	r2, [r3, #1]
		}
	}

	return STATUS_OK;
    3f4e:	2300      	movs	r3, #0
}
    3f50:	1c18      	adds	r0, r3, #0
    3f52:	46bd      	mov	sp, r7
    3f54:	b004      	add	sp, #16
    3f56:	bd80      	pop	{r7, pc}
    3f58:	0000680c 	.word	0x0000680c

00003f5c <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    3f5c:	b580      	push	{r7, lr}
    3f5e:	b084      	sub	sp, #16
    3f60:	af00      	add	r7, sp, #0
    3f62:	6078      	str	r0, [r7, #4]
    3f64:	1cfb      	adds	r3, r7, #3
    3f66:	7019      	strb	r1, [r3, #0]
    3f68:	1cbb      	adds	r3, r7, #2
    3f6a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    3f6c:	1c3b      	adds	r3, r7, #0
    3f6e:	330f      	adds	r3, #15
    3f70:	1cfa      	adds	r2, r7, #3
    3f72:	7811      	ldrb	r1, [r2, #0]
    3f74:	220f      	movs	r2, #15
    3f76:	400a      	ands	r2, r1
    3f78:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    3f7a:	1c3b      	adds	r3, r7, #0
    3f7c:	330f      	adds	r3, #15
    3f7e:	7819      	ldrb	r1, [r3, #0]
    3f80:	1c3b      	adds	r3, r7, #0
    3f82:	330f      	adds	r3, #15
    3f84:	781a      	ldrb	r2, [r3, #0]
    3f86:	6878      	ldr	r0, [r7, #4]
    3f88:	23b0      	movs	r3, #176	; 0xb0
    3f8a:	005b      	lsls	r3, r3, #1
    3f8c:	1882      	adds	r2, r0, r2
    3f8e:	18d3      	adds	r3, r2, r3
    3f90:	781b      	ldrb	r3, [r3, #0]
    3f92:	b2db      	uxtb	r3, r3
    3f94:	1cba      	adds	r2, r7, #2
    3f96:	7812      	ldrb	r2, [r2, #0]
    3f98:	4856      	ldr	r0, [pc, #344]	; (40f4 <usb_device_endpoint_disable_callback+0x198>)
    3f9a:	5c82      	ldrb	r2, [r0, r2]
    3f9c:	b2d2      	uxtb	r2, r2
    3f9e:	43d2      	mvns	r2, r2
    3fa0:	b2d2      	uxtb	r2, r2
    3fa2:	4013      	ands	r3, r2
    3fa4:	b2db      	uxtb	r3, r3
    3fa6:	b2da      	uxtb	r2, r3
    3fa8:	6878      	ldr	r0, [r7, #4]
    3faa:	23b0      	movs	r3, #176	; 0xb0
    3fac:	005b      	lsls	r3, r3, #1
    3fae:	1841      	adds	r1, r0, r1
    3fb0:	18cb      	adds	r3, r1, r3
    3fb2:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    3fb4:	1cbb      	adds	r3, r7, #2
    3fb6:	781b      	ldrb	r3, [r3, #0]
    3fb8:	2b00      	cmp	r3, #0
    3fba:	d12f      	bne.n	401c <usb_device_endpoint_disable_callback+0xc0>
		if (ep_num == 0) { // control endpoint
    3fbc:	1c3b      	adds	r3, r7, #0
    3fbe:	330f      	adds	r3, #15
    3fc0:	781b      	ldrb	r3, [r3, #0]
    3fc2:	2b00      	cmp	r3, #0
    3fc4:	d10c      	bne.n	3fe0 <usb_device_endpoint_disable_callback+0x84>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    3fc6:	687b      	ldr	r3, [r7, #4]
    3fc8:	6819      	ldr	r1, [r3, #0]
    3fca:	1c3b      	adds	r3, r7, #0
    3fcc:	330f      	adds	r3, #15
    3fce:	781a      	ldrb	r2, [r3, #0]
    3fd0:	2384      	movs	r3, #132	; 0x84
    3fd2:	005b      	lsls	r3, r3, #1
    3fd4:	0152      	lsls	r2, r2, #5
    3fd6:	188a      	adds	r2, r1, r2
    3fd8:	18d3      	adds	r3, r2, r3
    3fda:	2203      	movs	r2, #3
    3fdc:	701a      	strb	r2, [r3, #0]
    3fde:	e01d      	b.n	401c <usb_device_endpoint_disable_callback+0xc0>
		} else if (ep & USB_EP_DIR_IN) {
    3fe0:	1cfb      	adds	r3, r7, #3
    3fe2:	781b      	ldrb	r3, [r3, #0]
    3fe4:	b25b      	sxtb	r3, r3
    3fe6:	2b00      	cmp	r3, #0
    3fe8:	da0c      	bge.n	4004 <usb_device_endpoint_disable_callback+0xa8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    3fea:	687b      	ldr	r3, [r7, #4]
    3fec:	6819      	ldr	r1, [r3, #0]
    3fee:	1c3b      	adds	r3, r7, #0
    3ff0:	330f      	adds	r3, #15
    3ff2:	781a      	ldrb	r2, [r3, #0]
    3ff4:	2384      	movs	r3, #132	; 0x84
    3ff6:	005b      	lsls	r3, r3, #1
    3ff8:	0152      	lsls	r2, r2, #5
    3ffa:	188a      	adds	r2, r1, r2
    3ffc:	18d3      	adds	r3, r2, r3
    3ffe:	2202      	movs	r2, #2
    4000:	701a      	strb	r2, [r3, #0]
    4002:	e00b      	b.n	401c <usb_device_endpoint_disable_callback+0xc0>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    4004:	687b      	ldr	r3, [r7, #4]
    4006:	6819      	ldr	r1, [r3, #0]
    4008:	1c3b      	adds	r3, r7, #0
    400a:	330f      	adds	r3, #15
    400c:	781a      	ldrb	r2, [r3, #0]
    400e:	2384      	movs	r3, #132	; 0x84
    4010:	005b      	lsls	r3, r3, #1
    4012:	0152      	lsls	r2, r2, #5
    4014:	188a      	adds	r2, r1, r2
    4016:	18d3      	adds	r3, r2, r3
    4018:	2201      	movs	r2, #1
    401a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    401c:	1cbb      	adds	r3, r7, #2
    401e:	781b      	ldrb	r3, [r3, #0]
    4020:	2b01      	cmp	r3, #1
    4022:	d12f      	bne.n	4084 <usb_device_endpoint_disable_callback+0x128>
		if (ep_num == 0) { // control endpoint
    4024:	1c3b      	adds	r3, r7, #0
    4026:	330f      	adds	r3, #15
    4028:	781b      	ldrb	r3, [r3, #0]
    402a:	2b00      	cmp	r3, #0
    402c:	d10c      	bne.n	4048 <usb_device_endpoint_disable_callback+0xec>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    402e:	687b      	ldr	r3, [r7, #4]
    4030:	6819      	ldr	r1, [r3, #0]
    4032:	1c3b      	adds	r3, r7, #0
    4034:	330f      	adds	r3, #15
    4036:	781a      	ldrb	r2, [r3, #0]
    4038:	2384      	movs	r3, #132	; 0x84
    403a:	005b      	lsls	r3, r3, #1
    403c:	0152      	lsls	r2, r2, #5
    403e:	188a      	adds	r2, r1, r2
    4040:	18d3      	adds	r3, r2, r3
    4042:	220c      	movs	r2, #12
    4044:	701a      	strb	r2, [r3, #0]
    4046:	e01d      	b.n	4084 <usb_device_endpoint_disable_callback+0x128>
		} else if (ep & USB_EP_DIR_IN) {
    4048:	1cfb      	adds	r3, r7, #3
    404a:	781b      	ldrb	r3, [r3, #0]
    404c:	b25b      	sxtb	r3, r3
    404e:	2b00      	cmp	r3, #0
    4050:	da0c      	bge.n	406c <usb_device_endpoint_disable_callback+0x110>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    4052:	687b      	ldr	r3, [r7, #4]
    4054:	6819      	ldr	r1, [r3, #0]
    4056:	1c3b      	adds	r3, r7, #0
    4058:	330f      	adds	r3, #15
    405a:	781a      	ldrb	r2, [r3, #0]
    405c:	2384      	movs	r3, #132	; 0x84
    405e:	005b      	lsls	r3, r3, #1
    4060:	0152      	lsls	r2, r2, #5
    4062:	188a      	adds	r2, r1, r2
    4064:	18d3      	adds	r3, r2, r3
    4066:	2208      	movs	r2, #8
    4068:	701a      	strb	r2, [r3, #0]
    406a:	e00b      	b.n	4084 <usb_device_endpoint_disable_callback+0x128>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    406c:	687b      	ldr	r3, [r7, #4]
    406e:	6819      	ldr	r1, [r3, #0]
    4070:	1c3b      	adds	r3, r7, #0
    4072:	330f      	adds	r3, #15
    4074:	781a      	ldrb	r2, [r3, #0]
    4076:	2384      	movs	r3, #132	; 0x84
    4078:	005b      	lsls	r3, r3, #1
    407a:	0152      	lsls	r2, r2, #5
    407c:	188a      	adds	r2, r1, r2
    407e:	18d3      	adds	r3, r2, r3
    4080:	2204      	movs	r2, #4
    4082:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    4084:	1cbb      	adds	r3, r7, #2
    4086:	781b      	ldrb	r3, [r3, #0]
    4088:	2b02      	cmp	r3, #2
    408a:	d10b      	bne.n	40a4 <usb_device_endpoint_disable_callback+0x148>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    408c:	687b      	ldr	r3, [r7, #4]
    408e:	6819      	ldr	r1, [r3, #0]
    4090:	1c3b      	adds	r3, r7, #0
    4092:	330f      	adds	r3, #15
    4094:	781a      	ldrb	r2, [r3, #0]
    4096:	2384      	movs	r3, #132	; 0x84
    4098:	005b      	lsls	r3, r3, #1
    409a:	0152      	lsls	r2, r2, #5
    409c:	188a      	adds	r2, r1, r2
    409e:	18d3      	adds	r3, r2, r3
    40a0:	2210      	movs	r2, #16
    40a2:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    40a4:	1cbb      	adds	r3, r7, #2
    40a6:	781b      	ldrb	r3, [r3, #0]
    40a8:	2b03      	cmp	r3, #3
    40aa:	d11d      	bne.n	40e8 <usb_device_endpoint_disable_callback+0x18c>
		if (ep & USB_EP_DIR_IN) {
    40ac:	1cfb      	adds	r3, r7, #3
    40ae:	781b      	ldrb	r3, [r3, #0]
    40b0:	b25b      	sxtb	r3, r3
    40b2:	2b00      	cmp	r3, #0
    40b4:	da0c      	bge.n	40d0 <usb_device_endpoint_disable_callback+0x174>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    40b6:	687b      	ldr	r3, [r7, #4]
    40b8:	6819      	ldr	r1, [r3, #0]
    40ba:	1c3b      	adds	r3, r7, #0
    40bc:	330f      	adds	r3, #15
    40be:	781a      	ldrb	r2, [r3, #0]
    40c0:	2384      	movs	r3, #132	; 0x84
    40c2:	005b      	lsls	r3, r3, #1
    40c4:	0152      	lsls	r2, r2, #5
    40c6:	188a      	adds	r2, r1, r2
    40c8:	18d3      	adds	r3, r2, r3
    40ca:	2240      	movs	r2, #64	; 0x40
    40cc:	701a      	strb	r2, [r3, #0]
    40ce:	e00b      	b.n	40e8 <usb_device_endpoint_disable_callback+0x18c>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    40d0:	687b      	ldr	r3, [r7, #4]
    40d2:	6819      	ldr	r1, [r3, #0]
    40d4:	1c3b      	adds	r3, r7, #0
    40d6:	330f      	adds	r3, #15
    40d8:	781a      	ldrb	r2, [r3, #0]
    40da:	2384      	movs	r3, #132	; 0x84
    40dc:	005b      	lsls	r3, r3, #1
    40de:	0152      	lsls	r2, r2, #5
    40e0:	188a      	adds	r2, r1, r2
    40e2:	18d3      	adds	r3, r2, r3
    40e4:	2220      	movs	r2, #32
    40e6:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    40e8:	2300      	movs	r3, #0
}
    40ea:	1c18      	adds	r0, r3, #0
    40ec:	46bd      	mov	sp, r7
    40ee:	b004      	add	sp, #16
    40f0:	bd80      	pop	{r7, pc}
    40f2:	46c0      	nop			; (mov r8, r8)
    40f4:	0000680c 	.word	0x0000680c

000040f8 <usb_device_endpoint_get_config_defaults>:
 * \li endpoint type is control
 *
 * \param[out] ep_config  Configuration structure to initialize to default values
 */
void usb_device_endpoint_get_config_defaults(struct usb_device_endpoint_config *ep_config)
{
    40f8:	b580      	push	{r7, lr}
    40fa:	b082      	sub	sp, #8
    40fc:	af00      	add	r7, sp, #0
    40fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    4100:	687b      	ldr	r3, [r7, #4]
    4102:	2200      	movs	r2, #0
    4104:	701a      	strb	r2, [r3, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    4106:	687b      	ldr	r3, [r7, #4]
    4108:	2200      	movs	r2, #0
    410a:	705a      	strb	r2, [r3, #1]
	ep_config->auto_zlp = false;
    410c:	687b      	ldr	r3, [r7, #4]
    410e:	2200      	movs	r2, #0
    4110:	709a      	strb	r2, [r3, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    4112:	687b      	ldr	r3, [r7, #4]
    4114:	2201      	movs	r2, #1
    4116:	70da      	strb	r2, [r3, #3]
}
    4118:	46bd      	mov	sp, r7
    411a:	b002      	add	sp, #8
    411c:	bd80      	pop	{r7, pc}
    411e:	46c0      	nop			; (mov r8, r8)

00004120 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    4120:	b590      	push	{r4, r7, lr}
    4122:	b085      	sub	sp, #20
    4124:	af00      	add	r7, sp, #0
    4126:	6078      	str	r0, [r7, #4]
    4128:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    412a:	683b      	ldr	r3, [r7, #0]
    412c:	7819      	ldrb	r1, [r3, #0]
    412e:	1c3b      	adds	r3, r7, #0
    4130:	330f      	adds	r3, #15
    4132:	220f      	movs	r2, #15
    4134:	400a      	ands	r2, r1
    4136:	701a      	strb	r2, [r3, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    4138:	683b      	ldr	r3, [r7, #0]
    413a:	781b      	ldrb	r3, [r3, #0]
    413c:	b2db      	uxtb	r3, r3
    413e:	09db      	lsrs	r3, r3, #7
    4140:	b2da      	uxtb	r2, r3
    4142:	1c3b      	adds	r3, r7, #0
    4144:	330e      	adds	r3, #14
    4146:	701a      	strb	r2, [r3, #0]

	switch (ep_config->ep_type) {
    4148:	683b      	ldr	r3, [r7, #0]
    414a:	78db      	ldrb	r3, [r3, #3]
    414c:	2b04      	cmp	r3, #4
    414e:	d900      	bls.n	4152 <usb_device_endpoint_set_config+0x32>
    4150:	e1f2      	b.n	4538 <usb_device_endpoint_set_config+0x418>
    4152:	009a      	lsls	r2, r3, #2
    4154:	4bdd      	ldr	r3, [pc, #884]	; (44cc <usb_device_endpoint_set_config+0x3ac>)
    4156:	18d3      	adds	r3, r2, r3
    4158:	681b      	ldr	r3, [r3, #0]
    415a:	469f      	mov	pc, r3
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    415c:	687b      	ldr	r3, [r7, #4]
    415e:	681b      	ldr	r3, [r3, #0]
    4160:	1c3a      	adds	r2, r7, #0
    4162:	320f      	adds	r2, #15
    4164:	7812      	ldrb	r2, [r2, #0]
    4166:	3208      	adds	r2, #8
    4168:	0152      	lsls	r2, r2, #5
    416a:	2100      	movs	r1, #0
    416c:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
    416e:	2300      	movs	r3, #0
    4170:	e237      	b.n	45e2 <usb_device_endpoint_set_config+0x4c2>

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    4172:	687b      	ldr	r3, [r7, #4]
    4174:	681b      	ldr	r3, [r3, #0]
    4176:	1c3a      	adds	r2, r7, #0
    4178:	320f      	adds	r2, #15
    417a:	7812      	ldrb	r2, [r2, #0]
    417c:	3208      	adds	r2, #8
    417e:	0152      	lsls	r2, r2, #5
    4180:	5cd3      	ldrb	r3, [r2, r3]
    4182:	b2db      	uxtb	r3, r3
    4184:	1c1a      	adds	r2, r3, #0
    4186:	2307      	movs	r3, #7
    4188:	4013      	ands	r3, r2
    418a:	d12e      	bne.n	41ea <usb_device_endpoint_set_config+0xca>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    418c:	687b      	ldr	r3, [r7, #4]
    418e:	681b      	ldr	r3, [r3, #0]
    4190:	1c3a      	adds	r2, r7, #0
    4192:	320f      	adds	r2, #15
    4194:	7812      	ldrb	r2, [r2, #0]
    4196:	3208      	adds	r2, #8
    4198:	0152      	lsls	r2, r2, #5
    419a:	5cd3      	ldrb	r3, [r2, r3]
    419c:	b2db      	uxtb	r3, r3
    419e:	1c1a      	adds	r2, r3, #0
    41a0:	2370      	movs	r3, #112	; 0x70
    41a2:	4013      	ands	r3, r2
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
			return STATUS_OK;

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    41a4:	d121      	bne.n	41ea <usb_device_endpoint_set_config+0xca>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    41a6:	687b      	ldr	r3, [r7, #4]
    41a8:	681b      	ldr	r3, [r3, #0]
    41aa:	1c3a      	adds	r2, r7, #0
    41ac:	320f      	adds	r2, #15
    41ae:	7812      	ldrb	r2, [r2, #0]
    41b0:	3208      	adds	r2, #8
    41b2:	0152      	lsls	r2, r2, #5
    41b4:	2111      	movs	r1, #17
    41b6:	54d1      	strb	r1, [r2, r3]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    41b8:	687b      	ldr	r3, [r7, #4]
    41ba:	681a      	ldr	r2, [r3, #0]
    41bc:	1c3b      	adds	r3, r7, #0
    41be:	330f      	adds	r3, #15
    41c0:	781b      	ldrb	r3, [r3, #0]
    41c2:	3308      	adds	r3, #8
    41c4:	015b      	lsls	r3, r3, #5
    41c6:	18d3      	adds	r3, r2, r3
    41c8:	2240      	movs	r2, #64	; 0x40
    41ca:	715a      	strb	r2, [r3, #5]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    41cc:	687b      	ldr	r3, [r7, #4]
    41ce:	681a      	ldr	r2, [r3, #0]
    41d0:	1c3b      	adds	r3, r7, #0
    41d2:	330f      	adds	r3, #15
    41d4:	781b      	ldrb	r3, [r3, #0]
    41d6:	3308      	adds	r3, #8
    41d8:	015b      	lsls	r3, r3, #5
    41da:	18d3      	adds	r3, r2, r3
    41dc:	2280      	movs	r2, #128	; 0x80
    41de:	711a      	strb	r2, [r3, #4]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    41e0:	683b      	ldr	r3, [r7, #0]
    41e2:	789b      	ldrb	r3, [r3, #2]
    41e4:	2b00      	cmp	r3, #0
    41e6:	d102      	bne.n	41ee <usb_device_endpoint_set_config+0xce>
    41e8:	e026      	b.n	4238 <usb_device_endpoint_set_config+0x118>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
			} else {
				return STATUS_ERR_DENIED;
    41ea:	231c      	movs	r3, #28
    41ec:	e1f9      	b.n	45e2 <usb_device_endpoint_set_config+0x4c2>
			}
			if (true == ep_config->auto_zlp) {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    41ee:	1c3b      	adds	r3, r7, #0
    41f0:	330f      	adds	r3, #15
    41f2:	7818      	ldrb	r0, [r3, #0]
    41f4:	1c3b      	adds	r3, r7, #0
    41f6:	330f      	adds	r3, #15
    41f8:	781b      	ldrb	r3, [r3, #0]
    41fa:	4ab5      	ldr	r2, [pc, #724]	; (44d0 <usb_device_endpoint_set_config+0x3b0>)
    41fc:	015b      	lsls	r3, r3, #5
    41fe:	18d3      	adds	r3, r2, r3
    4200:	685b      	ldr	r3, [r3, #4]
    4202:	2280      	movs	r2, #128	; 0x80
    4204:	0612      	lsls	r2, r2, #24
    4206:	431a      	orrs	r2, r3
    4208:	49b1      	ldr	r1, [pc, #708]	; (44d0 <usb_device_endpoint_set_config+0x3b0>)
    420a:	0143      	lsls	r3, r0, #5
    420c:	18cb      	adds	r3, r1, r3
    420e:	605a      	str	r2, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4210:	1c3b      	adds	r3, r7, #0
    4212:	330f      	adds	r3, #15
    4214:	7818      	ldrb	r0, [r3, #0]
    4216:	1c3b      	adds	r3, r7, #0
    4218:	330f      	adds	r3, #15
    421a:	781b      	ldrb	r3, [r3, #0]
    421c:	4aac      	ldr	r2, [pc, #688]	; (44d0 <usb_device_endpoint_set_config+0x3b0>)
    421e:	015b      	lsls	r3, r3, #5
    4220:	18d3      	adds	r3, r2, r3
    4222:	3310      	adds	r3, #16
    4224:	685b      	ldr	r3, [r3, #4]
    4226:	2280      	movs	r2, #128	; 0x80
    4228:	0612      	lsls	r2, r2, #24
    422a:	431a      	orrs	r2, r3
    422c:	49a8      	ldr	r1, [pc, #672]	; (44d0 <usb_device_endpoint_set_config+0x3b0>)
    422e:	0143      	lsls	r3, r0, #5
    4230:	18cb      	adds	r3, r1, r3
    4232:	3310      	adds	r3, #16
    4234:	605a      	str	r2, [r3, #4]
    4236:	e021      	b.n	427c <usb_device_endpoint_set_config+0x15c>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4238:	1c3b      	adds	r3, r7, #0
    423a:	330f      	adds	r3, #15
    423c:	7818      	ldrb	r0, [r3, #0]
    423e:	1c3b      	adds	r3, r7, #0
    4240:	330f      	adds	r3, #15
    4242:	781b      	ldrb	r3, [r3, #0]
    4244:	4aa2      	ldr	r2, [pc, #648]	; (44d0 <usb_device_endpoint_set_config+0x3b0>)
    4246:	015b      	lsls	r3, r3, #5
    4248:	18d3      	adds	r3, r2, r3
    424a:	685b      	ldr	r3, [r3, #4]
    424c:	005b      	lsls	r3, r3, #1
    424e:	085a      	lsrs	r2, r3, #1
    4250:	499f      	ldr	r1, [pc, #636]	; (44d0 <usb_device_endpoint_set_config+0x3b0>)
    4252:	0143      	lsls	r3, r0, #5
    4254:	18cb      	adds	r3, r1, r3
    4256:	605a      	str	r2, [r3, #4]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4258:	1c3b      	adds	r3, r7, #0
    425a:	330f      	adds	r3, #15
    425c:	7818      	ldrb	r0, [r3, #0]
    425e:	1c3b      	adds	r3, r7, #0
    4260:	330f      	adds	r3, #15
    4262:	781b      	ldrb	r3, [r3, #0]
    4264:	4a9a      	ldr	r2, [pc, #616]	; (44d0 <usb_device_endpoint_set_config+0x3b0>)
    4266:	015b      	lsls	r3, r3, #5
    4268:	18d3      	adds	r3, r2, r3
    426a:	3310      	adds	r3, #16
    426c:	685b      	ldr	r3, [r3, #4]
    426e:	005b      	lsls	r3, r3, #1
    4270:	085a      	lsrs	r2, r3, #1
    4272:	4997      	ldr	r1, [pc, #604]	; (44d0 <usb_device_endpoint_set_config+0x3b0>)
    4274:	0143      	lsls	r3, r0, #5
    4276:	18cb      	adds	r3, r1, r3
    4278:	3310      	adds	r3, #16
    427a:	605a      	str	r2, [r3, #4]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    427c:	1c3b      	adds	r3, r7, #0
    427e:	330f      	adds	r3, #15
    4280:	781b      	ldrb	r3, [r3, #0]
    4282:	683a      	ldr	r2, [r7, #0]
    4284:	7852      	ldrb	r2, [r2, #1]
    4286:	1c11      	adds	r1, r2, #0
    4288:	2207      	movs	r2, #7
    428a:	400a      	ands	r2, r1
    428c:	b2d1      	uxtb	r1, r2
    428e:	4a90      	ldr	r2, [pc, #576]	; (44d0 <usb_device_endpoint_set_config+0x3b0>)
    4290:	015b      	lsls	r3, r3, #5
    4292:	18d3      	adds	r3, r2, r3
    4294:	2207      	movs	r2, #7
    4296:	400a      	ands	r2, r1
    4298:	0712      	lsls	r2, r2, #28
    429a:	6858      	ldr	r0, [r3, #4]
    429c:	498d      	ldr	r1, [pc, #564]	; (44d4 <usb_device_endpoint_set_config+0x3b4>)
    429e:	4001      	ands	r1, r0
    42a0:	430a      	orrs	r2, r1
    42a2:	605a      	str	r2, [r3, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    42a4:	1c3b      	adds	r3, r7, #0
    42a6:	330f      	adds	r3, #15
    42a8:	781b      	ldrb	r3, [r3, #0]
    42aa:	683a      	ldr	r2, [r7, #0]
    42ac:	7852      	ldrb	r2, [r2, #1]
    42ae:	1c11      	adds	r1, r2, #0
    42b0:	2207      	movs	r2, #7
    42b2:	400a      	ands	r2, r1
    42b4:	b2d1      	uxtb	r1, r2
    42b6:	4a86      	ldr	r2, [pc, #536]	; (44d0 <usb_device_endpoint_set_config+0x3b0>)
    42b8:	015b      	lsls	r3, r3, #5
    42ba:	18d3      	adds	r3, r2, r3
    42bc:	3310      	adds	r3, #16
    42be:	2207      	movs	r2, #7
    42c0:	400a      	ands	r2, r1
    42c2:	0712      	lsls	r2, r2, #28
    42c4:	6858      	ldr	r0, [r3, #4]
    42c6:	4983      	ldr	r1, [pc, #524]	; (44d4 <usb_device_endpoint_set_config+0x3b4>)
    42c8:	4001      	ands	r1, r0
    42ca:	430a      	orrs	r2, r1
    42cc:	605a      	str	r2, [r3, #4]
			return STATUS_OK;
    42ce:	2300      	movs	r3, #0
    42d0:	e187      	b.n	45e2 <usb_device_endpoint_set_config+0x4c2>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    42d2:	1c3b      	adds	r3, r7, #0
    42d4:	330e      	adds	r3, #14
    42d6:	781b      	ldrb	r3, [r3, #0]
    42d8:	2b00      	cmp	r3, #0
    42da:	d02e      	beq.n	433a <usb_device_endpoint_set_config+0x21a>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    42dc:	687b      	ldr	r3, [r7, #4]
    42de:	681b      	ldr	r3, [r3, #0]
    42e0:	1c3a      	adds	r2, r7, #0
    42e2:	320f      	adds	r2, #15
    42e4:	7812      	ldrb	r2, [r2, #0]
    42e6:	3208      	adds	r2, #8
    42e8:	0152      	lsls	r2, r2, #5
    42ea:	5cd3      	ldrb	r3, [r2, r3]
    42ec:	b2db      	uxtb	r3, r3
    42ee:	1c1a      	adds	r2, r3, #0
    42f0:	2370      	movs	r3, #112	; 0x70
    42f2:	4013      	ands	r3, r2
    42f4:	d11f      	bne.n	4336 <usb_device_endpoint_set_config+0x216>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    42f6:	687b      	ldr	r3, [r7, #4]
    42f8:	681a      	ldr	r2, [r3, #0]
    42fa:	1c3b      	adds	r3, r7, #0
    42fc:	330f      	adds	r3, #15
    42fe:	7818      	ldrb	r0, [r3, #0]
    4300:	687b      	ldr	r3, [r7, #4]
    4302:	681b      	ldr	r3, [r3, #0]
    4304:	1c39      	adds	r1, r7, #0
    4306:	310f      	adds	r1, #15
    4308:	7809      	ldrb	r1, [r1, #0]
    430a:	3108      	adds	r1, #8
    430c:	0149      	lsls	r1, r1, #5
    430e:	5ccb      	ldrb	r3, [r1, r3]
    4310:	b2db      	uxtb	r3, r3
    4312:	2120      	movs	r1, #32
    4314:	430b      	orrs	r3, r1
    4316:	b2d9      	uxtb	r1, r3
    4318:	1c03      	adds	r3, r0, #0
    431a:	3308      	adds	r3, #8
    431c:	015b      	lsls	r3, r3, #5
    431e:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    4320:	687b      	ldr	r3, [r7, #4]
    4322:	681a      	ldr	r2, [r3, #0]
    4324:	1c3b      	adds	r3, r7, #0
    4326:	330f      	adds	r3, #15
    4328:	781b      	ldrb	r3, [r3, #0]
    432a:	3308      	adds	r3, #8
    432c:	015b      	lsls	r3, r3, #5
    432e:	18d3      	adds	r3, r2, r3
    4330:	2280      	movs	r2, #128	; 0x80
    4332:	711a      	strb	r2, [r3, #4]
    4334:	e030      	b.n	4398 <usb_device_endpoint_set_config+0x278>
				} else {
					return STATUS_ERR_DENIED;
    4336:	231c      	movs	r3, #28
    4338:	e153      	b.n	45e2 <usb_device_endpoint_set_config+0x4c2>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    433a:	687b      	ldr	r3, [r7, #4]
    433c:	681b      	ldr	r3, [r3, #0]
    433e:	1c3a      	adds	r2, r7, #0
    4340:	320f      	adds	r2, #15
    4342:	7812      	ldrb	r2, [r2, #0]
    4344:	3208      	adds	r2, #8
    4346:	0152      	lsls	r2, r2, #5
    4348:	5cd3      	ldrb	r3, [r2, r3]
    434a:	b2db      	uxtb	r3, r3
    434c:	1c1a      	adds	r2, r3, #0
    434e:	2307      	movs	r3, #7
    4350:	4013      	ands	r3, r2
    4352:	d11f      	bne.n	4394 <usb_device_endpoint_set_config+0x274>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    4354:	687b      	ldr	r3, [r7, #4]
    4356:	681a      	ldr	r2, [r3, #0]
    4358:	1c3b      	adds	r3, r7, #0
    435a:	330f      	adds	r3, #15
    435c:	7818      	ldrb	r0, [r3, #0]
    435e:	687b      	ldr	r3, [r7, #4]
    4360:	681b      	ldr	r3, [r3, #0]
    4362:	1c39      	adds	r1, r7, #0
    4364:	310f      	adds	r1, #15
    4366:	7809      	ldrb	r1, [r1, #0]
    4368:	3108      	adds	r1, #8
    436a:	0149      	lsls	r1, r1, #5
    436c:	5ccb      	ldrb	r3, [r1, r3]
    436e:	b2db      	uxtb	r3, r3
    4370:	2102      	movs	r1, #2
    4372:	430b      	orrs	r3, r1
    4374:	b2d9      	uxtb	r1, r3
    4376:	1c03      	adds	r3, r0, #0
    4378:	3308      	adds	r3, #8
    437a:	015b      	lsls	r3, r3, #5
    437c:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    437e:	687b      	ldr	r3, [r7, #4]
    4380:	681a      	ldr	r2, [r3, #0]
    4382:	1c3b      	adds	r3, r7, #0
    4384:	330f      	adds	r3, #15
    4386:	781b      	ldrb	r3, [r3, #0]
    4388:	3308      	adds	r3, #8
    438a:	015b      	lsls	r3, r3, #5
    438c:	18d3      	adds	r3, r2, r3
    438e:	2240      	movs	r2, #64	; 0x40
    4390:	715a      	strb	r2, [r3, #5]
    4392:	e001      	b.n	4398 <usb_device_endpoint_set_config+0x278>
				} else {
					return STATUS_ERR_DENIED;
    4394:	231c      	movs	r3, #28
    4396:	e124      	b.n	45e2 <usb_device_endpoint_set_config+0x4c2>
				}
			}
			break;
    4398:	e0cf      	b.n	453a <usb_device_endpoint_set_config+0x41a>

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    439a:	1c3b      	adds	r3, r7, #0
    439c:	330e      	adds	r3, #14
    439e:	781b      	ldrb	r3, [r3, #0]
    43a0:	2b00      	cmp	r3, #0
    43a2:	d02e      	beq.n	4402 <usb_device_endpoint_set_config+0x2e2>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    43a4:	687b      	ldr	r3, [r7, #4]
    43a6:	681b      	ldr	r3, [r3, #0]
    43a8:	1c3a      	adds	r2, r7, #0
    43aa:	320f      	adds	r2, #15
    43ac:	7812      	ldrb	r2, [r2, #0]
    43ae:	3208      	adds	r2, #8
    43b0:	0152      	lsls	r2, r2, #5
    43b2:	5cd3      	ldrb	r3, [r2, r3]
    43b4:	b2db      	uxtb	r3, r3
    43b6:	1c1a      	adds	r2, r3, #0
    43b8:	2370      	movs	r3, #112	; 0x70
    43ba:	4013      	ands	r3, r2
    43bc:	d11f      	bne.n	43fe <usb_device_endpoint_set_config+0x2de>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    43be:	687b      	ldr	r3, [r7, #4]
    43c0:	681a      	ldr	r2, [r3, #0]
    43c2:	1c3b      	adds	r3, r7, #0
    43c4:	330f      	adds	r3, #15
    43c6:	7818      	ldrb	r0, [r3, #0]
    43c8:	687b      	ldr	r3, [r7, #4]
    43ca:	681b      	ldr	r3, [r3, #0]
    43cc:	1c39      	adds	r1, r7, #0
    43ce:	310f      	adds	r1, #15
    43d0:	7809      	ldrb	r1, [r1, #0]
    43d2:	3108      	adds	r1, #8
    43d4:	0149      	lsls	r1, r1, #5
    43d6:	5ccb      	ldrb	r3, [r1, r3]
    43d8:	b2db      	uxtb	r3, r3
    43da:	2130      	movs	r1, #48	; 0x30
    43dc:	430b      	orrs	r3, r1
    43de:	b2d9      	uxtb	r1, r3
    43e0:	1c03      	adds	r3, r0, #0
    43e2:	3308      	adds	r3, #8
    43e4:	015b      	lsls	r3, r3, #5
    43e6:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    43e8:	687b      	ldr	r3, [r7, #4]
    43ea:	681a      	ldr	r2, [r3, #0]
    43ec:	1c3b      	adds	r3, r7, #0
    43ee:	330f      	adds	r3, #15
    43f0:	781b      	ldrb	r3, [r3, #0]
    43f2:	3308      	adds	r3, #8
    43f4:	015b      	lsls	r3, r3, #5
    43f6:	18d3      	adds	r3, r2, r3
    43f8:	2280      	movs	r2, #128	; 0x80
    43fa:	711a      	strb	r2, [r3, #4]
    43fc:	e030      	b.n	4460 <usb_device_endpoint_set_config+0x340>
				} else {
					return STATUS_ERR_DENIED;
    43fe:	231c      	movs	r3, #28
    4400:	e0ef      	b.n	45e2 <usb_device_endpoint_set_config+0x4c2>
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    4402:	687b      	ldr	r3, [r7, #4]
    4404:	681b      	ldr	r3, [r3, #0]
    4406:	1c3a      	adds	r2, r7, #0
    4408:	320f      	adds	r2, #15
    440a:	7812      	ldrb	r2, [r2, #0]
    440c:	3208      	adds	r2, #8
    440e:	0152      	lsls	r2, r2, #5
    4410:	5cd3      	ldrb	r3, [r2, r3]
    4412:	b2db      	uxtb	r3, r3
    4414:	1c1a      	adds	r2, r3, #0
    4416:	2307      	movs	r3, #7
    4418:	4013      	ands	r3, r2
    441a:	d11f      	bne.n	445c <usb_device_endpoint_set_config+0x33c>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    441c:	687b      	ldr	r3, [r7, #4]
    441e:	681a      	ldr	r2, [r3, #0]
    4420:	1c3b      	adds	r3, r7, #0
    4422:	330f      	adds	r3, #15
    4424:	7818      	ldrb	r0, [r3, #0]
    4426:	687b      	ldr	r3, [r7, #4]
    4428:	681b      	ldr	r3, [r3, #0]
    442a:	1c39      	adds	r1, r7, #0
    442c:	310f      	adds	r1, #15
    442e:	7809      	ldrb	r1, [r1, #0]
    4430:	3108      	adds	r1, #8
    4432:	0149      	lsls	r1, r1, #5
    4434:	5ccb      	ldrb	r3, [r1, r3]
    4436:	b2db      	uxtb	r3, r3
    4438:	2103      	movs	r1, #3
    443a:	430b      	orrs	r3, r1
    443c:	b2d9      	uxtb	r1, r3
    443e:	1c03      	adds	r3, r0, #0
    4440:	3308      	adds	r3, #8
    4442:	015b      	lsls	r3, r3, #5
    4444:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4446:	687b      	ldr	r3, [r7, #4]
    4448:	681a      	ldr	r2, [r3, #0]
    444a:	1c3b      	adds	r3, r7, #0
    444c:	330f      	adds	r3, #15
    444e:	781b      	ldrb	r3, [r3, #0]
    4450:	3308      	adds	r3, #8
    4452:	015b      	lsls	r3, r3, #5
    4454:	18d3      	adds	r3, r2, r3
    4456:	2240      	movs	r2, #64	; 0x40
    4458:	715a      	strb	r2, [r3, #5]
    445a:	e001      	b.n	4460 <usb_device_endpoint_set_config+0x340>
				} else {
					return STATUS_ERR_DENIED;
    445c:	231c      	movs	r3, #28
    445e:	e0c0      	b.n	45e2 <usb_device_endpoint_set_config+0x4c2>
				}
			}
			break;
    4460:	e06b      	b.n	453a <usb_device_endpoint_set_config+0x41a>

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    4462:	1c3b      	adds	r3, r7, #0
    4464:	330e      	adds	r3, #14
    4466:	781b      	ldrb	r3, [r3, #0]
    4468:	2b00      	cmp	r3, #0
    446a:	d035      	beq.n	44d8 <usb_device_endpoint_set_config+0x3b8>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    446c:	687b      	ldr	r3, [r7, #4]
    446e:	681b      	ldr	r3, [r3, #0]
    4470:	1c3a      	adds	r2, r7, #0
    4472:	320f      	adds	r2, #15
    4474:	7812      	ldrb	r2, [r2, #0]
    4476:	3208      	adds	r2, #8
    4478:	0152      	lsls	r2, r2, #5
    447a:	5cd3      	ldrb	r3, [r2, r3]
    447c:	b2db      	uxtb	r3, r3
    447e:	1c1a      	adds	r2, r3, #0
    4480:	2370      	movs	r3, #112	; 0x70
    4482:	4013      	ands	r3, r2
    4484:	d11f      	bne.n	44c6 <usb_device_endpoint_set_config+0x3a6>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    4486:	687b      	ldr	r3, [r7, #4]
    4488:	681a      	ldr	r2, [r3, #0]
    448a:	1c3b      	adds	r3, r7, #0
    448c:	330f      	adds	r3, #15
    448e:	7818      	ldrb	r0, [r3, #0]
    4490:	687b      	ldr	r3, [r7, #4]
    4492:	681b      	ldr	r3, [r3, #0]
    4494:	1c39      	adds	r1, r7, #0
    4496:	310f      	adds	r1, #15
    4498:	7809      	ldrb	r1, [r1, #0]
    449a:	3108      	adds	r1, #8
    449c:	0149      	lsls	r1, r1, #5
    449e:	5ccb      	ldrb	r3, [r1, r3]
    44a0:	b2db      	uxtb	r3, r3
    44a2:	2140      	movs	r1, #64	; 0x40
    44a4:	430b      	orrs	r3, r1
    44a6:	b2d9      	uxtb	r1, r3
    44a8:	1c03      	adds	r3, r0, #0
    44aa:	3308      	adds	r3, #8
    44ac:	015b      	lsls	r3, r3, #5
    44ae:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    44b0:	687b      	ldr	r3, [r7, #4]
    44b2:	681a      	ldr	r2, [r3, #0]
    44b4:	1c3b      	adds	r3, r7, #0
    44b6:	330f      	adds	r3, #15
    44b8:	781b      	ldrb	r3, [r3, #0]
    44ba:	3308      	adds	r3, #8
    44bc:	015b      	lsls	r3, r3, #5
    44be:	18d3      	adds	r3, r2, r3
    44c0:	2280      	movs	r2, #128	; 0x80
    44c2:	711a      	strb	r2, [r3, #4]
    44c4:	e037      	b.n	4536 <usb_device_endpoint_set_config+0x416>
				} else {
					return STATUS_ERR_DENIED;
    44c6:	231c      	movs	r3, #28
    44c8:	e08b      	b.n	45e2 <usb_device_endpoint_set_config+0x4c2>
    44ca:	46c0      	nop			; (mov r8, r8)
    44cc:	00006810 	.word	0x00006810
    44d0:	20000cf4 	.word	0x20000cf4
    44d4:	8fffffff 	.word	0x8fffffff
				}
			} else {
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    44d8:	687b      	ldr	r3, [r7, #4]
    44da:	681b      	ldr	r3, [r3, #0]
    44dc:	1c3a      	adds	r2, r7, #0
    44de:	320f      	adds	r2, #15
    44e0:	7812      	ldrb	r2, [r2, #0]
    44e2:	3208      	adds	r2, #8
    44e4:	0152      	lsls	r2, r2, #5
    44e6:	5cd3      	ldrb	r3, [r2, r3]
    44e8:	b2db      	uxtb	r3, r3
    44ea:	1c1a      	adds	r2, r3, #0
    44ec:	2307      	movs	r3, #7
    44ee:	4013      	ands	r3, r2
    44f0:	d11f      	bne.n	4532 <usb_device_endpoint_set_config+0x412>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    44f2:	687b      	ldr	r3, [r7, #4]
    44f4:	681a      	ldr	r2, [r3, #0]
    44f6:	1c3b      	adds	r3, r7, #0
    44f8:	330f      	adds	r3, #15
    44fa:	7818      	ldrb	r0, [r3, #0]
    44fc:	687b      	ldr	r3, [r7, #4]
    44fe:	681b      	ldr	r3, [r3, #0]
    4500:	1c39      	adds	r1, r7, #0
    4502:	310f      	adds	r1, #15
    4504:	7809      	ldrb	r1, [r1, #0]
    4506:	3108      	adds	r1, #8
    4508:	0149      	lsls	r1, r1, #5
    450a:	5ccb      	ldrb	r3, [r1, r3]
    450c:	b2db      	uxtb	r3, r3
    450e:	2104      	movs	r1, #4
    4510:	430b      	orrs	r3, r1
    4512:	b2d9      	uxtb	r1, r3
    4514:	1c03      	adds	r3, r0, #0
    4516:	3308      	adds	r3, #8
    4518:	015b      	lsls	r3, r3, #5
    451a:	5499      	strb	r1, [r3, r2]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    451c:	687b      	ldr	r3, [r7, #4]
    451e:	681a      	ldr	r2, [r3, #0]
    4520:	1c3b      	adds	r3, r7, #0
    4522:	330f      	adds	r3, #15
    4524:	781b      	ldrb	r3, [r3, #0]
    4526:	3308      	adds	r3, #8
    4528:	015b      	lsls	r3, r3, #5
    452a:	18d3      	adds	r3, r2, r3
    452c:	2240      	movs	r2, #64	; 0x40
    452e:	715a      	strb	r2, [r3, #5]
    4530:	e001      	b.n	4536 <usb_device_endpoint_set_config+0x416>
				} else {
					return STATUS_ERR_DENIED;
    4532:	231c      	movs	r3, #28
    4534:	e055      	b.n	45e2 <usb_device_endpoint_set_config+0x4c2>
				}
			}
			break;
    4536:	e000      	b.n	453a <usb_device_endpoint_set_config+0x41a>

		default:
			break;
    4538:	46c0      	nop			; (mov r8, r8)
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    453a:	1c3b      	adds	r3, r7, #0
    453c:	330f      	adds	r3, #15
    453e:	7818      	ldrb	r0, [r3, #0]
    4540:	1c3b      	adds	r3, r7, #0
    4542:	330e      	adds	r3, #14
    4544:	781b      	ldrb	r3, [r3, #0]
    4546:	683a      	ldr	r2, [r7, #0]
    4548:	7852      	ldrb	r2, [r2, #1]
    454a:	1c11      	adds	r1, r2, #0
    454c:	2207      	movs	r2, #7
    454e:	400a      	ands	r2, r1
    4550:	b2d1      	uxtb	r1, r2
    4552:	4a26      	ldr	r2, [pc, #152]	; (45ec <usb_device_endpoint_set_config+0x4cc>)
    4554:	0040      	lsls	r0, r0, #1
    4556:	18c3      	adds	r3, r0, r3
    4558:	011b      	lsls	r3, r3, #4
    455a:	18d3      	adds	r3, r2, r3
    455c:	2207      	movs	r2, #7
    455e:	400a      	ands	r2, r1
    4560:	0712      	lsls	r2, r2, #28
    4562:	6858      	ldr	r0, [r3, #4]
    4564:	4922      	ldr	r1, [pc, #136]	; (45f0 <usb_device_endpoint_set_config+0x4d0>)
    4566:	4001      	ands	r1, r0
    4568:	430a      	orrs	r2, r1
    456a:	605a      	str	r2, [r3, #4]

	if (true == ep_config->auto_zlp) {
    456c:	683b      	ldr	r3, [r7, #0]
    456e:	789b      	ldrb	r3, [r3, #2]
    4570:	2b00      	cmp	r3, #0
    4572:	d01b      	beq.n	45ac <usb_device_endpoint_set_config+0x48c>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    4574:	1c3b      	adds	r3, r7, #0
    4576:	330f      	adds	r3, #15
    4578:	781c      	ldrb	r4, [r3, #0]
    457a:	1c3b      	adds	r3, r7, #0
    457c:	330e      	adds	r3, #14
    457e:	7818      	ldrb	r0, [r3, #0]
    4580:	1c3b      	adds	r3, r7, #0
    4582:	330f      	adds	r3, #15
    4584:	7819      	ldrb	r1, [r3, #0]
    4586:	1c3b      	adds	r3, r7, #0
    4588:	330e      	adds	r3, #14
    458a:	781b      	ldrb	r3, [r3, #0]
    458c:	4a17      	ldr	r2, [pc, #92]	; (45ec <usb_device_endpoint_set_config+0x4cc>)
    458e:	0049      	lsls	r1, r1, #1
    4590:	18cb      	adds	r3, r1, r3
    4592:	011b      	lsls	r3, r3, #4
    4594:	18d3      	adds	r3, r2, r3
    4596:	685b      	ldr	r3, [r3, #4]
    4598:	2280      	movs	r2, #128	; 0x80
    459a:	0612      	lsls	r2, r2, #24
    459c:	431a      	orrs	r2, r3
    459e:	4913      	ldr	r1, [pc, #76]	; (45ec <usb_device_endpoint_set_config+0x4cc>)
    45a0:	0063      	lsls	r3, r4, #1
    45a2:	181b      	adds	r3, r3, r0
    45a4:	011b      	lsls	r3, r3, #4
    45a6:	18cb      	adds	r3, r1, r3
    45a8:	605a      	str	r2, [r3, #4]
    45aa:	e019      	b.n	45e0 <usb_device_endpoint_set_config+0x4c0>
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    45ac:	1c3b      	adds	r3, r7, #0
    45ae:	330f      	adds	r3, #15
    45b0:	781c      	ldrb	r4, [r3, #0]
    45b2:	1c3b      	adds	r3, r7, #0
    45b4:	330e      	adds	r3, #14
    45b6:	7818      	ldrb	r0, [r3, #0]
    45b8:	1c3b      	adds	r3, r7, #0
    45ba:	330f      	adds	r3, #15
    45bc:	7819      	ldrb	r1, [r3, #0]
    45be:	1c3b      	adds	r3, r7, #0
    45c0:	330e      	adds	r3, #14
    45c2:	781b      	ldrb	r3, [r3, #0]
    45c4:	4a09      	ldr	r2, [pc, #36]	; (45ec <usb_device_endpoint_set_config+0x4cc>)
    45c6:	0049      	lsls	r1, r1, #1
    45c8:	18cb      	adds	r3, r1, r3
    45ca:	011b      	lsls	r3, r3, #4
    45cc:	18d3      	adds	r3, r2, r3
    45ce:	685b      	ldr	r3, [r3, #4]
    45d0:	005b      	lsls	r3, r3, #1
    45d2:	085a      	lsrs	r2, r3, #1
    45d4:	4905      	ldr	r1, [pc, #20]	; (45ec <usb_device_endpoint_set_config+0x4cc>)
    45d6:	0063      	lsls	r3, r4, #1
    45d8:	181b      	adds	r3, r3, r0
    45da:	011b      	lsls	r3, r3, #4
    45dc:	18cb      	adds	r3, r1, r3
    45de:	605a      	str	r2, [r3, #4]
	}

	return STATUS_OK;
    45e0:	2300      	movs	r3, #0
}
    45e2:	1c18      	adds	r0, r3, #0
    45e4:	46bd      	mov	sp, r7
    45e6:	b005      	add	sp, #20
    45e8:	bd90      	pop	{r4, r7, pc}
    45ea:	46c0      	nop			; (mov r8, r8)
    45ec:	20000cf4 	.word	0x20000cf4
    45f0:	8fffffff 	.word	0x8fffffff

000045f4 <usb_device_endpoint_abort_job>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
    45f4:	b580      	push	{r7, lr}
    45f6:	b084      	sub	sp, #16
    45f8:	af00      	add	r7, sp, #0
    45fa:	6078      	str	r0, [r7, #4]
    45fc:	1c0a      	adds	r2, r1, #0
    45fe:	1cfb      	adds	r3, r7, #3
    4600:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    4602:	1c3b      	adds	r3, r7, #0
    4604:	330f      	adds	r3, #15
    4606:	1cfa      	adds	r2, r7, #3
    4608:	7811      	ldrb	r1, [r2, #0]
    460a:	220f      	movs	r2, #15
    460c:	400a      	ands	r2, r1
    460e:	701a      	strb	r2, [r3, #0]

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    4610:	1cfb      	adds	r3, r7, #3
    4612:	781b      	ldrb	r3, [r3, #0]
    4614:	b25b      	sxtb	r3, r3
    4616:	2b00      	cmp	r3, #0
    4618:	da14      	bge.n	4644 <usb_device_endpoint_abort_job+0x50>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    461a:	687b      	ldr	r3, [r7, #4]
    461c:	681a      	ldr	r2, [r3, #0]
    461e:	1c3b      	adds	r3, r7, #0
    4620:	330f      	adds	r3, #15
    4622:	781b      	ldrb	r3, [r3, #0]
    4624:	3308      	adds	r3, #8
    4626:	015b      	lsls	r3, r3, #5
    4628:	18d3      	adds	r3, r2, r3
    462a:	2280      	movs	r2, #128	; 0x80
    462c:	711a      	strb	r2, [r3, #4]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    462e:	687b      	ldr	r3, [r7, #4]
    4630:	681a      	ldr	r2, [r3, #0]
    4632:	1c3b      	adds	r3, r7, #0
    4634:	330f      	adds	r3, #15
    4636:	781b      	ldrb	r3, [r3, #0]
    4638:	3308      	adds	r3, #8
    463a:	015b      	lsls	r3, r3, #5
    463c:	18d3      	adds	r3, r2, r3
    463e:	2202      	movs	r2, #2
    4640:	71da      	strb	r2, [r3, #7]
    4642:	e013      	b.n	466c <usb_device_endpoint_abort_job+0x78>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    4644:	687b      	ldr	r3, [r7, #4]
    4646:	681a      	ldr	r2, [r3, #0]
    4648:	1c3b      	adds	r3, r7, #0
    464a:	330f      	adds	r3, #15
    464c:	781b      	ldrb	r3, [r3, #0]
    464e:	3308      	adds	r3, #8
    4650:	015b      	lsls	r3, r3, #5
    4652:	18d3      	adds	r3, r2, r3
    4654:	2240      	movs	r2, #64	; 0x40
    4656:	715a      	strb	r2, [r3, #5]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4658:	687b      	ldr	r3, [r7, #4]
    465a:	681a      	ldr	r2, [r3, #0]
    465c:	1c3b      	adds	r3, r7, #0
    465e:	330f      	adds	r3, #15
    4660:	781b      	ldrb	r3, [r3, #0]
    4662:	3308      	adds	r3, #8
    4664:	015b      	lsls	r3, r3, #5
    4666:	18d3      	adds	r3, r2, r3
    4668:	2201      	movs	r2, #1
    466a:	71da      	strb	r2, [r3, #7]
	}
}
    466c:	46bd      	mov	sp, r7
    466e:	b004      	add	sp, #16
    4670:	bd80      	pop	{r7, pc}
    4672:	46c0      	nop			; (mov r8, r8)

00004674 <usb_device_endpoint_is_halted>:
 * \param ep          Endpoint address
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
    4674:	b580      	push	{r7, lr}
    4676:	b084      	sub	sp, #16
    4678:	af00      	add	r7, sp, #0
    467a:	6078      	str	r0, [r7, #4]
    467c:	1c0a      	adds	r2, r1, #0
    467e:	1cfb      	adds	r3, r7, #3
    4680:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    4682:	1c3b      	adds	r3, r7, #0
    4684:	330f      	adds	r3, #15
    4686:	1cfa      	adds	r2, r7, #3
    4688:	7811      	ldrb	r1, [r2, #0]
    468a:	220f      	movs	r2, #15
    468c:	400a      	ands	r2, r1
    468e:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    4690:	1cfb      	adds	r3, r7, #3
    4692:	781b      	ldrb	r3, [r3, #0]
    4694:	b25b      	sxtb	r3, r3
    4696:	2b00      	cmp	r3, #0
    4698:	da10      	bge.n	46bc <usb_device_endpoint_is_halted+0x48>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    469a:	687b      	ldr	r3, [r7, #4]
    469c:	681a      	ldr	r2, [r3, #0]
    469e:	1c3b      	adds	r3, r7, #0
    46a0:	330f      	adds	r3, #15
    46a2:	781b      	ldrb	r3, [r3, #0]
    46a4:	3308      	adds	r3, #8
    46a6:	015b      	lsls	r3, r3, #5
    46a8:	18d3      	adds	r3, r2, r3
    46aa:	799b      	ldrb	r3, [r3, #6]
    46ac:	b2db      	uxtb	r3, r3
    46ae:	1c1a      	adds	r2, r3, #0
    46b0:	2320      	movs	r3, #32
    46b2:	4013      	ands	r3, r2
    46b4:	1e5a      	subs	r2, r3, #1
    46b6:	4193      	sbcs	r3, r2
    46b8:	b2db      	uxtb	r3, r3
    46ba:	e00f      	b.n	46dc <usb_device_endpoint_is_halted+0x68>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    46bc:	687b      	ldr	r3, [r7, #4]
    46be:	681a      	ldr	r2, [r3, #0]
    46c0:	1c3b      	adds	r3, r7, #0
    46c2:	330f      	adds	r3, #15
    46c4:	781b      	ldrb	r3, [r3, #0]
    46c6:	3308      	adds	r3, #8
    46c8:	015b      	lsls	r3, r3, #5
    46ca:	18d3      	adds	r3, r2, r3
    46cc:	799b      	ldrb	r3, [r3, #6]
    46ce:	b2db      	uxtb	r3, r3
    46d0:	1c1a      	adds	r2, r3, #0
    46d2:	2310      	movs	r3, #16
    46d4:	4013      	ands	r3, r2
    46d6:	1e5a      	subs	r2, r3, #1
    46d8:	4193      	sbcs	r3, r2
    46da:	b2db      	uxtb	r3, r3
	}
}
    46dc:	1c18      	adds	r0, r3, #0
    46de:	46bd      	mov	sp, r7
    46e0:	b004      	add	sp, #16
    46e2:	bd80      	pop	{r7, pc}

000046e4 <usb_device_endpoint_set_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
    46e4:	b580      	push	{r7, lr}
    46e6:	b084      	sub	sp, #16
    46e8:	af00      	add	r7, sp, #0
    46ea:	6078      	str	r0, [r7, #4]
    46ec:	1c0a      	adds	r2, r1, #0
    46ee:	1cfb      	adds	r3, r7, #3
    46f0:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    46f2:	1c3b      	adds	r3, r7, #0
    46f4:	330f      	adds	r3, #15
    46f6:	1cfa      	adds	r2, r7, #3
    46f8:	7811      	ldrb	r1, [r2, #0]
    46fa:	220f      	movs	r2, #15
    46fc:	400a      	ands	r2, r1
    46fe:	701a      	strb	r2, [r3, #0]

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    4700:	1cfb      	adds	r3, r7, #3
    4702:	781b      	ldrb	r3, [r3, #0]
    4704:	b25b      	sxtb	r3, r3
    4706:	2b00      	cmp	r3, #0
    4708:	da0a      	bge.n	4720 <usb_device_endpoint_set_halt+0x3c>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    470a:	687b      	ldr	r3, [r7, #4]
    470c:	681a      	ldr	r2, [r3, #0]
    470e:	1c3b      	adds	r3, r7, #0
    4710:	330f      	adds	r3, #15
    4712:	781b      	ldrb	r3, [r3, #0]
    4714:	3308      	adds	r3, #8
    4716:	015b      	lsls	r3, r3, #5
    4718:	18d3      	adds	r3, r2, r3
    471a:	2220      	movs	r2, #32
    471c:	715a      	strb	r2, [r3, #5]
    471e:	e009      	b.n	4734 <usb_device_endpoint_set_halt+0x50>
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    4720:	687b      	ldr	r3, [r7, #4]
    4722:	681a      	ldr	r2, [r3, #0]
    4724:	1c3b      	adds	r3, r7, #0
    4726:	330f      	adds	r3, #15
    4728:	781b      	ldrb	r3, [r3, #0]
    472a:	3308      	adds	r3, #8
    472c:	015b      	lsls	r3, r3, #5
    472e:	18d3      	adds	r3, r2, r3
    4730:	2210      	movs	r2, #16
    4732:	715a      	strb	r2, [r3, #5]
	}
}
    4734:	46bd      	mov	sp, r7
    4736:	b004      	add	sp, #16
    4738:	bd80      	pop	{r7, pc}
    473a:	46c0      	nop			; (mov r8, r8)

0000473c <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    473c:	b580      	push	{r7, lr}
    473e:	b084      	sub	sp, #16
    4740:	af00      	add	r7, sp, #0
    4742:	6078      	str	r0, [r7, #4]
    4744:	1c0a      	adds	r2, r1, #0
    4746:	1cfb      	adds	r3, r7, #3
    4748:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    474a:	1c3b      	adds	r3, r7, #0
    474c:	330f      	adds	r3, #15
    474e:	1cfa      	adds	r2, r7, #3
    4750:	7811      	ldrb	r1, [r2, #0]
    4752:	220f      	movs	r2, #15
    4754:	400a      	ands	r2, r1
    4756:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    4758:	1cfb      	adds	r3, r7, #3
    475a:	781b      	ldrb	r3, [r3, #0]
    475c:	b25b      	sxtb	r3, r3
    475e:	2b00      	cmp	r3, #0
    4760:	da3a      	bge.n	47d8 <usb_device_endpoint_clear_halt+0x9c>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    4762:	687b      	ldr	r3, [r7, #4]
    4764:	681a      	ldr	r2, [r3, #0]
    4766:	1c3b      	adds	r3, r7, #0
    4768:	330f      	adds	r3, #15
    476a:	781b      	ldrb	r3, [r3, #0]
    476c:	3308      	adds	r3, #8
    476e:	015b      	lsls	r3, r3, #5
    4770:	18d3      	adds	r3, r2, r3
    4772:	799b      	ldrb	r3, [r3, #6]
    4774:	b2db      	uxtb	r3, r3
    4776:	1c1a      	adds	r2, r3, #0
    4778:	2320      	movs	r3, #32
    477a:	4013      	ands	r3, r2
    477c:	d066      	beq.n	484c <usb_device_endpoint_clear_halt+0x110>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    477e:	687b      	ldr	r3, [r7, #4]
    4780:	681a      	ldr	r2, [r3, #0]
    4782:	1c3b      	adds	r3, r7, #0
    4784:	330f      	adds	r3, #15
    4786:	781b      	ldrb	r3, [r3, #0]
    4788:	3308      	adds	r3, #8
    478a:	015b      	lsls	r3, r3, #5
    478c:	18d3      	adds	r3, r2, r3
    478e:	2220      	movs	r2, #32
    4790:	711a      	strb	r2, [r3, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    4792:	687b      	ldr	r3, [r7, #4]
    4794:	681a      	ldr	r2, [r3, #0]
    4796:	1c3b      	adds	r3, r7, #0
    4798:	330f      	adds	r3, #15
    479a:	781b      	ldrb	r3, [r3, #0]
    479c:	3308      	adds	r3, #8
    479e:	015b      	lsls	r3, r3, #5
    47a0:	18d3      	adds	r3, r2, r3
    47a2:	79db      	ldrb	r3, [r3, #7]
    47a4:	b2db      	uxtb	r3, r3
    47a6:	1c1a      	adds	r2, r3, #0
    47a8:	2340      	movs	r3, #64	; 0x40
    47aa:	4013      	ands	r3, r2
    47ac:	d04e      	beq.n	484c <usb_device_endpoint_clear_halt+0x110>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    47ae:	687b      	ldr	r3, [r7, #4]
    47b0:	681a      	ldr	r2, [r3, #0]
    47b2:	1c3b      	adds	r3, r7, #0
    47b4:	330f      	adds	r3, #15
    47b6:	781b      	ldrb	r3, [r3, #0]
    47b8:	3308      	adds	r3, #8
    47ba:	015b      	lsls	r3, r3, #5
    47bc:	18d3      	adds	r3, r2, r3
    47be:	2240      	movs	r2, #64	; 0x40
    47c0:	71da      	strb	r2, [r3, #7]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    47c2:	687b      	ldr	r3, [r7, #4]
    47c4:	681a      	ldr	r2, [r3, #0]
    47c6:	1c3b      	adds	r3, r7, #0
    47c8:	330f      	adds	r3, #15
    47ca:	781b      	ldrb	r3, [r3, #0]
    47cc:	3308      	adds	r3, #8
    47ce:	015b      	lsls	r3, r3, #5
    47d0:	18d3      	adds	r3, r2, r3
    47d2:	2202      	movs	r2, #2
    47d4:	711a      	strb	r2, [r3, #4]
    47d6:	e039      	b.n	484c <usb_device_endpoint_clear_halt+0x110>
			}
		}
	} else {
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    47d8:	687b      	ldr	r3, [r7, #4]
    47da:	681a      	ldr	r2, [r3, #0]
    47dc:	1c3b      	adds	r3, r7, #0
    47de:	330f      	adds	r3, #15
    47e0:	781b      	ldrb	r3, [r3, #0]
    47e2:	3308      	adds	r3, #8
    47e4:	015b      	lsls	r3, r3, #5
    47e6:	18d3      	adds	r3, r2, r3
    47e8:	799b      	ldrb	r3, [r3, #6]
    47ea:	b2db      	uxtb	r3, r3
    47ec:	1c1a      	adds	r2, r3, #0
    47ee:	2310      	movs	r3, #16
    47f0:	4013      	ands	r3, r2
    47f2:	d02b      	beq.n	484c <usb_device_endpoint_clear_halt+0x110>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    47f4:	687b      	ldr	r3, [r7, #4]
    47f6:	681a      	ldr	r2, [r3, #0]
    47f8:	1c3b      	adds	r3, r7, #0
    47fa:	330f      	adds	r3, #15
    47fc:	781b      	ldrb	r3, [r3, #0]
    47fe:	3308      	adds	r3, #8
    4800:	015b      	lsls	r3, r3, #5
    4802:	18d3      	adds	r3, r2, r3
    4804:	2210      	movs	r2, #16
    4806:	711a      	strb	r2, [r3, #4]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4808:	687b      	ldr	r3, [r7, #4]
    480a:	681a      	ldr	r2, [r3, #0]
    480c:	1c3b      	adds	r3, r7, #0
    480e:	330f      	adds	r3, #15
    4810:	781b      	ldrb	r3, [r3, #0]
    4812:	3308      	adds	r3, #8
    4814:	015b      	lsls	r3, r3, #5
    4816:	18d3      	adds	r3, r2, r3
    4818:	79db      	ldrb	r3, [r3, #7]
    481a:	b2db      	uxtb	r3, r3
    481c:	1c1a      	adds	r2, r3, #0
    481e:	2320      	movs	r3, #32
    4820:	4013      	ands	r3, r2
    4822:	d013      	beq.n	484c <usb_device_endpoint_clear_halt+0x110>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    4824:	687b      	ldr	r3, [r7, #4]
    4826:	681a      	ldr	r2, [r3, #0]
    4828:	1c3b      	adds	r3, r7, #0
    482a:	330f      	adds	r3, #15
    482c:	781b      	ldrb	r3, [r3, #0]
    482e:	3308      	adds	r3, #8
    4830:	015b      	lsls	r3, r3, #5
    4832:	18d3      	adds	r3, r2, r3
    4834:	2220      	movs	r2, #32
    4836:	71da      	strb	r2, [r3, #7]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    4838:	687b      	ldr	r3, [r7, #4]
    483a:	681a      	ldr	r2, [r3, #0]
    483c:	1c3b      	adds	r3, r7, #0
    483e:	330f      	adds	r3, #15
    4840:	781b      	ldrb	r3, [r3, #0]
    4842:	3308      	adds	r3, #8
    4844:	015b      	lsls	r3, r3, #5
    4846:	18d3      	adds	r3, r2, r3
    4848:	2201      	movs	r2, #1
    484a:	711a      	strb	r2, [r3, #4]
			}
		}
	}
}
    484c:	46bd      	mov	sp, r7
    484e:	b004      	add	sp, #16
    4850:	bd80      	pop	{r7, pc}
    4852:	46c0      	nop			; (mov r8, r8)

00004854 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    4854:	b580      	push	{r7, lr}
    4856:	b086      	sub	sp, #24
    4858:	af00      	add	r7, sp, #0
    485a:	60f8      	str	r0, [r7, #12]
    485c:	607a      	str	r2, [r7, #4]
    485e:	603b      	str	r3, [r7, #0]
    4860:	1c3b      	adds	r3, r7, #0
    4862:	330b      	adds	r3, #11
    4864:	1c0a      	adds	r2, r1, #0
    4866:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    4868:	68fb      	ldr	r3, [r7, #12]
    486a:	681b      	ldr	r3, [r3, #0]
    486c:	1c3a      	adds	r2, r7, #0
    486e:	320b      	adds	r2, #11
    4870:	7812      	ldrb	r2, [r2, #0]
    4872:	3208      	adds	r2, #8
    4874:	0152      	lsls	r2, r2, #5
    4876:	5cd3      	ldrb	r3, [r2, r3]
    4878:	b2db      	uxtb	r3, r3
    487a:	091b      	lsrs	r3, r3, #4
    487c:	1c1a      	adds	r2, r3, #0
    487e:	2307      	movs	r3, #7
    4880:	4013      	ands	r3, r2
    4882:	b2da      	uxtb	r2, r3
    4884:	1c3b      	adds	r3, r7, #0
    4886:	3317      	adds	r3, #23
    4888:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    488a:	1c3b      	adds	r3, r7, #0
    488c:	3317      	adds	r3, #23
    488e:	781b      	ldrb	r3, [r3, #0]
    4890:	2b00      	cmp	r3, #0
    4892:	d101      	bne.n	4898 <usb_device_endpoint_write_buffer_job+0x44>
		return STATUS_ERR_DENIED;
    4894:	231c      	movs	r3, #28
    4896:	e031      	b.n	48fc <usb_device_endpoint_write_buffer_job+0xa8>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    4898:	1c3b      	adds	r3, r7, #0
    489a:	330b      	adds	r3, #11
    489c:	781b      	ldrb	r3, [r3, #0]
    489e:	687a      	ldr	r2, [r7, #4]
    48a0:	4918      	ldr	r1, [pc, #96]	; (4904 <usb_device_endpoint_write_buffer_job+0xb0>)
    48a2:	015b      	lsls	r3, r3, #5
    48a4:	18cb      	adds	r3, r1, r3
    48a6:	3310      	adds	r3, #16
    48a8:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    48aa:	1c3b      	adds	r3, r7, #0
    48ac:	330b      	adds	r3, #11
    48ae:	781b      	ldrb	r3, [r3, #0]
    48b0:	4a14      	ldr	r2, [pc, #80]	; (4904 <usb_device_endpoint_write_buffer_job+0xb0>)
    48b2:	015b      	lsls	r3, r3, #5
    48b4:	18d3      	adds	r3, r2, r3
    48b6:	3310      	adds	r3, #16
    48b8:	6859      	ldr	r1, [r3, #4]
    48ba:	4a13      	ldr	r2, [pc, #76]	; (4908 <usb_device_endpoint_write_buffer_job+0xb4>)
    48bc:	400a      	ands	r2, r1
    48be:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    48c0:	1c3b      	adds	r3, r7, #0
    48c2:	330b      	adds	r3, #11
    48c4:	781b      	ldrb	r3, [r3, #0]
    48c6:	683a      	ldr	r2, [r7, #0]
    48c8:	b292      	uxth	r2, r2
    48ca:	0492      	lsls	r2, r2, #18
    48cc:	0c92      	lsrs	r2, r2, #18
    48ce:	b292      	uxth	r2, r2
    48d0:	490c      	ldr	r1, [pc, #48]	; (4904 <usb_device_endpoint_write_buffer_job+0xb0>)
    48d2:	015b      	lsls	r3, r3, #5
    48d4:	18cb      	adds	r3, r1, r3
    48d6:	3310      	adds	r3, #16
    48d8:	0492      	lsls	r2, r2, #18
    48da:	0c92      	lsrs	r2, r2, #18
    48dc:	6859      	ldr	r1, [r3, #4]
    48de:	0b89      	lsrs	r1, r1, #14
    48e0:	0389      	lsls	r1, r1, #14
    48e2:	430a      	orrs	r2, r1
    48e4:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    48e6:	68fb      	ldr	r3, [r7, #12]
    48e8:	681a      	ldr	r2, [r3, #0]
    48ea:	1c3b      	adds	r3, r7, #0
    48ec:	330b      	adds	r3, #11
    48ee:	781b      	ldrb	r3, [r3, #0]
    48f0:	3308      	adds	r3, #8
    48f2:	015b      	lsls	r3, r3, #5
    48f4:	18d3      	adds	r3, r2, r3
    48f6:	2280      	movs	r2, #128	; 0x80
    48f8:	715a      	strb	r2, [r3, #5]

	return STATUS_OK;
    48fa:	2300      	movs	r3, #0
}
    48fc:	1c18      	adds	r0, r3, #0
    48fe:	46bd      	mov	sp, r7
    4900:	b006      	add	sp, #24
    4902:	bd80      	pop	{r7, pc}
    4904:	20000cf4 	.word	0x20000cf4
    4908:	f0003fff 	.word	0xf0003fff

0000490c <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    490c:	b580      	push	{r7, lr}
    490e:	b086      	sub	sp, #24
    4910:	af00      	add	r7, sp, #0
    4912:	60f8      	str	r0, [r7, #12]
    4914:	607a      	str	r2, [r7, #4]
    4916:	603b      	str	r3, [r7, #0]
    4918:	1c3b      	adds	r3, r7, #0
    491a:	330b      	adds	r3, #11
    491c:	1c0a      	adds	r2, r1, #0
    491e:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    4920:	68fb      	ldr	r3, [r7, #12]
    4922:	681b      	ldr	r3, [r3, #0]
    4924:	1c3a      	adds	r2, r7, #0
    4926:	320b      	adds	r2, #11
    4928:	7812      	ldrb	r2, [r2, #0]
    492a:	3208      	adds	r2, #8
    492c:	0152      	lsls	r2, r2, #5
    492e:	5cd2      	ldrb	r2, [r2, r3]
    4930:	2307      	movs	r3, #7
    4932:	4013      	ands	r3, r2
    4934:	b2da      	uxtb	r2, r3
    4936:	1c3b      	adds	r3, r7, #0
    4938:	3317      	adds	r3, #23
    493a:	701a      	strb	r2, [r3, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    493c:	1c3b      	adds	r3, r7, #0
    493e:	3317      	adds	r3, #23
    4940:	781b      	ldrb	r3, [r3, #0]
    4942:	2b00      	cmp	r3, #0
    4944:	d101      	bne.n	494a <usb_device_endpoint_read_buffer_job+0x3e>
		return STATUS_ERR_DENIED;
    4946:	231c      	movs	r3, #28
    4948:	e02e      	b.n	49a8 <usb_device_endpoint_read_buffer_job+0x9c>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    494a:	1c3b      	adds	r3, r7, #0
    494c:	330b      	adds	r3, #11
    494e:	781a      	ldrb	r2, [r3, #0]
    4950:	6879      	ldr	r1, [r7, #4]
    4952:	4b17      	ldr	r3, [pc, #92]	; (49b0 <usb_device_endpoint_read_buffer_job+0xa4>)
    4954:	0152      	lsls	r2, r2, #5
    4956:	50d1      	str	r1, [r2, r3]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    4958:	1c3b      	adds	r3, r7, #0
    495a:	330b      	adds	r3, #11
    495c:	781b      	ldrb	r3, [r3, #0]
    495e:	683a      	ldr	r2, [r7, #0]
    4960:	b292      	uxth	r2, r2
    4962:	0492      	lsls	r2, r2, #18
    4964:	0c92      	lsrs	r2, r2, #18
    4966:	b292      	uxth	r2, r2
    4968:	4911      	ldr	r1, [pc, #68]	; (49b0 <usb_device_endpoint_read_buffer_job+0xa4>)
    496a:	015b      	lsls	r3, r3, #5
    496c:	18cb      	adds	r3, r1, r3
    496e:	0492      	lsls	r2, r2, #18
    4970:	0c92      	lsrs	r2, r2, #18
    4972:	0392      	lsls	r2, r2, #14
    4974:	6858      	ldr	r0, [r3, #4]
    4976:	490f      	ldr	r1, [pc, #60]	; (49b4 <usb_device_endpoint_read_buffer_job+0xa8>)
    4978:	4001      	ands	r1, r0
    497a:	430a      	orrs	r2, r1
    497c:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    497e:	1c3b      	adds	r3, r7, #0
    4980:	330b      	adds	r3, #11
    4982:	781b      	ldrb	r3, [r3, #0]
    4984:	4a0a      	ldr	r2, [pc, #40]	; (49b0 <usb_device_endpoint_read_buffer_job+0xa4>)
    4986:	015b      	lsls	r3, r3, #5
    4988:	18d3      	adds	r3, r2, r3
    498a:	685a      	ldr	r2, [r3, #4]
    498c:	0b92      	lsrs	r2, r2, #14
    498e:	0392      	lsls	r2, r2, #14
    4990:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    4992:	68fb      	ldr	r3, [r7, #12]
    4994:	681a      	ldr	r2, [r3, #0]
    4996:	1c3b      	adds	r3, r7, #0
    4998:	330b      	adds	r3, #11
    499a:	781b      	ldrb	r3, [r3, #0]
    499c:	3308      	adds	r3, #8
    499e:	015b      	lsls	r3, r3, #5
    49a0:	18d3      	adds	r3, r2, r3
    49a2:	2240      	movs	r2, #64	; 0x40
    49a4:	711a      	strb	r2, [r3, #4]

	return STATUS_OK;
    49a6:	2300      	movs	r3, #0
}
    49a8:	1c18      	adds	r0, r3, #0
    49aa:	46bd      	mov	sp, r7
    49ac:	b006      	add	sp, #24
    49ae:	bd80      	pop	{r7, pc}
    49b0:	20000cf4 	.word	0x20000cf4
    49b4:	f0003fff 	.word	0xf0003fff

000049b8 <usb_device_endpoint_setup_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_setup_buffer_job(struct usb_module *module_inst,
		uint8_t* pbuf)
{
    49b8:	b580      	push	{r7, lr}
    49ba:	b082      	sub	sp, #8
    49bc:	af00      	add	r7, sp, #0
    49be:	6078      	str	r0, [r7, #4]
    49c0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    49c2:	683a      	ldr	r2, [r7, #0]
    49c4:	4b0c      	ldr	r3, [pc, #48]	; (49f8 <usb_device_endpoint_setup_buffer_job+0x40>)
    49c6:	601a      	str	r2, [r3, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    49c8:	4b0b      	ldr	r3, [pc, #44]	; (49f8 <usb_device_endpoint_setup_buffer_job+0x40>)
    49ca:	6859      	ldr	r1, [r3, #4]
    49cc:	4a0b      	ldr	r2, [pc, #44]	; (49fc <usb_device_endpoint_setup_buffer_job+0x44>)
    49ce:	400a      	ands	r2, r1
    49d0:	2180      	movs	r1, #128	; 0x80
    49d2:	0289      	lsls	r1, r1, #10
    49d4:	430a      	orrs	r2, r1
    49d6:	605a      	str	r2, [r3, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    49d8:	4b07      	ldr	r3, [pc, #28]	; (49f8 <usb_device_endpoint_setup_buffer_job+0x40>)
    49da:	685a      	ldr	r2, [r3, #4]
    49dc:	0b92      	lsrs	r2, r2, #14
    49de:	0392      	lsls	r2, r2, #14
    49e0:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    49e2:	687b      	ldr	r3, [r7, #4]
    49e4:	681a      	ldr	r2, [r3, #0]
    49e6:	2382      	movs	r3, #130	; 0x82
    49e8:	005b      	lsls	r3, r3, #1
    49ea:	2140      	movs	r1, #64	; 0x40
    49ec:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
    49ee:	2300      	movs	r3, #0
}
    49f0:	1c18      	adds	r0, r3, #0
    49f2:	46bd      	mov	sp, r7
    49f4:	b002      	add	sp, #8
    49f6:	bd80      	pop	{r7, pc}
    49f8:	20000cf4 	.word	0x20000cf4
    49fc:	f0003fff 	.word	0xf0003fff

00004a00 <_usb_device_interrupt_handler>:

static void _usb_device_interrupt_handler(void)
{
    4a00:	b580      	push	{r7, lr}
    4a02:	b084      	sub	sp, #16
    4a04:	af00      	add	r7, sp, #0
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    4a06:	4bcc      	ldr	r3, [pc, #816]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4a08:	681b      	ldr	r3, [r3, #0]
    4a0a:	681a      	ldr	r2, [r3, #0]
    4a0c:	1c3b      	adds	r3, r7, #0
    4a0e:	3308      	adds	r3, #8
    4a10:	8c12      	ldrh	r2, [r2, #32]
    4a12:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    4a14:	1c3b      	adds	r3, r7, #0
    4a16:	3308      	adds	r3, #8
    4a18:	881b      	ldrh	r3, [r3, #0]
    4a1a:	2b00      	cmp	r3, #0
    4a1c:	d158      	bne.n	4ad0 <_usb_device_interrupt_handler+0xd0>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    4a1e:	4bc6      	ldr	r3, [pc, #792]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4a20:	681b      	ldr	r3, [r3, #0]
    4a22:	681a      	ldr	r2, [r3, #0]
    4a24:	1dbb      	adds	r3, r7, #6
    4a26:	8b92      	ldrh	r2, [r2, #28]
    4a28:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    4a2a:	4bc3      	ldr	r3, [pc, #780]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4a2c:	681a      	ldr	r2, [r3, #0]
    4a2e:	23ab      	movs	r3, #171	; 0xab
    4a30:	005b      	lsls	r3, r3, #1
    4a32:	5ad3      	ldrh	r3, [r2, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    4a34:	1dba      	adds	r2, r7, #6
    4a36:	8812      	ldrh	r2, [r2, #0]
    4a38:	4013      	ands	r3, r2
    4a3a:	b29a      	uxth	r2, r3
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;
    4a3c:	4bbe      	ldr	r3, [pc, #760]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4a3e:	6819      	ldr	r1, [r3, #0]
    4a40:	23aa      	movs	r3, #170	; 0xaa
    4a42:	005b      	lsls	r3, r3, #1
    4a44:	5ac9      	ldrh	r1, [r1, r3]
	if (0 == ep_inst) {
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
    4a46:	1d3b      	adds	r3, r7, #4
    4a48:	400a      	ands	r2, r1
    4a4a:	801a      	strh	r2, [r3, #0]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4a4c:	2300      	movs	r3, #0
    4a4e:	60fb      	str	r3, [r7, #12]
    4a50:	e03a      	b.n	4ac8 <_usb_device_interrupt_handler+0xc8>
			if (flags & _usb_device_irq_bits[i]) {
    4a52:	4bba      	ldr	r3, [pc, #744]	; (4d3c <_usb_device_interrupt_handler+0x33c>)
    4a54:	68fa      	ldr	r2, [r7, #12]
    4a56:	0052      	lsls	r2, r2, #1
    4a58:	5ad3      	ldrh	r3, [r2, r3]
    4a5a:	1dba      	adds	r2, r7, #6
    4a5c:	8812      	ldrh	r2, [r2, #0]
    4a5e:	4013      	ands	r3, r2
    4a60:	b29b      	uxth	r3, r3
    4a62:	2b00      	cmp	r3, #0
    4a64:	d007      	beq.n	4a76 <_usb_device_interrupt_handler+0x76>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    4a66:	4bb4      	ldr	r3, [pc, #720]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4a68:	681b      	ldr	r3, [r3, #0]
    4a6a:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    4a6c:	4ab3      	ldr	r2, [pc, #716]	; (4d3c <_usb_device_interrupt_handler+0x33c>)
    4a6e:	68f9      	ldr	r1, [r7, #12]
    4a70:	0049      	lsls	r1, r1, #1
    4a72:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
			if (flags & _usb_device_irq_bits[i]) {
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    4a74:	839a      	strh	r2, [r3, #28]
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    4a76:	4bb1      	ldr	r3, [pc, #708]	; (4d3c <_usb_device_interrupt_handler+0x33c>)
    4a78:	68fa      	ldr	r2, [r7, #12]
    4a7a:	0052      	lsls	r2, r2, #1
    4a7c:	5ad3      	ldrh	r3, [r2, r3]
    4a7e:	1d3a      	adds	r2, r7, #4
    4a80:	8812      	ldrh	r2, [r2, #0]
    4a82:	4013      	ands	r3, r2
    4a84:	b29b      	uxth	r3, r3
    4a86:	2b00      	cmp	r3, #0
    4a88:	d01b      	beq.n	4ac2 <_usb_device_interrupt_handler+0xc2>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    4a8a:	68fb      	ldr	r3, [r7, #12]
    4a8c:	2b06      	cmp	r3, #6
    4a8e:	d10c      	bne.n	4aaa <_usb_device_interrupt_handler+0xaa>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    4a90:	4bab      	ldr	r3, [pc, #684]	; (4d40 <_usb_device_interrupt_handler+0x340>)
    4a92:	891b      	ldrh	r3, [r3, #8]
    4a94:	b29b      	uxth	r3, r3
    4a96:	091b      	lsrs	r3, r3, #4
    4a98:	055b      	lsls	r3, r3, #21
    4a9a:	0d5b      	lsrs	r3, r3, #21
    4a9c:	b29b      	uxth	r3, r3
				_usb_instances->hw->DEVICE.INTFLAG.reg =
						_usb_device_irq_bits[i];
			}
			if (flags_run & _usb_device_irq_bits[i]) {
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
					device_callback_lpm_wakeup_enable =
    4a9e:	1c1a      	adds	r2, r3, #0
    4aa0:	2380      	movs	r3, #128	; 0x80
    4aa2:	005b      	lsls	r3, r3, #1
    4aa4:	401a      	ands	r2, r3
    4aa6:	4ba7      	ldr	r3, [pc, #668]	; (4d44 <_usb_device_interrupt_handler+0x344>)
    4aa8:	601a      	str	r2, [r3, #0]
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    4aaa:	4ba3      	ldr	r3, [pc, #652]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4aac:	681b      	ldr	r3, [r3, #0]
    4aae:	68fa      	ldr	r2, [r7, #12]
    4ab0:	322e      	adds	r2, #46	; 0x2e
    4ab2:	0092      	lsls	r2, r2, #2
    4ab4:	58d2      	ldr	r2, [r2, r3]
    4ab6:	4ba0      	ldr	r3, [pc, #640]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4ab8:	6819      	ldr	r1, [r3, #0]
    4aba:	4ba2      	ldr	r3, [pc, #648]	; (4d44 <_usb_device_interrupt_handler+0x344>)
    4abc:	1c08      	adds	r0, r1, #0
    4abe:	1c19      	adds	r1, r3, #0
    4ac0:	4790      	blx	r2
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
				_usb_instances->device_registered_callback_mask;

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    4ac2:	68fb      	ldr	r3, [r7, #12]
    4ac4:	3301      	adds	r3, #1
    4ac6:	60fb      	str	r3, [r7, #12]
    4ac8:	68fb      	ldr	r3, [r7, #12]
    4aca:	2b06      	cmp	r3, #6
    4acc:	ddc1      	ble.n	4a52 <_usb_device_interrupt_handler+0x52>
    4ace:	e239      	b.n	4f44 <_usb_device_interrupt_handler+0x544>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    4ad0:	1c3b      	adds	r3, r7, #0
    4ad2:	330b      	adds	r3, #11
    4ad4:	2200      	movs	r2, #0
    4ad6:	701a      	strb	r2, [r3, #0]
    4ad8:	e22e      	b.n	4f38 <_usb_device_interrupt_handler+0x538>

			if (ep_inst & (1 << i)) {
    4ada:	1c3b      	adds	r3, r7, #0
    4adc:	3308      	adds	r3, #8
    4ade:	881a      	ldrh	r2, [r3, #0]
    4ae0:	1c3b      	adds	r3, r7, #0
    4ae2:	330b      	adds	r3, #11
    4ae4:	781b      	ldrb	r3, [r3, #0]
    4ae6:	411a      	asrs	r2, r3
    4ae8:	2301      	movs	r3, #1
    4aea:	4013      	ands	r3, r2
    4aec:	d100      	bne.n	4af0 <_usb_device_interrupt_handler+0xf0>
    4aee:	e21c      	b.n	4f2a <_usb_device_interrupt_handler+0x52a>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    4af0:	4b91      	ldr	r3, [pc, #580]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4af2:	681b      	ldr	r3, [r3, #0]
    4af4:	681a      	ldr	r2, [r3, #0]
    4af6:	1c3b      	adds	r3, r7, #0
    4af8:	330b      	adds	r3, #11
    4afa:	781b      	ldrb	r3, [r3, #0]
    4afc:	3308      	adds	r3, #8
    4afe:	015b      	lsls	r3, r3, #5
    4b00:	18d3      	adds	r3, r2, r3
    4b02:	79db      	ldrb	r3, [r3, #7]
    4b04:	b2da      	uxtb	r2, r3
    4b06:	1dbb      	adds	r3, r7, #6
    4b08:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    4b0a:	4b8b      	ldr	r3, [pc, #556]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4b0c:	6819      	ldr	r1, [r3, #0]
    4b0e:	1c3b      	adds	r3, r7, #0
    4b10:	330b      	adds	r3, #11
    4b12:	781a      	ldrb	r2, [r3, #0]
    4b14:	23b0      	movs	r3, #176	; 0xb0
    4b16:	005b      	lsls	r3, r3, #1
    4b18:	188a      	adds	r2, r1, r2
    4b1a:	18d3      	adds	r3, r2, r3
    4b1c:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    4b1e:	1dba      	adds	r2, r7, #6
    4b20:	8812      	ldrh	r2, [r2, #0]
    4b22:	4013      	ands	r3, r2
    4b24:	b29b      	uxth	r3, r3
    4b26:	b299      	uxth	r1, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];
    4b28:	4b83      	ldr	r3, [pc, #524]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4b2a:	6818      	ldr	r0, [r3, #0]
    4b2c:	1c3b      	adds	r3, r7, #0
    4b2e:	330b      	adds	r3, #11
    4b30:	781a      	ldrb	r2, [r3, #0]
    4b32:	23ac      	movs	r3, #172	; 0xac
    4b34:	005b      	lsls	r3, r3, #1
    4b36:	1882      	adds	r2, r0, r2
    4b38:	18d3      	adds	r3, r2, r3
    4b3a:	781b      	ldrb	r3, [r3, #0]

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {

			if (ep_inst & (1 << i)) {
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
				flags_run = flags &
    4b3c:	1c1a      	adds	r2, r3, #0
    4b3e:	1c0b      	adds	r3, r1, #0
    4b40:	4013      	ands	r3, r2
    4b42:	b29a      	uxth	r2, r3
    4b44:	1d3b      	adds	r3, r7, #4
    4b46:	801a      	strh	r2, [r3, #0]
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
						_usb_instances->deivce_endpoint_registered_callback_mask[i];

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4b48:	1dbb      	adds	r3, r7, #6
    4b4a:	881a      	ldrh	r2, [r3, #0]
    4b4c:	2360      	movs	r3, #96	; 0x60
    4b4e:	4013      	ands	r3, r2
    4b50:	d059      	beq.n	4c06 <_usb_device_interrupt_handler+0x206>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    4b52:	4b79      	ldr	r3, [pc, #484]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4b54:	681b      	ldr	r3, [r3, #0]
    4b56:	681a      	ldr	r2, [r3, #0]
    4b58:	1c3b      	adds	r3, r7, #0
    4b5a:	330b      	adds	r3, #11
    4b5c:	781b      	ldrb	r3, [r3, #0]
    4b5e:	3308      	adds	r3, #8
    4b60:	015b      	lsls	r3, r3, #5
    4b62:	18d3      	adds	r3, r2, r3
    4b64:	79db      	ldrb	r3, [r3, #7]
    4b66:	b2db      	uxtb	r3, r3
    4b68:	1c1a      	adds	r2, r3, #0
    4b6a:	2340      	movs	r3, #64	; 0x40
    4b6c:	4013      	ands	r3, r2
    4b6e:	d014      	beq.n	4b9a <_usb_device_interrupt_handler+0x19a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    4b70:	4b71      	ldr	r3, [pc, #452]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4b72:	681b      	ldr	r3, [r3, #0]
    4b74:	681a      	ldr	r2, [r3, #0]
    4b76:	1c3b      	adds	r3, r7, #0
    4b78:	330b      	adds	r3, #11
    4b7a:	781b      	ldrb	r3, [r3, #0]
    4b7c:	3308      	adds	r3, #8
    4b7e:	015b      	lsls	r3, r3, #5
    4b80:	18d3      	adds	r3, r2, r3
    4b82:	2240      	movs	r2, #64	; 0x40
    4b84:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4b86:	1c3b      	adds	r3, r7, #0
    4b88:	330b      	adds	r3, #11
    4b8a:	781b      	ldrb	r3, [r3, #0]
    4b8c:	2280      	movs	r2, #128	; 0x80
    4b8e:	4252      	negs	r2, r2
    4b90:	4313      	orrs	r3, r2
    4b92:	b2da      	uxtb	r2, r3
    4b94:	4b6c      	ldr	r3, [pc, #432]	; (4d48 <_usb_device_interrupt_handler+0x348>)
    4b96:	719a      	strb	r2, [r3, #6]
    4b98:	e01e      	b.n	4bd8 <_usb_device_interrupt_handler+0x1d8>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    4b9a:	4b67      	ldr	r3, [pc, #412]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4b9c:	681b      	ldr	r3, [r3, #0]
    4b9e:	681a      	ldr	r2, [r3, #0]
    4ba0:	1c3b      	adds	r3, r7, #0
    4ba2:	330b      	adds	r3, #11
    4ba4:	781b      	ldrb	r3, [r3, #0]
    4ba6:	3308      	adds	r3, #8
    4ba8:	015b      	lsls	r3, r3, #5
    4baa:	18d3      	adds	r3, r2, r3
    4bac:	79db      	ldrb	r3, [r3, #7]
    4bae:	b2db      	uxtb	r3, r3
    4bb0:	1c1a      	adds	r2, r3, #0
    4bb2:	2320      	movs	r3, #32
    4bb4:	4013      	ands	r3, r2
    4bb6:	d00f      	beq.n	4bd8 <_usb_device_interrupt_handler+0x1d8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    4bb8:	4b5f      	ldr	r3, [pc, #380]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4bba:	681b      	ldr	r3, [r3, #0]
    4bbc:	681a      	ldr	r2, [r3, #0]
    4bbe:	1c3b      	adds	r3, r7, #0
    4bc0:	330b      	adds	r3, #11
    4bc2:	781b      	ldrb	r3, [r3, #0]
    4bc4:	3308      	adds	r3, #8
    4bc6:	015b      	lsls	r3, r3, #5
    4bc8:	18d3      	adds	r3, r2, r3
    4bca:	2220      	movs	r2, #32
    4bcc:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4bce:	4b5e      	ldr	r3, [pc, #376]	; (4d48 <_usb_device_interrupt_handler+0x348>)
    4bd0:	1c3a      	adds	r2, r7, #0
    4bd2:	320b      	adds	r2, #11
    4bd4:	7812      	ldrb	r2, [r2, #0]
    4bd6:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    4bd8:	1d3b      	adds	r3, r7, #4
    4bda:	881a      	ldrh	r2, [r3, #0]
    4bdc:	2360      	movs	r3, #96	; 0x60
    4bde:	4013      	ands	r3, r2
    4be0:	d010      	beq.n	4c04 <_usb_device_interrupt_handler+0x204>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    4be2:	4b55      	ldr	r3, [pc, #340]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4be4:	6819      	ldr	r1, [r3, #0]
    4be6:	1c3b      	adds	r3, r7, #0
    4be8:	330b      	adds	r3, #11
    4bea:	781a      	ldrb	r2, [r3, #0]
    4bec:	23dc      	movs	r3, #220	; 0xdc
    4bee:	0112      	lsls	r2, r2, #4
    4bf0:	188a      	adds	r2, r1, r2
    4bf2:	18d3      	adds	r3, r2, r3
    4bf4:	685a      	ldr	r2, [r3, #4]
    4bf6:	4b50      	ldr	r3, [pc, #320]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4bf8:	6819      	ldr	r1, [r3, #0]
    4bfa:	4b53      	ldr	r3, [pc, #332]	; (4d48 <_usb_device_interrupt_handler+0x348>)
    4bfc:	1c08      	adds	r0, r1, #0
    4bfe:	1c19      	adds	r1, r3, #0
    4c00:	4790      	blx	r2
					}
					return;
    4c02:	e19f      	b.n	4f44 <_usb_device_interrupt_handler+0x544>
    4c04:	e19e      	b.n	4f44 <_usb_device_interrupt_handler+0x544>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    4c06:	1dbb      	adds	r3, r7, #6
    4c08:	881a      	ldrh	r2, [r3, #0]
    4c0a:	2310      	movs	r3, #16
    4c0c:	4013      	ands	r3, r2
    4c0e:	d038      	beq.n	4c82 <_usb_device_interrupt_handler+0x282>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    4c10:	4b49      	ldr	r3, [pc, #292]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4c12:	681b      	ldr	r3, [r3, #0]
    4c14:	681a      	ldr	r2, [r3, #0]
    4c16:	1c3b      	adds	r3, r7, #0
    4c18:	330b      	adds	r3, #11
    4c1a:	781b      	ldrb	r3, [r3, #0]
    4c1c:	3308      	adds	r3, #8
    4c1e:	015b      	lsls	r3, r3, #5
    4c20:	18d3      	adds	r3, r2, r3
    4c22:	2210      	movs	r2, #16
    4c24:	71da      	strb	r2, [r3, #7]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    4c26:	4b44      	ldr	r3, [pc, #272]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4c28:	6819      	ldr	r1, [r3, #0]
    4c2a:	1c3b      	adds	r3, r7, #0
    4c2c:	330b      	adds	r3, #11
    4c2e:	781a      	ldrb	r2, [r3, #0]
    4c30:	23b0      	movs	r3, #176	; 0xb0
    4c32:	005b      	lsls	r3, r3, #1
    4c34:	188a      	adds	r2, r1, r2
    4c36:	18d3      	adds	r3, r2, r3
    4c38:	781b      	ldrb	r3, [r3, #0]
    4c3a:	2210      	movs	r2, #16
    4c3c:	4013      	ands	r3, r2
    4c3e:	b2db      	uxtb	r3, r3
    4c40:	2b00      	cmp	r3, #0
    4c42:	d01d      	beq.n	4c80 <_usb_device_interrupt_handler+0x280>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4c44:	1c3b      	adds	r3, r7, #0
    4c46:	330b      	adds	r3, #11
    4c48:	781b      	ldrb	r3, [r3, #0]
    4c4a:	4a3d      	ldr	r2, [pc, #244]	; (4d40 <_usb_device_interrupt_handler+0x340>)
    4c4c:	015b      	lsls	r3, r3, #5
    4c4e:	18d3      	adds	r3, r2, r3
    4c50:	685b      	ldr	r3, [r3, #4]
    4c52:	049b      	lsls	r3, r3, #18
    4c54:	0c9b      	lsrs	r3, r3, #18
    4c56:	b29b      	uxth	r3, r3
    4c58:	1c1a      	adds	r2, r3, #0
    4c5a:	4b3b      	ldr	r3, [pc, #236]	; (4d48 <_usb_device_interrupt_handler+0x348>)
    4c5c:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    4c5e:	4b36      	ldr	r3, [pc, #216]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4c60:	6819      	ldr	r1, [r3, #0]
    4c62:	1c3b      	adds	r3, r7, #0
    4c64:	330b      	adds	r3, #11
    4c66:	781a      	ldrb	r2, [r3, #0]
    4c68:	23d8      	movs	r3, #216	; 0xd8
    4c6a:	0112      	lsls	r2, r2, #4
    4c6c:	188a      	adds	r2, r1, r2
    4c6e:	18d3      	adds	r3, r2, r3
    4c70:	685a      	ldr	r2, [r3, #4]
    4c72:	4b31      	ldr	r3, [pc, #196]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4c74:	6819      	ldr	r1, [r3, #0]
    4c76:	4b34      	ldr	r3, [pc, #208]	; (4d48 <_usb_device_interrupt_handler+0x348>)
    4c78:	1c08      	adds	r0, r1, #0
    4c7a:	1c19      	adds	r1, r3, #0
    4c7c:	4790      	blx	r2
					}
					return;
    4c7e:	e161      	b.n	4f44 <_usb_device_interrupt_handler+0x544>
    4c80:	e160      	b.n	4f44 <_usb_device_interrupt_handler+0x544>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4c82:	1dbb      	adds	r3, r7, #6
    4c84:	881a      	ldrh	r2, [r3, #0]
    4c86:	230c      	movs	r3, #12
    4c88:	4013      	ands	r3, r2
    4c8a:	d100      	bne.n	4c8e <_usb_device_interrupt_handler+0x28e>
    4c8c:	e0c5      	b.n	4e1a <_usb_device_interrupt_handler+0x41a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    4c8e:	4b2a      	ldr	r3, [pc, #168]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4c90:	681b      	ldr	r3, [r3, #0]
    4c92:	681a      	ldr	r2, [r3, #0]
    4c94:	1c3b      	adds	r3, r7, #0
    4c96:	330b      	adds	r3, #11
    4c98:	781b      	ldrb	r3, [r3, #0]
    4c9a:	3308      	adds	r3, #8
    4c9c:	015b      	lsls	r3, r3, #5
    4c9e:	18d3      	adds	r3, r2, r3
    4ca0:	79db      	ldrb	r3, [r3, #7]
    4ca2:	b2db      	uxtb	r3, r3
    4ca4:	1c1a      	adds	r2, r3, #0
    4ca6:	2308      	movs	r3, #8
    4ca8:	4013      	ands	r3, r2
    4caa:	d04f      	beq.n	4d4c <_usb_device_interrupt_handler+0x34c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    4cac:	4b22      	ldr	r3, [pc, #136]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4cae:	681b      	ldr	r3, [r3, #0]
    4cb0:	681a      	ldr	r2, [r3, #0]
    4cb2:	1c3b      	adds	r3, r7, #0
    4cb4:	330b      	adds	r3, #11
    4cb6:	781b      	ldrb	r3, [r3, #0]
    4cb8:	3308      	adds	r3, #8
    4cba:	015b      	lsls	r3, r3, #5
    4cbc:	18d3      	adds	r3, r2, r3
    4cbe:	2208      	movs	r2, #8
    4cc0:	71da      	strb	r2, [r3, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4cc2:	1c3b      	adds	r3, r7, #0
    4cc4:	330b      	adds	r3, #11
    4cc6:	781b      	ldrb	r3, [r3, #0]
    4cc8:	4a1d      	ldr	r2, [pc, #116]	; (4d40 <_usb_device_interrupt_handler+0x340>)
    4cca:	015b      	lsls	r3, r3, #5
    4ccc:	18d3      	adds	r3, r2, r3
    4cce:	3318      	adds	r3, #24
    4cd0:	789b      	ldrb	r3, [r3, #2]
    4cd2:	b2db      	uxtb	r3, r3
    4cd4:	1c1a      	adds	r2, r3, #0
    4cd6:	2302      	movs	r3, #2
    4cd8:	4013      	ands	r3, r2
    4cda:	d013      	beq.n	4d04 <_usb_device_interrupt_handler+0x304>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4cdc:	1c3b      	adds	r3, r7, #0
    4cde:	330b      	adds	r3, #11
    4ce0:	781b      	ldrb	r3, [r3, #0]
    4ce2:	1c3a      	adds	r2, r7, #0
    4ce4:	320b      	adds	r2, #11
    4ce6:	7812      	ldrb	r2, [r2, #0]
    4ce8:	4915      	ldr	r1, [pc, #84]	; (4d40 <_usb_device_interrupt_handler+0x340>)
    4cea:	0152      	lsls	r2, r2, #5
    4cec:	188a      	adds	r2, r1, r2
    4cee:	3218      	adds	r2, #24
    4cf0:	7892      	ldrb	r2, [r2, #2]
    4cf2:	b2d2      	uxtb	r2, r2
    4cf4:	2102      	movs	r1, #2
    4cf6:	438a      	bics	r2, r1
    4cf8:	b2d2      	uxtb	r2, r2
    4cfa:	4911      	ldr	r1, [pc, #68]	; (4d40 <_usb_device_interrupt_handler+0x340>)
    4cfc:	015b      	lsls	r3, r3, #5
    4cfe:	18cb      	adds	r3, r1, r3
    4d00:	3318      	adds	r3, #24
    4d02:	709a      	strb	r2, [r3, #2]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4d04:	1c3b      	adds	r3, r7, #0
    4d06:	330b      	adds	r3, #11
    4d08:	781b      	ldrb	r3, [r3, #0]
    4d0a:	2280      	movs	r2, #128	; 0x80
    4d0c:	4252      	negs	r2, r2
    4d0e:	4313      	orrs	r3, r2
    4d10:	b2da      	uxtb	r2, r3
    4d12:	4b0d      	ldr	r3, [pc, #52]	; (4d48 <_usb_device_interrupt_handler+0x348>)
    4d14:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4d16:	4b08      	ldr	r3, [pc, #32]	; (4d38 <_usb_device_interrupt_handler+0x338>)
    4d18:	681b      	ldr	r3, [r3, #0]
    4d1a:	681a      	ldr	r2, [r3, #0]
    4d1c:	1c3b      	adds	r3, r7, #0
    4d1e:	330b      	adds	r3, #11
    4d20:	781b      	ldrb	r3, [r3, #0]
    4d22:	3308      	adds	r3, #8
    4d24:	015b      	lsls	r3, r3, #5
    4d26:	18d3      	adds	r3, r2, r3
    4d28:	79db      	ldrb	r3, [r3, #7]
    4d2a:	b2db      	uxtb	r3, r3
    4d2c:	1c1a      	adds	r2, r3, #0
    4d2e:	2302      	movs	r3, #2
    4d30:	4013      	ands	r3, r2
    4d32:	d05b      	beq.n	4dec <_usb_device_interrupt_handler+0x3ec>
							return;
    4d34:	e106      	b.n	4f44 <_usb_device_interrupt_handler+0x544>
    4d36:	46c0      	nop			; (mov r8, r8)
    4d38:	20000730 	.word	0x20000730
    4d3c:	000067fc 	.word	0x000067fc
    4d40:	20000cf4 	.word	0x20000cf4
    4d44:	2000073c 	.word	0x2000073c
    4d48:	20000740 	.word	0x20000740
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    4d4c:	4b7f      	ldr	r3, [pc, #508]	; (4f4c <_usb_device_interrupt_handler+0x54c>)
    4d4e:	681b      	ldr	r3, [r3, #0]
    4d50:	681a      	ldr	r2, [r3, #0]
    4d52:	1c3b      	adds	r3, r7, #0
    4d54:	330b      	adds	r3, #11
    4d56:	781b      	ldrb	r3, [r3, #0]
    4d58:	3308      	adds	r3, #8
    4d5a:	015b      	lsls	r3, r3, #5
    4d5c:	18d3      	adds	r3, r2, r3
    4d5e:	79db      	ldrb	r3, [r3, #7]
    4d60:	b2db      	uxtb	r3, r3
    4d62:	1c1a      	adds	r2, r3, #0
    4d64:	2304      	movs	r3, #4
    4d66:	4013      	ands	r3, r2
    4d68:	d040      	beq.n	4dec <_usb_device_interrupt_handler+0x3ec>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    4d6a:	4b78      	ldr	r3, [pc, #480]	; (4f4c <_usb_device_interrupt_handler+0x54c>)
    4d6c:	681b      	ldr	r3, [r3, #0]
    4d6e:	681a      	ldr	r2, [r3, #0]
    4d70:	1c3b      	adds	r3, r7, #0
    4d72:	330b      	adds	r3, #11
    4d74:	781b      	ldrb	r3, [r3, #0]
    4d76:	3308      	adds	r3, #8
    4d78:	015b      	lsls	r3, r3, #5
    4d7a:	18d3      	adds	r3, r2, r3
    4d7c:	2204      	movs	r2, #4
    4d7e:	71da      	strb	r2, [r3, #7]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    4d80:	1c3b      	adds	r3, r7, #0
    4d82:	330b      	adds	r3, #11
    4d84:	781b      	ldrb	r3, [r3, #0]
    4d86:	4a72      	ldr	r2, [pc, #456]	; (4f50 <_usb_device_interrupt_handler+0x550>)
    4d88:	015b      	lsls	r3, r3, #5
    4d8a:	18d3      	adds	r3, r2, r3
    4d8c:	3308      	adds	r3, #8
    4d8e:	789b      	ldrb	r3, [r3, #2]
    4d90:	b2db      	uxtb	r3, r3
    4d92:	1c1a      	adds	r2, r3, #0
    4d94:	2302      	movs	r3, #2
    4d96:	4013      	ands	r3, r2
    4d98:	d013      	beq.n	4dc2 <_usb_device_interrupt_handler+0x3c2>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    4d9a:	1c3b      	adds	r3, r7, #0
    4d9c:	330b      	adds	r3, #11
    4d9e:	781b      	ldrb	r3, [r3, #0]
    4da0:	1c3a      	adds	r2, r7, #0
    4da2:	320b      	adds	r2, #11
    4da4:	7812      	ldrb	r2, [r2, #0]
    4da6:	496a      	ldr	r1, [pc, #424]	; (4f50 <_usb_device_interrupt_handler+0x550>)
    4da8:	0152      	lsls	r2, r2, #5
    4daa:	188a      	adds	r2, r1, r2
    4dac:	3208      	adds	r2, #8
    4dae:	7892      	ldrb	r2, [r2, #2]
    4db0:	b2d2      	uxtb	r2, r2
    4db2:	2102      	movs	r1, #2
    4db4:	438a      	bics	r2, r1
    4db6:	b2d2      	uxtb	r2, r2
    4db8:	4965      	ldr	r1, [pc, #404]	; (4f50 <_usb_device_interrupt_handler+0x550>)
    4dba:	015b      	lsls	r3, r3, #5
    4dbc:	18cb      	adds	r3, r1, r3
    4dbe:	3308      	adds	r3, #8
    4dc0:	709a      	strb	r2, [r3, #2]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4dc2:	4b64      	ldr	r3, [pc, #400]	; (4f54 <_usb_device_interrupt_handler+0x554>)
    4dc4:	1c3a      	adds	r2, r7, #0
    4dc6:	320b      	adds	r2, #11
    4dc8:	7812      	ldrb	r2, [r2, #0]
    4dca:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4dcc:	4b5f      	ldr	r3, [pc, #380]	; (4f4c <_usb_device_interrupt_handler+0x54c>)
    4dce:	681b      	ldr	r3, [r3, #0]
    4dd0:	681a      	ldr	r2, [r3, #0]
    4dd2:	1c3b      	adds	r3, r7, #0
    4dd4:	330b      	adds	r3, #11
    4dd6:	781b      	ldrb	r3, [r3, #0]
    4dd8:	3308      	adds	r3, #8
    4dda:	015b      	lsls	r3, r3, #5
    4ddc:	18d3      	adds	r3, r2, r3
    4dde:	79db      	ldrb	r3, [r3, #7]
    4de0:	b2db      	uxtb	r3, r3
    4de2:	1c1a      	adds	r2, r3, #0
    4de4:	2301      	movs	r3, #1
    4de6:	4013      	ands	r3, r2
    4de8:	d000      	beq.n	4dec <_usb_device_interrupt_handler+0x3ec>
							return;
    4dea:	e0ab      	b.n	4f44 <_usb_device_interrupt_handler+0x544>
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    4dec:	1d3b      	adds	r3, r7, #4
    4dee:	881a      	ldrh	r2, [r3, #0]
    4df0:	230c      	movs	r3, #12
    4df2:	4013      	ands	r3, r2
    4df4:	d010      	beq.n	4e18 <_usb_device_interrupt_handler+0x418>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    4df6:	4b55      	ldr	r3, [pc, #340]	; (4f4c <_usb_device_interrupt_handler+0x54c>)
    4df8:	6819      	ldr	r1, [r3, #0]
    4dfa:	1c3b      	adds	r3, r7, #0
    4dfc:	330b      	adds	r3, #11
    4dfe:	781a      	ldrb	r2, [r3, #0]
    4e00:	23d4      	movs	r3, #212	; 0xd4
    4e02:	0112      	lsls	r2, r2, #4
    4e04:	188a      	adds	r2, r1, r2
    4e06:	18d3      	adds	r3, r2, r3
    4e08:	685a      	ldr	r2, [r3, #4]
    4e0a:	4b50      	ldr	r3, [pc, #320]	; (4f4c <_usb_device_interrupt_handler+0x54c>)
    4e0c:	6819      	ldr	r1, [r3, #0]
    4e0e:	4b51      	ldr	r3, [pc, #324]	; (4f54 <_usb_device_interrupt_handler+0x554>)
    4e10:	1c08      	adds	r0, r1, #0
    4e12:	1c19      	adds	r1, r3, #0
    4e14:	4790      	blx	r2
					}
					return;
    4e16:	e095      	b.n	4f44 <_usb_device_interrupt_handler+0x544>
    4e18:	e094      	b.n	4f44 <_usb_device_interrupt_handler+0x544>
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4e1a:	1dbb      	adds	r3, r7, #6
    4e1c:	881a      	ldrh	r2, [r3, #0]
    4e1e:	2303      	movs	r3, #3
    4e20:	4013      	ands	r3, r2
    4e22:	d100      	bne.n	4e26 <_usb_device_interrupt_handler+0x426>
    4e24:	e081      	b.n	4f2a <_usb_device_interrupt_handler+0x52a>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    4e26:	4b49      	ldr	r3, [pc, #292]	; (4f4c <_usb_device_interrupt_handler+0x54c>)
    4e28:	681b      	ldr	r3, [r3, #0]
    4e2a:	681a      	ldr	r2, [r3, #0]
    4e2c:	1c3b      	adds	r3, r7, #0
    4e2e:	330b      	adds	r3, #11
    4e30:	781b      	ldrb	r3, [r3, #0]
    4e32:	3308      	adds	r3, #8
    4e34:	015b      	lsls	r3, r3, #5
    4e36:	18d3      	adds	r3, r2, r3
    4e38:	79db      	ldrb	r3, [r3, #7]
    4e3a:	b2db      	uxtb	r3, r3
    4e3c:	1c1a      	adds	r2, r3, #0
    4e3e:	2302      	movs	r3, #2
    4e40:	4013      	ands	r3, r2
    4e42:	d022      	beq.n	4e8a <_usb_device_interrupt_handler+0x48a>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    4e44:	4b41      	ldr	r3, [pc, #260]	; (4f4c <_usb_device_interrupt_handler+0x54c>)
    4e46:	681b      	ldr	r3, [r3, #0]
    4e48:	681a      	ldr	r2, [r3, #0]
    4e4a:	1c3b      	adds	r3, r7, #0
    4e4c:	330b      	adds	r3, #11
    4e4e:	781b      	ldrb	r3, [r3, #0]
    4e50:	3308      	adds	r3, #8
    4e52:	015b      	lsls	r3, r3, #5
    4e54:	18d3      	adds	r3, r2, r3
    4e56:	2202      	movs	r2, #2
    4e58:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    4e5a:	1c3b      	adds	r3, r7, #0
    4e5c:	330b      	adds	r3, #11
    4e5e:	781b      	ldrb	r3, [r3, #0]
    4e60:	2280      	movs	r2, #128	; 0x80
    4e62:	4252      	negs	r2, r2
    4e64:	4313      	orrs	r3, r2
    4e66:	b2da      	uxtb	r2, r3
    4e68:	4b3a      	ldr	r3, [pc, #232]	; (4f54 <_usb_device_interrupt_handler+0x554>)
    4e6a:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    4e6c:	1c3b      	adds	r3, r7, #0
    4e6e:	330b      	adds	r3, #11
    4e70:	781b      	ldrb	r3, [r3, #0]
    4e72:	4a37      	ldr	r2, [pc, #220]	; (4f50 <_usb_device_interrupt_handler+0x550>)
    4e74:	015b      	lsls	r3, r3, #5
    4e76:	18d3      	adds	r3, r2, r3
    4e78:	3310      	adds	r3, #16
    4e7a:	685b      	ldr	r3, [r3, #4]
    4e7c:	049b      	lsls	r3, r3, #18
    4e7e:	0c9b      	lsrs	r3, r3, #18
    4e80:	b29b      	uxth	r3, r3
    4e82:	1c1a      	adds	r2, r3, #0
    4e84:	4b33      	ldr	r3, [pc, #204]	; (4f54 <_usb_device_interrupt_handler+0x554>)
    4e86:	805a      	strh	r2, [r3, #2]
    4e88:	e039      	b.n	4efe <_usb_device_interrupt_handler+0x4fe>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    4e8a:	4b30      	ldr	r3, [pc, #192]	; (4f4c <_usb_device_interrupt_handler+0x54c>)
    4e8c:	681b      	ldr	r3, [r3, #0]
    4e8e:	681a      	ldr	r2, [r3, #0]
    4e90:	1c3b      	adds	r3, r7, #0
    4e92:	330b      	adds	r3, #11
    4e94:	781b      	ldrb	r3, [r3, #0]
    4e96:	3308      	adds	r3, #8
    4e98:	015b      	lsls	r3, r3, #5
    4e9a:	18d3      	adds	r3, r2, r3
    4e9c:	79db      	ldrb	r3, [r3, #7]
    4e9e:	b2db      	uxtb	r3, r3
    4ea0:	1c1a      	adds	r2, r3, #0
    4ea2:	2301      	movs	r3, #1
    4ea4:	4013      	ands	r3, r2
    4ea6:	d02a      	beq.n	4efe <_usb_device_interrupt_handler+0x4fe>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    4ea8:	4b28      	ldr	r3, [pc, #160]	; (4f4c <_usb_device_interrupt_handler+0x54c>)
    4eaa:	681b      	ldr	r3, [r3, #0]
    4eac:	681a      	ldr	r2, [r3, #0]
    4eae:	1c3b      	adds	r3, r7, #0
    4eb0:	330b      	adds	r3, #11
    4eb2:	781b      	ldrb	r3, [r3, #0]
    4eb4:	3308      	adds	r3, #8
    4eb6:	015b      	lsls	r3, r3, #5
    4eb8:	18d3      	adds	r3, r2, r3
    4eba:	2201      	movs	r2, #1
    4ebc:	71da      	strb	r2, [r3, #7]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    4ebe:	4b25      	ldr	r3, [pc, #148]	; (4f54 <_usb_device_interrupt_handler+0x554>)
    4ec0:	1c3a      	adds	r2, r7, #0
    4ec2:	320b      	adds	r2, #11
    4ec4:	7812      	ldrb	r2, [r2, #0]
    4ec6:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    4ec8:	1c3b      	adds	r3, r7, #0
    4eca:	330b      	adds	r3, #11
    4ecc:	781b      	ldrb	r3, [r3, #0]
    4ece:	4a20      	ldr	r2, [pc, #128]	; (4f50 <_usb_device_interrupt_handler+0x550>)
    4ed0:	015b      	lsls	r3, r3, #5
    4ed2:	18d3      	adds	r3, r2, r3
    4ed4:	685b      	ldr	r3, [r3, #4]
    4ed6:	049b      	lsls	r3, r3, #18
    4ed8:	0c9b      	lsrs	r3, r3, #18
    4eda:	b29b      	uxth	r3, r3
    4edc:	1c1a      	adds	r2, r3, #0
    4ede:	4b1d      	ldr	r3, [pc, #116]	; (4f54 <_usb_device_interrupt_handler+0x554>)
    4ee0:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    4ee2:	1c3b      	adds	r3, r7, #0
    4ee4:	330b      	adds	r3, #11
    4ee6:	781b      	ldrb	r3, [r3, #0]
    4ee8:	4a19      	ldr	r2, [pc, #100]	; (4f50 <_usb_device_interrupt_handler+0x550>)
    4eea:	015b      	lsls	r3, r3, #5
    4eec:	18d3      	adds	r3, r2, r3
    4eee:	685b      	ldr	r3, [r3, #4]
    4ef0:	0b9b      	lsrs	r3, r3, #14
    4ef2:	049b      	lsls	r3, r3, #18
    4ef4:	0c9b      	lsrs	r3, r3, #18
    4ef6:	b29b      	uxth	r3, r3
    4ef8:	1c1a      	adds	r2, r3, #0
    4efa:	4b16      	ldr	r3, [pc, #88]	; (4f54 <_usb_device_interrupt_handler+0x554>)
    4efc:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    4efe:	1d3b      	adds	r3, r7, #4
    4f00:	881a      	ldrh	r2, [r3, #0]
    4f02:	2303      	movs	r3, #3
    4f04:	4013      	ands	r3, r2
    4f06:	d00f      	beq.n	4f28 <_usb_device_interrupt_handler+0x528>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    4f08:	4b10      	ldr	r3, [pc, #64]	; (4f4c <_usb_device_interrupt_handler+0x54c>)
    4f0a:	681a      	ldr	r2, [r3, #0]
    4f0c:	1c3b      	adds	r3, r7, #0
    4f0e:	330b      	adds	r3, #11
    4f10:	781b      	ldrb	r3, [r3, #0]
    4f12:	330d      	adds	r3, #13
    4f14:	011b      	lsls	r3, r3, #4
    4f16:	18d3      	adds	r3, r2, r3
    4f18:	685a      	ldr	r2, [r3, #4]
    4f1a:	4b0c      	ldr	r3, [pc, #48]	; (4f4c <_usb_device_interrupt_handler+0x54c>)
    4f1c:	6819      	ldr	r1, [r3, #0]
    4f1e:	4b0d      	ldr	r3, [pc, #52]	; (4f54 <_usb_device_interrupt_handler+0x554>)
    4f20:	1c08      	adds	r0, r1, #0
    4f22:	1c19      	adds	r1, r3, #0
    4f24:	4790      	blx	r2
					}
					return;
    4f26:	e00d      	b.n	4f44 <_usb_device_interrupt_handler+0x544>
    4f28:	e00c      	b.n	4f44 <_usb_device_interrupt_handler+0x544>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    4f2a:	1c3b      	adds	r3, r7, #0
    4f2c:	330b      	adds	r3, #11
    4f2e:	781a      	ldrb	r2, [r3, #0]
    4f30:	1c3b      	adds	r3, r7, #0
    4f32:	330b      	adds	r3, #11
    4f34:	3201      	adds	r2, #1
    4f36:	701a      	strb	r2, [r3, #0]
    4f38:	1c3b      	adds	r3, r7, #0
    4f3a:	330b      	adds	r3, #11
    4f3c:	781b      	ldrb	r3, [r3, #0]
    4f3e:	2b07      	cmp	r3, #7
    4f40:	d800      	bhi.n	4f44 <_usb_device_interrupt_handler+0x544>
    4f42:	e5ca      	b.n	4ada <_usb_device_interrupt_handler+0xda>
					return;
				}
			}
		}
	}
}
    4f44:	46bd      	mov	sp, r7
    4f46:	b004      	add	sp, #16
    4f48:	bd80      	pop	{r7, pc}
    4f4a:	46c0      	nop			; (mov r8, r8)
    4f4c:	20000730 	.word	0x20000730
    4f50:	20000cf4 	.word	0x20000cf4
    4f54:	20000740 	.word	0x20000740

00004f58 <usb_enable>:
 * \brief Enable the USB module peripheral
 *
 * \param module_inst pointer to USB module instance
 */
void usb_enable(struct usb_module *module_inst)
{
    4f58:	b580      	push	{r7, lr}
    4f5a:	b082      	sub	sp, #8
    4f5c:	af00      	add	r7, sp, #0
    4f5e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    4f60:	687b      	ldr	r3, [r7, #4]
    4f62:	681a      	ldr	r2, [r3, #0]
    4f64:	687b      	ldr	r3, [r7, #4]
    4f66:	681b      	ldr	r3, [r3, #0]
    4f68:	781b      	ldrb	r3, [r3, #0]
    4f6a:	b2db      	uxtb	r3, r3
    4f6c:	2102      	movs	r1, #2
    4f6e:	430b      	orrs	r3, r1
    4f70:	b2db      	uxtb	r3, r3
    4f72:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    4f74:	46c0      	nop			; (mov r8, r8)
    4f76:	687b      	ldr	r3, [r7, #4]
    4f78:	681b      	ldr	r3, [r3, #0]
    4f7a:	789b      	ldrb	r3, [r3, #2]
    4f7c:	b2db      	uxtb	r3, r3
    4f7e:	2b02      	cmp	r3, #2
    4f80:	d0f9      	beq.n	4f76 <usb_enable+0x1e>
}
    4f82:	46bd      	mov	sp, r7
    4f84:	b002      	add	sp, #8
    4f86:	bd80      	pop	{r7, pc}

00004f88 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    4f88:	b580      	push	{r7, lr}
    4f8a:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    4f8c:	4b07      	ldr	r3, [pc, #28]	; (4fac <USB_Handler+0x24>)
    4f8e:	681b      	ldr	r3, [r3, #0]
    4f90:	681b      	ldr	r3, [r3, #0]
    4f92:	781b      	ldrb	r3, [r3, #0]
    4f94:	b2db      	uxtb	r3, r3
    4f96:	09db      	lsrs	r3, r3, #7
    4f98:	b2db      	uxtb	r3, r3
    4f9a:	2b00      	cmp	r3, #0
    4f9c:	d002      	beq.n	4fa4 <USB_Handler+0x1c>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    4f9e:	4b04      	ldr	r3, [pc, #16]	; (4fb0 <USB_Handler+0x28>)
    4fa0:	4798      	blx	r3
    4fa2:	e001      	b.n	4fa8 <USB_Handler+0x20>
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
    4fa4:	4b03      	ldr	r3, [pc, #12]	; (4fb4 <USB_Handler+0x2c>)
    4fa6:	4798      	blx	r3
	}
}
    4fa8:	46bd      	mov	sp, r7
    4faa:	bd80      	pop	{r7, pc}
    4fac:	20000730 	.word	0x20000730
    4fb0:	00003719 	.word	0x00003719
    4fb4:	00004a01 	.word	0x00004a01

00004fb8 <usb_get_config_defaults>:
 * \brief Get the default USB module settings
 *
 * \param[out] module_config  Configuration structure to initialize to default values
 */
void usb_get_config_defaults(struct usb_config *module_config)
{
    4fb8:	b580      	push	{r7, lr}
    4fba:	b082      	sub	sp, #8
    4fbc:	af00      	add	r7, sp, #0
    4fbe:	6078      	str	r0, [r7, #4]
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    4fc0:	687b      	ldr	r3, [r7, #4]
    4fc2:	2200      	movs	r2, #0
    4fc4:	701a      	strb	r2, [r3, #0]
	module_config->run_in_standby = 1;
    4fc6:	687b      	ldr	r3, [r7, #4]
    4fc8:	2201      	movs	r2, #1
    4fca:	705a      	strb	r2, [r3, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    4fcc:	687b      	ldr	r3, [r7, #4]
    4fce:	2200      	movs	r2, #0
    4fd0:	709a      	strb	r2, [r3, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    4fd2:	687b      	ldr	r3, [r7, #4]
    4fd4:	2201      	movs	r2, #1
    4fd6:	70da      	strb	r2, [r3, #3]
}
    4fd8:	46bd      	mov	sp, r7
    4fda:	b002      	add	sp, #8
    4fdc:	bd80      	pop	{r7, pc}
    4fde:	46c0      	nop			; (mov r8, r8)

00004fe0 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    4fe0:	b580      	push	{r7, lr}
    4fe2:	b08c      	sub	sp, #48	; 0x30
    4fe4:	af00      	add	r7, sp, #0
    4fe6:	60f8      	str	r0, [r7, #12]
    4fe8:	60b9      	str	r1, [r7, #8]
    4fea:	607a      	str	r2, [r7, #4]
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    4fec:	4bbb      	ldr	r3, [pc, #748]	; (52dc <usb_init+0x2fc>)
    4fee:	2200      	movs	r2, #0
    4ff0:	601a      	str	r2, [r3, #0]
#endif

	_usb_instances = module_inst;
    4ff2:	4bbb      	ldr	r3, [pc, #748]	; (52e0 <usb_init+0x300>)
    4ff4:	68fa      	ldr	r2, [r7, #12]
    4ff6:	601a      	str	r2, [r3, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    4ff8:	68fb      	ldr	r3, [r7, #12]
    4ffa:	68ba      	ldr	r2, [r7, #8]
    4ffc:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);
    4ffe:	2001      	movs	r0, #1
    5000:	2120      	movs	r1, #32
    5002:	4bb8      	ldr	r3, [pc, #736]	; (52e4 <usb_init+0x304>)
    5004:	4798      	blx	r3

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
    5006:	1c3b      	adds	r3, r7, #0
    5008:	3318      	adds	r3, #24
    500a:	1c18      	adds	r0, r3, #0
    500c:	4bb6      	ldr	r3, [pc, #728]	; (52e8 <usb_init+0x308>)
    500e:	4798      	blx	r3
	pin_config.mux_position = MUX_PA24G_USB_DM;
    5010:	1c3b      	adds	r3, r7, #0
    5012:	3318      	adds	r3, #24
    5014:	2206      	movs	r2, #6
    5016:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    5018:	1c3b      	adds	r3, r7, #0
    501a:	3318      	adds	r3, #24
    501c:	2018      	movs	r0, #24
    501e:	1c19      	adds	r1, r3, #0
    5020:	4bb2      	ldr	r3, [pc, #712]	; (52ec <usb_init+0x30c>)
    5022:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    5024:	1c3b      	adds	r3, r7, #0
    5026:	3318      	adds	r3, #24
    5028:	2206      	movs	r2, #6
    502a:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    502c:	1c3b      	adds	r3, r7, #0
    502e:	3318      	adds	r3, #24
    5030:	2019      	movs	r0, #25
    5032:	1c19      	adds	r1, r3, #0
    5034:	4bad      	ldr	r3, [pc, #692]	; (52ec <usb_init+0x30c>)
    5036:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    5038:	1c3b      	adds	r3, r7, #0
    503a:	3314      	adds	r3, #20
    503c:	1c18      	adds	r0, r3, #0
    503e:	4bac      	ldr	r3, [pc, #688]	; (52f0 <usb_init+0x310>)
    5040:	4798      	blx	r3
	gclk_chan_config.source_generator = module_config->source_generator;
    5042:	687b      	ldr	r3, [r7, #4]
    5044:	789a      	ldrb	r2, [r3, #2]
    5046:	1c3b      	adds	r3, r7, #0
    5048:	3314      	adds	r3, #20
    504a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    504c:	1c3b      	adds	r3, r7, #0
    504e:	3314      	adds	r3, #20
    5050:	2006      	movs	r0, #6
    5052:	1c19      	adds	r1, r3, #0
    5054:	4ba7      	ldr	r3, [pc, #668]	; (52f4 <usb_init+0x314>)
    5056:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    5058:	2006      	movs	r0, #6
    505a:	4ba7      	ldr	r3, [pc, #668]	; (52f8 <usb_init+0x318>)
    505c:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    505e:	68bb      	ldr	r3, [r7, #8]
    5060:	781a      	ldrb	r2, [r3, #0]
    5062:	2101      	movs	r1, #1
    5064:	430a      	orrs	r2, r1
    5066:	701a      	strb	r2, [r3, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    5068:	46c0      	nop			; (mov r8, r8)
    506a:	68bb      	ldr	r3, [r7, #8]
    506c:	789a      	ldrb	r2, [r3, #2]
    506e:	2301      	movs	r3, #1
    5070:	4013      	ands	r3, r2
    5072:	b2db      	uxtb	r3, r3
    5074:	2b00      	cmp	r3, #0
    5076:	d1f8      	bne.n	506a <usb_init+0x8a>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5078:	4ba0      	ldr	r3, [pc, #640]	; (52fc <usb_init+0x31c>)
    507a:	78da      	ldrb	r2, [r3, #3]
    507c:	2103      	movs	r1, #3
    507e:	438a      	bics	r2, r1
    5080:	2102      	movs	r1, #2
    5082:	430a      	orrs	r2, r1
    5084:	70da      	strb	r2, [r3, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5086:	4b9d      	ldr	r3, [pc, #628]	; (52fc <usb_init+0x31c>)
    5088:	78da      	ldrb	r2, [r3, #3]
    508a:	210c      	movs	r1, #12
    508c:	438a      	bics	r2, r1
    508e:	2108      	movs	r1, #8
    5090:	430a      	orrs	r2, r1
    5092:	70da      	strb	r2, [r3, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    5094:	4b9a      	ldr	r3, [pc, #616]	; (5300 <usb_init+0x320>)
    5096:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    5098:	0b5a      	lsrs	r2, r3, #13
	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    509a:	231f      	movs	r3, #31
    509c:	4013      	ands	r3, r2
    509e:	627b      	str	r3, [r7, #36]	; 0x24
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    50a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    50a2:	2b1f      	cmp	r3, #31
    50a4:	d101      	bne.n	50aa <usb_init+0xca>
		pad_transn = 5;
    50a6:	2305      	movs	r3, #5
    50a8:	627b      	str	r3, [r7, #36]	; 0x24
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    50aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    50ac:	b2db      	uxtb	r3, r3
    50ae:	1c1a      	adds	r2, r3, #0
    50b0:	231f      	movs	r3, #31
    50b2:	4013      	ands	r3, r2
    50b4:	b2d9      	uxtb	r1, r3
    50b6:	68bb      	ldr	r3, [r7, #8]
    50b8:	221f      	movs	r2, #31
    50ba:	400a      	ands	r2, r1
    50bc:	0192      	lsls	r2, r2, #6
    50be:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    50c0:	4990      	ldr	r1, [pc, #576]	; (5304 <usb_init+0x324>)
    50c2:	4001      	ands	r1, r0
    50c4:	430a      	orrs	r2, r1
    50c6:	851a      	strh	r2, [r3, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    50c8:	4b8d      	ldr	r3, [pc, #564]	; (5300 <usb_init+0x320>)
    50ca:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    50cc:	0c9a      	lsrs	r2, r3, #18
		pad_transn = 5;
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    50ce:	231f      	movs	r3, #31
    50d0:	4013      	ands	r3, r2
    50d2:	623b      	str	r3, [r7, #32]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    50d4:	6a3b      	ldr	r3, [r7, #32]
    50d6:	2b1f      	cmp	r3, #31
    50d8:	d101      	bne.n	50de <usb_init+0xfe>
		pad_transp = 29;
    50da:	231d      	movs	r3, #29
    50dc:	623b      	str	r3, [r7, #32]
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    50de:	6a3b      	ldr	r3, [r7, #32]
    50e0:	b2db      	uxtb	r3, r3
    50e2:	1c1a      	adds	r2, r3, #0
    50e4:	231f      	movs	r3, #31
    50e6:	4013      	ands	r3, r2
    50e8:	b2d9      	uxtb	r1, r3
    50ea:	68bb      	ldr	r3, [r7, #8]
    50ec:	221f      	movs	r2, #31
    50ee:	400a      	ands	r2, r1
    50f0:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    50f2:	201f      	movs	r0, #31
    50f4:	4381      	bics	r1, r0
    50f6:	430a      	orrs	r2, r1
    50f8:	851a      	strh	r2, [r3, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    50fa:	4b81      	ldr	r3, [pc, #516]	; (5300 <usb_init+0x320>)
    50fc:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    50fe:	0dda      	lsrs	r2, r3, #23
		pad_transp = 29;
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    5100:	2307      	movs	r3, #7
    5102:	4013      	ands	r3, r2
    5104:	61fb      	str	r3, [r7, #28]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    5106:	69fb      	ldr	r3, [r7, #28]
    5108:	2b07      	cmp	r3, #7
    510a:	d101      	bne.n	5110 <usb_init+0x130>
		pad_trim = 3;
    510c:	2303      	movs	r3, #3
    510e:	61fb      	str	r3, [r7, #28]
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    5110:	69fb      	ldr	r3, [r7, #28]
    5112:	b2db      	uxtb	r3, r3
    5114:	1c1a      	adds	r2, r3, #0
    5116:	2307      	movs	r3, #7
    5118:	4013      	ands	r3, r2
    511a:	b2d9      	uxtb	r1, r3
    511c:	68bb      	ldr	r3, [r7, #8]
    511e:	2207      	movs	r2, #7
    5120:	400a      	ands	r2, r1
    5122:	0312      	lsls	r2, r2, #12
    5124:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    5126:	4978      	ldr	r1, [pc, #480]	; (5308 <usb_init+0x328>)
    5128:	4001      	ands	r1, r0
    512a:	430a      	orrs	r2, r1
    512c:	851a      	strh	r2, [r3, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    512e:	687b      	ldr	r3, [r7, #4]
    5130:	781a      	ldrb	r2, [r3, #0]
    5132:	68bb      	ldr	r3, [r7, #8]
    5134:	01d2      	lsls	r2, r2, #7
    5136:	7818      	ldrb	r0, [r3, #0]
    5138:	217f      	movs	r1, #127	; 0x7f
    513a:	4001      	ands	r1, r0
    513c:	430a      	orrs	r2, r1
    513e:	701a      	strb	r2, [r3, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    5140:	687b      	ldr	r3, [r7, #4]
    5142:	7859      	ldrb	r1, [r3, #1]
    5144:	68bb      	ldr	r3, [r7, #8]
    5146:	2201      	movs	r2, #1
    5148:	400a      	ands	r2, r1
    514a:	0092      	lsls	r2, r2, #2
    514c:	7819      	ldrb	r1, [r3, #0]
    514e:	2004      	movs	r0, #4
    5150:	4381      	bics	r1, r0
    5152:	430a      	orrs	r2, r1
    5154:	701a      	strb	r2, [r3, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    5156:	4a6d      	ldr	r2, [pc, #436]	; (530c <usb_init+0x32c>)
    5158:	68bb      	ldr	r3, [r7, #8]
    515a:	625a      	str	r2, [r3, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    515c:	687b      	ldr	r3, [r7, #4]
    515e:	78db      	ldrb	r3, [r3, #3]
    5160:	2b01      	cmp	r3, #1
    5162:	d106      	bne.n	5172 <usb_init+0x192>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    5164:	68fb      	ldr	r3, [r7, #12]
    5166:	681b      	ldr	r3, [r3, #0]
    5168:	891a      	ldrh	r2, [r3, #8]
    516a:	210c      	movs	r1, #12
    516c:	438a      	bics	r2, r1
    516e:	811a      	strh	r2, [r3, #8]
    5170:	e00b      	b.n	518a <usb_init+0x1aa>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    5172:	687b      	ldr	r3, [r7, #4]
    5174:	78db      	ldrb	r3, [r3, #3]
    5176:	2b00      	cmp	r3, #0
    5178:	d107      	bne.n	518a <usb_init+0x1aa>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    517a:	68fb      	ldr	r3, [r7, #12]
    517c:	681b      	ldr	r3, [r3, #0]
    517e:	891a      	ldrh	r2, [r3, #8]
    5180:	210c      	movs	r1, #12
    5182:	438a      	bics	r2, r1
    5184:	2104      	movs	r1, #4
    5186:	430a      	orrs	r2, r1
    5188:	811a      	strh	r2, [r3, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    518a:	4a60      	ldr	r2, [pc, #384]	; (530c <usb_init+0x32c>)
    518c:	2380      	movs	r3, #128	; 0x80
    518e:	005b      	lsls	r3, r3, #1
    5190:	1c10      	adds	r0, r2, #0
    5192:	2100      	movs	r1, #0
    5194:	1c1a      	adds	r2, r3, #0
    5196:	4b5e      	ldr	r3, [pc, #376]	; (5310 <usb_init+0x330>)
    5198:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    519a:	2300      	movs	r3, #0
    519c:	62fb      	str	r3, [r7, #44]	; 0x2c
    519e:	e008      	b.n	51b2 <usb_init+0x1d2>
		module_inst->host_callback[i] = NULL;
    51a0:	68fa      	ldr	r2, [r7, #12]
    51a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    51a4:	009b      	lsls	r3, r3, #2
    51a6:	18d3      	adds	r3, r2, r3
    51a8:	2200      	movs	r2, #0
    51aa:	605a      	str	r2, [r3, #4]
	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    51ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    51ae:	3301      	adds	r3, #1
    51b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    51b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    51b4:	2b07      	cmp	r3, #7
    51b6:	d9f3      	bls.n	51a0 <usb_init+0x1c0>
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    51b8:	2300      	movs	r3, #0
    51ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    51bc:	e015      	b.n	51ea <usb_init+0x20a>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    51be:	2300      	movs	r3, #0
    51c0:	62bb      	str	r3, [r7, #40]	; 0x28
    51c2:	e00c      	b.n	51de <usb_init+0x1fe>
			module_inst->host_pipe_callback[i][j] = NULL;
    51c4:	68fa      	ldr	r2, [r7, #12]
    51c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    51c8:	0099      	lsls	r1, r3, #2
    51ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    51cc:	18cb      	adds	r3, r1, r3
    51ce:	3308      	adds	r3, #8
    51d0:	009b      	lsls	r3, r3, #2
    51d2:	18d3      	adds	r3, r2, r3
    51d4:	2200      	movs	r2, #0
    51d6:	605a      	str	r2, [r3, #4]
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    51d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    51da:	3301      	adds	r3, #1
    51dc:	62bb      	str	r3, [r7, #40]	; 0x28
    51de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    51e0:	2b03      	cmp	r3, #3
    51e2:	d9ef      	bls.n	51c4 <usb_init+0x1e4>
#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
		module_inst->host_callback[i] = NULL;
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    51e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    51e6:	3301      	adds	r3, #1
    51e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    51ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    51ec:	2b07      	cmp	r3, #7
    51ee:	d9e6      	bls.n	51be <usb_init+0x1de>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
    51f0:	68fa      	ldr	r2, [r7, #12]
    51f2:	23a4      	movs	r3, #164	; 0xa4
    51f4:	2100      	movs	r1, #0
    51f6:	54d1      	strb	r1, [r2, r3]
	module_inst->host_enabled_callback_mask = 0;
    51f8:	68fa      	ldr	r2, [r7, #12]
    51fa:	23a5      	movs	r3, #165	; 0xa5
    51fc:	2100      	movs	r1, #0
    51fe:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    5200:	2300      	movs	r3, #0
    5202:	62fb      	str	r3, [r7, #44]	; 0x2c
    5204:	e010      	b.n	5228 <usb_init+0x248>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    5206:	68f9      	ldr	r1, [r7, #12]
    5208:	23a0      	movs	r3, #160	; 0xa0
    520a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    520c:	188a      	adds	r2, r1, r2
    520e:	18d3      	adds	r3, r2, r3
    5210:	2200      	movs	r2, #0
    5212:	719a      	strb	r2, [r3, #6]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    5214:	68f9      	ldr	r1, [r7, #12]
    5216:	23a8      	movs	r3, #168	; 0xa8
    5218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    521a:	188a      	adds	r2, r1, r2
    521c:	18d3      	adds	r3, r2, r3
    521e:	2200      	movs	r2, #0
    5220:	719a      	strb	r2, [r3, #6]
			module_inst->host_pipe_callback[i][j] = NULL;
		}
	};
	module_inst->host_registered_callback_mask = 0;
	module_inst->host_enabled_callback_mask = 0;
	for (i = 0; i < USB_PIPE_NUM; i++) {
    5222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5224:	3301      	adds	r3, #1
    5226:	62fb      	str	r3, [r7, #44]	; 0x2c
    5228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    522a:	2b07      	cmp	r3, #7
    522c:	d9eb      	bls.n	5206 <usb_init+0x226>
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    522e:	2300      	movs	r3, #0
    5230:	62fb      	str	r3, [r7, #44]	; 0x2c
    5232:	e008      	b.n	5246 <usb_init+0x266>
		module_inst->device_callback[i] = NULL;
    5234:	68fb      	ldr	r3, [r7, #12]
    5236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5238:	322e      	adds	r2, #46	; 0x2e
    523a:	0092      	lsls	r2, r2, #2
    523c:	2100      	movs	r1, #0
    523e:	50d1      	str	r1, [r2, r3]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    5240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5242:	3301      	adds	r3, #1
    5244:	62fb      	str	r3, [r7, #44]	; 0x2c
    5246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5248:	2b06      	cmp	r3, #6
    524a:	d9f3      	bls.n	5234 <usb_init+0x254>
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    524c:	2300      	movs	r3, #0
    524e:	62fb      	str	r3, [r7, #44]	; 0x2c
    5250:	e015      	b.n	527e <usb_init+0x29e>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    5252:	2300      	movs	r3, #0
    5254:	62bb      	str	r3, [r7, #40]	; 0x28
    5256:	e00c      	b.n	5272 <usb_init+0x292>
			module_inst->device_endpoint_callback[i][j] = NULL;
    5258:	68fa      	ldr	r2, [r7, #12]
    525a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    525c:	0099      	lsls	r1, r3, #2
    525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5260:	18cb      	adds	r3, r1, r3
    5262:	3334      	adds	r3, #52	; 0x34
    5264:	009b      	lsls	r3, r3, #2
    5266:	18d3      	adds	r3, r2, r3
    5268:	2200      	movs	r2, #0
    526a:	605a      	str	r2, [r3, #4]
	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    526e:	3301      	adds	r3, #1
    5270:	62bb      	str	r3, [r7, #40]	; 0x28
    5272:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5274:	2b03      	cmp	r3, #3
    5276:	d9ef      	bls.n	5258 <usb_init+0x278>

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
		module_inst->device_callback[i] = NULL;
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    5278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    527a:	3301      	adds	r3, #1
    527c:	62fb      	str	r3, [r7, #44]	; 0x2c
    527e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5280:	2b07      	cmp	r3, #7
    5282:	d9e6      	bls.n	5252 <usb_init+0x272>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
    5284:	68fa      	ldr	r2, [r7, #12]
    5286:	23aa      	movs	r3, #170	; 0xaa
    5288:	005b      	lsls	r3, r3, #1
    528a:	2100      	movs	r1, #0
    528c:	52d1      	strh	r1, [r2, r3]
	module_inst->device_enabled_callback_mask = 0;
    528e:	68fa      	ldr	r2, [r7, #12]
    5290:	23ab      	movs	r3, #171	; 0xab
    5292:	005b      	lsls	r3, r3, #1
    5294:	2100      	movs	r1, #0
    5296:	52d1      	strh	r1, [r2, r3]
	for (j = 0; j < USB_EPT_NUM; j++) {
    5298:	2300      	movs	r3, #0
    529a:	62bb      	str	r3, [r7, #40]	; 0x28
    529c:	e012      	b.n	52c4 <usb_init+0x2e4>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
    529e:	68f9      	ldr	r1, [r7, #12]
    52a0:	23ac      	movs	r3, #172	; 0xac
    52a2:	005b      	lsls	r3, r3, #1
    52a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    52a6:	188a      	adds	r2, r1, r2
    52a8:	18d3      	adds	r3, r2, r3
    52aa:	2200      	movs	r2, #0
    52ac:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    52ae:	68f9      	ldr	r1, [r7, #12]
    52b0:	23b0      	movs	r3, #176	; 0xb0
    52b2:	005b      	lsls	r3, r3, #1
    52b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    52b6:	188a      	adds	r2, r1, r2
    52b8:	18d3      	adds	r3, r2, r3
    52ba:	2200      	movs	r2, #0
    52bc:	701a      	strb	r2, [r3, #0]
			module_inst->device_endpoint_callback[i][j] = NULL;
		}
	}
	module_inst->device_registered_callback_mask = 0;
	module_inst->device_enabled_callback_mask = 0;
	for (j = 0; j < USB_EPT_NUM; j++) {
    52be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    52c0:	3301      	adds	r3, #1
    52c2:	62bb      	str	r3, [r7, #40]	; 0x28
    52c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    52c6:	2b07      	cmp	r3, #7
    52c8:	d9e9      	bls.n	529e <usb_init+0x2be>
		module_inst->deivce_endpoint_registered_callback_mask[j] = 0;
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
	}

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);
    52ca:	2007      	movs	r0, #7
    52cc:	4b11      	ldr	r3, [pc, #68]	; (5314 <usb_init+0x334>)
    52ce:	4798      	blx	r3

	return STATUS_OK;
    52d0:	2300      	movs	r3, #0
}
    52d2:	1c18      	adds	r0, r3, #0
    52d4:	46bd      	mov	sp, r7
    52d6:	b00c      	add	sp, #48	; 0x30
    52d8:	bd80      	pop	{r7, pc}
    52da:	46c0      	nop			; (mov r8, r8)
    52dc:	20000748 	.word	0x20000748
    52e0:	20000730 	.word	0x20000730
    52e4:	00003669 	.word	0x00003669
    52e8:	000036c5 	.word	0x000036c5
    52ec:	00006321 	.word	0x00006321
    52f0:	00003655 	.word	0x00003655
    52f4:	0000603d 	.word	0x0000603d
    52f8:	0000607d 	.word	0x0000607d
    52fc:	41005000 	.word	0x41005000
    5300:	00806024 	.word	0x00806024
    5304:	fffff83f 	.word	0xfffff83f
    5308:	ffff8fff 	.word	0xffff8fff
    530c:	20000cf4 	.word	0x20000cf4
    5310:	00006793 	.word	0x00006793
    5314:	000036ed 	.word	0x000036ed

00005318 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    5318:	b580      	push	{r7, lr}
    531a:	b084      	sub	sp, #16
    531c:	af00      	add	r7, sp, #0
    531e:	1c02      	adds	r2, r0, #0
    5320:	1dfb      	adds	r3, r7, #7
    5322:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    5324:	1c3b      	adds	r3, r7, #0
    5326:	330f      	adds	r3, #15
    5328:	1dfa      	adds	r2, r7, #7
    532a:	7812      	ldrb	r2, [r2, #0]
    532c:	0952      	lsrs	r2, r2, #5
    532e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    5330:	1c3b      	adds	r3, r7, #0
    5332:	330f      	adds	r3, #15
    5334:	781b      	ldrb	r3, [r3, #0]
    5336:	2b00      	cmp	r3, #0
    5338:	d10b      	bne.n	5352 <_extint_get_eic_from_channel+0x3a>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    533a:	4b08      	ldr	r3, [pc, #32]	; (535c <_extint_get_eic_from_channel+0x44>)
    533c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    533e:	1c3b      	adds	r3, r7, #0
    5340:	330f      	adds	r3, #15
    5342:	781b      	ldrb	r3, [r3, #0]
    5344:	009b      	lsls	r3, r3, #2
    5346:	2210      	movs	r2, #16
    5348:	19d2      	adds	r2, r2, r7
    534a:	18d3      	adds	r3, r2, r3
    534c:	3b08      	subs	r3, #8
    534e:	681b      	ldr	r3, [r3, #0]
    5350:	e000      	b.n	5354 <_extint_get_eic_from_channel+0x3c>
	} else {
		Assert(false);
		return NULL;
    5352:	2300      	movs	r3, #0
	}
}
    5354:	1c18      	adds	r0, r3, #0
    5356:	46bd      	mov	sp, r7
    5358:	b004      	add	sp, #16
    535a:	bd80      	pop	{r7, pc}
    535c:	40001800 	.word	0x40001800

00005360 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    5360:	b580      	push	{r7, lr}
    5362:	b084      	sub	sp, #16
    5364:	af00      	add	r7, sp, #0
    5366:	1c02      	adds	r2, r0, #0
    5368:	1dfb      	adds	r3, r7, #7
    536a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    536c:	1dfb      	adds	r3, r7, #7
    536e:	781b      	ldrb	r3, [r3, #0]
    5370:	1c18      	adds	r0, r3, #0
    5372:	4b0c      	ldr	r3, [pc, #48]	; (53a4 <extint_chan_is_detected+0x44>)
    5374:	4798      	blx	r3
    5376:	1c03      	adds	r3, r0, #0
    5378:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    537a:	1dfb      	adds	r3, r7, #7
    537c:	781a      	ldrb	r2, [r3, #0]
    537e:	231f      	movs	r3, #31
    5380:	4013      	ands	r3, r2
    5382:	2201      	movs	r2, #1
    5384:	1c11      	adds	r1, r2, #0
    5386:	4099      	lsls	r1, r3
    5388:	1c0b      	adds	r3, r1, #0
    538a:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    538c:	68fb      	ldr	r3, [r7, #12]
    538e:	691b      	ldr	r3, [r3, #16]
    5390:	68ba      	ldr	r2, [r7, #8]
    5392:	4013      	ands	r3, r2
    5394:	1e5a      	subs	r2, r3, #1
    5396:	4193      	sbcs	r3, r2
    5398:	b2db      	uxtb	r3, r3
}
    539a:	1c18      	adds	r0, r3, #0
    539c:	46bd      	mov	sp, r7
    539e:	b004      	add	sp, #16
    53a0:	bd80      	pop	{r7, pc}
    53a2:	46c0      	nop			; (mov r8, r8)
    53a4:	00005319 	.word	0x00005319

000053a8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    53a8:	b580      	push	{r7, lr}
    53aa:	b084      	sub	sp, #16
    53ac:	af00      	add	r7, sp, #0
    53ae:	1c02      	adds	r2, r0, #0
    53b0:	1dfb      	adds	r3, r7, #7
    53b2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    53b4:	1dfb      	adds	r3, r7, #7
    53b6:	781b      	ldrb	r3, [r3, #0]
    53b8:	1c18      	adds	r0, r3, #0
    53ba:	4b09      	ldr	r3, [pc, #36]	; (53e0 <extint_chan_clear_detected+0x38>)
    53bc:	4798      	blx	r3
    53be:	1c03      	adds	r3, r0, #0
    53c0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    53c2:	1dfb      	adds	r3, r7, #7
    53c4:	781a      	ldrb	r2, [r3, #0]
    53c6:	231f      	movs	r3, #31
    53c8:	4013      	ands	r3, r2
    53ca:	2201      	movs	r2, #1
    53cc:	1c11      	adds	r1, r2, #0
    53ce:	4099      	lsls	r1, r3
    53d0:	1c0b      	adds	r3, r1, #0
    53d2:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    53d4:	68fb      	ldr	r3, [r7, #12]
    53d6:	68ba      	ldr	r2, [r7, #8]
    53d8:	611a      	str	r2, [r3, #16]
}
    53da:	46bd      	mov	sp, r7
    53dc:	b004      	add	sp, #16
    53de:	bd80      	pop	{r7, pc}
    53e0:	00005319 	.word	0x00005319

000053e4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    53e4:	b580      	push	{r7, lr}
    53e6:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    53e8:	4b15      	ldr	r3, [pc, #84]	; (5440 <EIC_Handler+0x5c>)
    53ea:	2200      	movs	r2, #0
    53ec:	701a      	strb	r2, [r3, #0]
    53ee:	e021      	b.n	5434 <EIC_Handler+0x50>
		if (extint_chan_is_detected(_current_channel)) {
    53f0:	4b13      	ldr	r3, [pc, #76]	; (5440 <EIC_Handler+0x5c>)
    53f2:	781b      	ldrb	r3, [r3, #0]
    53f4:	1c18      	adds	r0, r3, #0
    53f6:	4b13      	ldr	r3, [pc, #76]	; (5444 <EIC_Handler+0x60>)
    53f8:	4798      	blx	r3
    53fa:	1c03      	adds	r3, r0, #0
    53fc:	2b00      	cmp	r3, #0
    53fe:	d013      	beq.n	5428 <EIC_Handler+0x44>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    5400:	4b0f      	ldr	r3, [pc, #60]	; (5440 <EIC_Handler+0x5c>)
    5402:	781b      	ldrb	r3, [r3, #0]
    5404:	1c18      	adds	r0, r3, #0
    5406:	4b10      	ldr	r3, [pc, #64]	; (5448 <EIC_Handler+0x64>)
    5408:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    540a:	4b0d      	ldr	r3, [pc, #52]	; (5440 <EIC_Handler+0x5c>)
    540c:	781b      	ldrb	r3, [r3, #0]
    540e:	1c1a      	adds	r2, r3, #0
    5410:	4b0e      	ldr	r3, [pc, #56]	; (544c <EIC_Handler+0x68>)
    5412:	0092      	lsls	r2, r2, #2
    5414:	58d3      	ldr	r3, [r2, r3]
    5416:	2b00      	cmp	r3, #0
    5418:	d006      	beq.n	5428 <EIC_Handler+0x44>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    541a:	4b09      	ldr	r3, [pc, #36]	; (5440 <EIC_Handler+0x5c>)
    541c:	781b      	ldrb	r3, [r3, #0]
    541e:	1c1a      	adds	r2, r3, #0
    5420:	4b0a      	ldr	r3, [pc, #40]	; (544c <EIC_Handler+0x68>)
    5422:	0092      	lsls	r2, r2, #2
    5424:	58d3      	ldr	r3, [r2, r3]
    5426:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    5428:	4b05      	ldr	r3, [pc, #20]	; (5440 <EIC_Handler+0x5c>)
    542a:	781b      	ldrb	r3, [r3, #0]
    542c:	3301      	adds	r3, #1
    542e:	b2da      	uxtb	r2, r3
    5430:	4b03      	ldr	r3, [pc, #12]	; (5440 <EIC_Handler+0x5c>)
    5432:	701a      	strb	r2, [r3, #0]
    5434:	4b02      	ldr	r3, [pc, #8]	; (5440 <EIC_Handler+0x5c>)
    5436:	781b      	ldrb	r3, [r3, #0]
    5438:	2b0f      	cmp	r3, #15
    543a:	d9d9      	bls.n	53f0 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    543c:	46bd      	mov	sp, r7
    543e:	bd80      	pop	{r7, pc}
    5440:	20000df4 	.word	0x20000df4
    5444:	00005361 	.word	0x00005361
    5448:	000053a9 	.word	0x000053a9
    544c:	20000934 	.word	0x20000934

00005450 <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*setup_report)(void) )
{
    5450:	b580      	push	{r7, lr}
    5452:	b084      	sub	sp, #16
    5454:	af00      	add	r7, sp, #0
    5456:	60f8      	str	r0, [r7, #12]
    5458:	60b9      	str	r1, [r7, #8]
    545a:	607a      	str	r2, [r7, #4]
    545c:	603b      	str	r3, [r7, #0]
	if (Udd_setup_is_in()) {
    545e:	4b36      	ldr	r3, [pc, #216]	; (5538 <udi_hid_setup+0xe8>)
    5460:	781b      	ldrb	r3, [r3, #0]
    5462:	b2db      	uxtb	r3, r3
    5464:	b25b      	sxtb	r3, r3
    5466:	2b00      	cmp	r3, #0
    5468:	da32      	bge.n	54d0 <udi_hid_setup+0x80>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    546a:	4b33      	ldr	r3, [pc, #204]	; (5538 <udi_hid_setup+0xe8>)
    546c:	781b      	ldrb	r3, [r3, #0]
    546e:	1c1a      	adds	r2, r3, #0
    5470:	2360      	movs	r3, #96	; 0x60
    5472:	4013      	ands	r3, r2
    5474:	d109      	bne.n	548a <udi_hid_setup+0x3a>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    5476:	4b30      	ldr	r3, [pc, #192]	; (5538 <udi_hid_setup+0xe8>)
    5478:	785b      	ldrb	r3, [r3, #1]
    547a:	2b06      	cmp	r3, #6
    547c:	d105      	bne.n	548a <udi_hid_setup+0x3a>

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
    547e:	687b      	ldr	r3, [r7, #4]
    5480:	1c18      	adds	r0, r3, #0
    5482:	4b2e      	ldr	r3, [pc, #184]	; (553c <udi_hid_setup+0xec>)
    5484:	4798      	blx	r3
    5486:	1c03      	adds	r3, r0, #0
    5488:	e052      	b.n	5530 <udi_hid_setup+0xe0>
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    548a:	4b2b      	ldr	r3, [pc, #172]	; (5538 <udi_hid_setup+0xe8>)
    548c:	781b      	ldrb	r3, [r3, #0]
    548e:	1c1a      	adds	r2, r3, #0
    5490:	2360      	movs	r3, #96	; 0x60
    5492:	4013      	ands	r3, r2
    5494:	2b20      	cmp	r3, #32
    5496:	d11b      	bne.n	54d0 <udi_hid_setup+0x80>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    5498:	4b27      	ldr	r3, [pc, #156]	; (5538 <udi_hid_setup+0xe8>)
    549a:	785b      	ldrb	r3, [r3, #1]
    549c:	2b02      	cmp	r3, #2
    549e:	d007      	beq.n	54b0 <udi_hid_setup+0x60>
    54a0:	2b03      	cmp	r3, #3
    54a2:	d00d      	beq.n	54c0 <udi_hid_setup+0x70>
    54a4:	2b01      	cmp	r3, #1
    54a6:	d113      	bne.n	54d0 <udi_hid_setup+0x80>

			case USB_REQ_HID_GET_REPORT:
				return setup_report();
    54a8:	683b      	ldr	r3, [r7, #0]
    54aa:	4798      	blx	r3
    54ac:	1c03      	adds	r3, r0, #0
    54ae:	e03f      	b.n	5530 <udi_hid_setup+0xe0>

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
    54b0:	4b21      	ldr	r3, [pc, #132]	; (5538 <udi_hid_setup+0xe8>)
    54b2:	68fa      	ldr	r2, [r7, #12]
    54b4:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    54b6:	4b20      	ldr	r3, [pc, #128]	; (5538 <udi_hid_setup+0xe8>)
    54b8:	2201      	movs	r2, #1
    54ba:	819a      	strh	r2, [r3, #12]
				return true;
    54bc:	2301      	movs	r3, #1
    54be:	e037      	b.n	5530 <udi_hid_setup+0xe0>

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
    54c0:	4b1d      	ldr	r3, [pc, #116]	; (5538 <udi_hid_setup+0xe8>)
    54c2:	68ba      	ldr	r2, [r7, #8]
    54c4:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size = 1;
    54c6:	4b1c      	ldr	r3, [pc, #112]	; (5538 <udi_hid_setup+0xe8>)
    54c8:	2201      	movs	r2, #1
    54ca:	819a      	strh	r2, [r3, #12]
				return true;
    54cc:	2301      	movs	r3, #1
    54ce:	e02f      	b.n	5530 <udi_hid_setup+0xe0>
			}
		}
	}
	if (Udd_setup_is_out()) {
    54d0:	4b19      	ldr	r3, [pc, #100]	; (5538 <udi_hid_setup+0xe8>)
    54d2:	781b      	ldrb	r3, [r3, #0]
    54d4:	b2db      	uxtb	r3, r3
    54d6:	b25b      	sxtb	r3, r3
    54d8:	2b00      	cmp	r3, #0
    54da:	db28      	blt.n	552e <udi_hid_setup+0xde>
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    54dc:	4b16      	ldr	r3, [pc, #88]	; (5538 <udi_hid_setup+0xe8>)
    54de:	781b      	ldrb	r3, [r3, #0]
    54e0:	1c1a      	adds	r2, r3, #0
    54e2:	2360      	movs	r3, #96	; 0x60
    54e4:	4013      	ands	r3, r2
    54e6:	2b20      	cmp	r3, #32
    54e8:	d121      	bne.n	552e <udi_hid_setup+0xde>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    54ea:	4b13      	ldr	r3, [pc, #76]	; (5538 <udi_hid_setup+0xe8>)
    54ec:	785b      	ldrb	r3, [r3, #1]
    54ee:	2b0a      	cmp	r3, #10
    54f0:	d007      	beq.n	5502 <udi_hid_setup+0xb2>
    54f2:	2b0b      	cmp	r3, #11
    54f4:	d00e      	beq.n	5514 <udi_hid_setup+0xc4>
    54f6:	2b09      	cmp	r3, #9
    54f8:	d119      	bne.n	552e <udi_hid_setup+0xde>

			case USB_REQ_HID_SET_REPORT:
				return setup_report();
    54fa:	683b      	ldr	r3, [r7, #0]
    54fc:	4798      	blx	r3
    54fe:	1c03      	adds	r3, r0, #0
    5500:	e016      	b.n	5530 <udi_hid_setup+0xe0>

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
    5502:	4b0d      	ldr	r3, [pc, #52]	; (5538 <udi_hid_setup+0xe8>)
    5504:	885b      	ldrh	r3, [r3, #2]
    5506:	0a1b      	lsrs	r3, r3, #8
    5508:	b29b      	uxth	r3, r3
    550a:	b2da      	uxtb	r2, r3
    550c:	68fb      	ldr	r3, [r7, #12]
    550e:	701a      	strb	r2, [r3, #0]
				return true;
    5510:	2301      	movs	r3, #1
    5512:	e00d      	b.n	5530 <udi_hid_setup+0xe0>

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
    5514:	4b08      	ldr	r3, [pc, #32]	; (5538 <udi_hid_setup+0xe8>)
    5516:	88db      	ldrh	r3, [r3, #6]
    5518:	2b00      	cmp	r3, #0
    551a:	d001      	beq.n	5520 <udi_hid_setup+0xd0>
					return false;
    551c:	2300      	movs	r3, #0
    551e:	e007      	b.n	5530 <udi_hid_setup+0xe0>
				*protocol = udd_g_ctrlreq.req.wValue;
    5520:	4b05      	ldr	r3, [pc, #20]	; (5538 <udi_hid_setup+0xe8>)
    5522:	885b      	ldrh	r3, [r3, #2]
    5524:	b2da      	uxtb	r2, r3
    5526:	68bb      	ldr	r3, [r7, #8]
    5528:	701a      	strb	r2, [r3, #0]
				return true;
    552a:	2301      	movs	r3, #1
    552c:	e000      	b.n	5530 <udi_hid_setup+0xe0>
			}
		}
	}
	return false;	// Request not supported
    552e:	2300      	movs	r3, #0
}
    5530:	1c18      	adds	r0, r3, #0
    5532:	46bd      	mov	sp, r7
    5534:	b004      	add	sp, #16
    5536:	bd80      	pop	{r7, pc}
    5538:	20000c9c 	.word	0x20000c9c
    553c:	00005541 	.word	0x00005541

00005540 <udi_hid_reqstdifaceget_descriptor>:

//---------------------------------------------
//------- Internal routines

static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc)
{
    5540:	b580      	push	{r7, lr}
    5542:	b084      	sub	sp, #16
    5544:	af00      	add	r7, sp, #0
    5546:	6078      	str	r0, [r7, #4]
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
    5548:	4b22      	ldr	r3, [pc, #136]	; (55d4 <udi_hid_reqstdifaceget_descriptor+0x94>)
    554a:	4798      	blx	r3
    554c:	1c03      	adds	r3, r0, #0
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
    554e:	3309      	adds	r3, #9
    5550:	60fb      	str	r3, [r7, #12]
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
    5552:	68fb      	ldr	r3, [r7, #12]
    5554:	785b      	ldrb	r3, [r3, #1]
    5556:	2b21      	cmp	r3, #33	; 0x21
    5558:	d001      	beq.n	555e <udi_hid_reqstdifaceget_descriptor+0x1e>
		return false;
    555a:	2300      	movs	r3, #0
    555c:	e036      	b.n	55cc <udi_hid_reqstdifaceget_descriptor+0x8c>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    555e:	4b1e      	ldr	r3, [pc, #120]	; (55d8 <udi_hid_reqstdifaceget_descriptor+0x98>)
    5560:	885b      	ldrh	r3, [r3, #2]
    5562:	0a1b      	lsrs	r3, r3, #8
    5564:	b29b      	uxth	r3, r3
    5566:	b2db      	uxtb	r3, r3
    5568:	2b21      	cmp	r3, #33	; 0x21
    556a:	d110      	bne.n	558e <udi_hid_reqstdifaceget_descriptor+0x4e>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
    556c:	4b1a      	ldr	r3, [pc, #104]	; (55d8 <udi_hid_reqstdifaceget_descriptor+0x98>)
    556e:	68fa      	ldr	r2, [r7, #12]
    5570:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    5572:	68fb      	ldr	r3, [r7, #12]
    5574:	781b      	ldrb	r3, [r3, #0]
    5576:	4a18      	ldr	r2, [pc, #96]	; (55d8 <udi_hid_reqstdifaceget_descriptor+0x98>)
    5578:	88d2      	ldrh	r2, [r2, #6]
    557a:	b298      	uxth	r0, r3
    557c:	b291      	uxth	r1, r2
    557e:	4288      	cmp	r0, r1
    5580:	d900      	bls.n	5584 <udi_hid_reqstdifaceget_descriptor+0x44>
    5582:	1c13      	adds	r3, r2, #0
    5584:	b29a      	uxth	r2, r3
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
    5586:	4b14      	ldr	r3, [pc, #80]	; (55d8 <udi_hid_reqstdifaceget_descriptor+0x98>)
    5588:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				ptr_hid_desc->bLength);
		return true;
    558a:	2301      	movs	r3, #1
    558c:	e01e      	b.n	55cc <udi_hid_reqstdifaceget_descriptor+0x8c>
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    558e:	68fb      	ldr	r3, [r7, #12]
    5590:	799a      	ldrb	r2, [r3, #6]
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    5592:	4b11      	ldr	r3, [pc, #68]	; (55d8 <udi_hid_reqstdifaceget_descriptor+0x98>)
    5594:	885b      	ldrh	r3, [r3, #2]
    5596:	0a1b      	lsrs	r3, r3, #8
    5598:	b29b      	uxth	r3, r3
    559a:	b2db      	uxtb	r3, r3
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
    559c:	429a      	cmp	r2, r3
    559e:	d114      	bne.n	55ca <udi_hid_reqstdifaceget_descriptor+0x8a>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
    55a0:	4b0d      	ldr	r3, [pc, #52]	; (55d8 <udi_hid_reqstdifaceget_descriptor+0x98>)
    55a2:	687a      	ldr	r2, [r7, #4]
    55a4:	609a      	str	r2, [r3, #8]
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
    55a6:	68fb      	ldr	r3, [r7, #12]
    55a8:	79da      	ldrb	r2, [r3, #7]
    55aa:	7a1b      	ldrb	r3, [r3, #8]
    55ac:	021b      	lsls	r3, r3, #8
    55ae:	4313      	orrs	r3, r2
    55b0:	b29b      	uxth	r3, r3
    55b2:	4a09      	ldr	r2, [pc, #36]	; (55d8 <udi_hid_reqstdifaceget_descriptor+0x98>)
    55b4:	88d2      	ldrh	r2, [r2, #6]
    55b6:	b298      	uxth	r0, r3
    55b8:	b291      	uxth	r1, r2
    55ba:	4288      	cmp	r0, r1
    55bc:	d900      	bls.n	55c0 <udi_hid_reqstdifaceget_descriptor+0x80>
    55be:	1c13      	adds	r3, r2, #0
    55c0:	b29a      	uxth	r2, r3
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
    55c2:	4b05      	ldr	r3, [pc, #20]	; (55d8 <udi_hid_reqstdifaceget_descriptor+0x98>)
    55c4:	819a      	strh	r2, [r3, #12]
				min(udd_g_ctrlreq.req.wLength,
				le16_to_cpu(ptr_hid_desc->wDescriptorLength));
		return true;
    55c6:	2301      	movs	r3, #1
    55c8:	e000      	b.n	55cc <udi_hid_reqstdifaceget_descriptor+0x8c>
	}
	return false;
    55ca:	2300      	movs	r3, #0
}
    55cc:	1c18      	adds	r0, r3, #0
    55ce:	46bd      	mov	sp, r7
    55d0:	b004      	add	sp, #16
    55d2:	bd80      	pop	{r7, pc}
    55d4:	00000f05 	.word	0x00000f05
    55d8:	20000c9c 	.word	0x20000c9c

000055dc <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    55dc:	b580      	push	{r7, lr}
    55de:	af00      	add	r7, sp, #0
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    55e0:	46bd      	mov	sp, r7
    55e2:	bd80      	pop	{r7, pc}

000055e4 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    55e4:	b580      	push	{r7, lr}
    55e6:	b082      	sub	sp, #8
    55e8:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    55ea:	4b0f      	ldr	r3, [pc, #60]	; (5628 <cpu_irq_enter_critical+0x44>)
    55ec:	681b      	ldr	r3, [r3, #0]
    55ee:	2b00      	cmp	r3, #0
    55f0:	d112      	bne.n	5618 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    55f2:	f3ef 8310 	mrs	r3, PRIMASK
    55f6:	607b      	str	r3, [r7, #4]
  return(result);
    55f8:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    55fa:	2b00      	cmp	r3, #0
    55fc:	d109      	bne.n	5612 <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    55fe:	b672      	cpsid	i
    5600:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    5604:	4b09      	ldr	r3, [pc, #36]	; (562c <cpu_irq_enter_critical+0x48>)
    5606:	2200      	movs	r2, #0
    5608:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    560a:	4b09      	ldr	r3, [pc, #36]	; (5630 <cpu_irq_enter_critical+0x4c>)
    560c:	2201      	movs	r2, #1
    560e:	701a      	strb	r2, [r3, #0]
    5610:	e002      	b.n	5618 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    5612:	4b07      	ldr	r3, [pc, #28]	; (5630 <cpu_irq_enter_critical+0x4c>)
    5614:	2200      	movs	r2, #0
    5616:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    5618:	4b03      	ldr	r3, [pc, #12]	; (5628 <cpu_irq_enter_critical+0x44>)
    561a:	681b      	ldr	r3, [r3, #0]
    561c:	1c5a      	adds	r2, r3, #1
    561e:	4b02      	ldr	r3, [pc, #8]	; (5628 <cpu_irq_enter_critical+0x44>)
    5620:	601a      	str	r2, [r3, #0]
}
    5622:	46bd      	mov	sp, r7
    5624:	b002      	add	sp, #8
    5626:	bd80      	pop	{r7, pc}
    5628:	2000074c 	.word	0x2000074c
    562c:	200003b4 	.word	0x200003b4
    5630:	20000750 	.word	0x20000750

00005634 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    5634:	b580      	push	{r7, lr}
    5636:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    5638:	4b0a      	ldr	r3, [pc, #40]	; (5664 <cpu_irq_leave_critical+0x30>)
    563a:	681b      	ldr	r3, [r3, #0]
    563c:	1e5a      	subs	r2, r3, #1
    563e:	4b09      	ldr	r3, [pc, #36]	; (5664 <cpu_irq_leave_critical+0x30>)
    5640:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    5642:	4b08      	ldr	r3, [pc, #32]	; (5664 <cpu_irq_leave_critical+0x30>)
    5644:	681b      	ldr	r3, [r3, #0]
    5646:	2b00      	cmp	r3, #0
    5648:	d10a      	bne.n	5660 <cpu_irq_leave_critical+0x2c>
    564a:	4b07      	ldr	r3, [pc, #28]	; (5668 <cpu_irq_leave_critical+0x34>)
    564c:	781b      	ldrb	r3, [r3, #0]
    564e:	b2db      	uxtb	r3, r3
    5650:	2b00      	cmp	r3, #0
    5652:	d005      	beq.n	5660 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    5654:	4b05      	ldr	r3, [pc, #20]	; (566c <cpu_irq_leave_critical+0x38>)
    5656:	2201      	movs	r2, #1
    5658:	701a      	strb	r2, [r3, #0]
    565a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    565e:	b662      	cpsie	i
	}
}
    5660:	46bd      	mov	sp, r7
    5662:	bd80      	pop	{r7, pc}
    5664:	2000074c 	.word	0x2000074c
    5668:	20000750 	.word	0x20000750
    566c:	200003b4 	.word	0x200003b4

00005670 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    5670:	b580      	push	{r7, lr}
    5672:	b082      	sub	sp, #8
    5674:	af00      	add	r7, sp, #0
    5676:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    5678:	687b      	ldr	r3, [r7, #4]
    567a:	2201      	movs	r2, #1
    567c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    567e:	687b      	ldr	r3, [r7, #4]
    5680:	2200      	movs	r2, #0
    5682:	705a      	strb	r2, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    5684:	687b      	ldr	r3, [r7, #4]
    5686:	2206      	movs	r2, #6
    5688:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    568a:	687b      	ldr	r3, [r7, #4]
    568c:	2200      	movs	r2, #0
    568e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    5690:	687b      	ldr	r3, [r7, #4]
    5692:	2200      	movs	r2, #0
    5694:	725a      	strb	r2, [r3, #9]
}
    5696:	46bd      	mov	sp, r7
    5698:	b002      	add	sp, #8
    569a:	bd80      	pop	{r7, pc}

0000569c <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    569c:	b580      	push	{r7, lr}
    569e:	b082      	sub	sp, #8
    56a0:	af00      	add	r7, sp, #0
    56a2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    56a4:	687b      	ldr	r3, [r7, #4]
    56a6:	2203      	movs	r2, #3
    56a8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    56aa:	687b      	ldr	r3, [r7, #4]
    56ac:	2200      	movs	r2, #0
    56ae:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    56b0:	687b      	ldr	r3, [r7, #4]
    56b2:	2201      	movs	r2, #1
    56b4:	709a      	strb	r2, [r3, #2]
}
    56b6:	46bd      	mov	sp, r7
    56b8:	b002      	add	sp, #8
    56ba:	bd80      	pop	{r7, pc}

000056bc <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    56bc:	b580      	push	{r7, lr}
    56be:	b082      	sub	sp, #8
    56c0:	af00      	add	r7, sp, #0
    56c2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    56c4:	687b      	ldr	r3, [r7, #4]
    56c6:	2200      	movs	r2, #0
    56c8:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    56ca:	687b      	ldr	r3, [r7, #4]
    56cc:	2200      	movs	r2, #0
    56ce:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    56d0:	687b      	ldr	r3, [r7, #4]
    56d2:	2200      	movs	r2, #0
    56d4:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    56d6:	687b      	ldr	r3, [r7, #4]
    56d8:	2200      	movs	r2, #0
    56da:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    56dc:	687b      	ldr	r3, [r7, #4]
    56de:	2200      	movs	r2, #0
    56e0:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    56e2:	687b      	ldr	r3, [r7, #4]
    56e4:	2201      	movs	r2, #1
    56e6:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    56e8:	687b      	ldr	r3, [r7, #4]
    56ea:	2207      	movs	r2, #7
    56ec:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    56ee:	687b      	ldr	r3, [r7, #4]
    56f0:	223f      	movs	r2, #63	; 0x3f
    56f2:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    56f4:	687b      	ldr	r3, [r7, #4]
    56f6:	2201      	movs	r2, #1
    56f8:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    56fa:	687b      	ldr	r3, [r7, #4]
    56fc:	2201      	movs	r2, #1
    56fe:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    5700:	687b      	ldr	r3, [r7, #4]
    5702:	2206      	movs	r2, #6
    5704:	821a      	strh	r2, [r3, #16]
}
    5706:	46bd      	mov	sp, r7
    5708:	b002      	add	sp, #8
    570a:	bd80      	pop	{r7, pc}

0000570c <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    570c:	b580      	push	{r7, lr}
    570e:	b082      	sub	sp, #8
    5710:	af00      	add	r7, sp, #0
    5712:	1c02      	adds	r2, r0, #0
    5714:	1dfb      	adds	r3, r7, #7
    5716:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    5718:	4b03      	ldr	r3, [pc, #12]	; (5728 <system_cpu_clock_set_divider+0x1c>)
    571a:	1dfa      	adds	r2, r7, #7
    571c:	7812      	ldrb	r2, [r2, #0]
    571e:	721a      	strb	r2, [r3, #8]
}
    5720:	46bd      	mov	sp, r7
    5722:	b002      	add	sp, #8
    5724:	bd80      	pop	{r7, pc}
    5726:	46c0      	nop			; (mov r8, r8)
    5728:	40000400 	.word	0x40000400

0000572c <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    572c:	b580      	push	{r7, lr}
    572e:	b082      	sub	sp, #8
    5730:	af00      	add	r7, sp, #0
    5732:	1c0a      	adds	r2, r1, #0
    5734:	1dfb      	adds	r3, r7, #7
    5736:	1c01      	adds	r1, r0, #0
    5738:	7019      	strb	r1, [r3, #0]
    573a:	1dbb      	adds	r3, r7, #6
    573c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    573e:	1dfb      	adds	r3, r7, #7
    5740:	781b      	ldrb	r3, [r3, #0]
    5742:	2b01      	cmp	r3, #1
    5744:	d008      	beq.n	5758 <system_apb_clock_set_divider+0x2c>
    5746:	2b02      	cmp	r3, #2
    5748:	d00b      	beq.n	5762 <system_apb_clock_set_divider+0x36>
    574a:	2b00      	cmp	r3, #0
    574c:	d10e      	bne.n	576c <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    574e:	4b0b      	ldr	r3, [pc, #44]	; (577c <system_apb_clock_set_divider+0x50>)
    5750:	1dba      	adds	r2, r7, #6
    5752:	7812      	ldrb	r2, [r2, #0]
    5754:	725a      	strb	r2, [r3, #9]
			break;
    5756:	e00b      	b.n	5770 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    5758:	4b08      	ldr	r3, [pc, #32]	; (577c <system_apb_clock_set_divider+0x50>)
    575a:	1dba      	adds	r2, r7, #6
    575c:	7812      	ldrb	r2, [r2, #0]
    575e:	729a      	strb	r2, [r3, #10]
			break;
    5760:	e006      	b.n	5770 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    5762:	4b06      	ldr	r3, [pc, #24]	; (577c <system_apb_clock_set_divider+0x50>)
    5764:	1dba      	adds	r2, r7, #6
    5766:	7812      	ldrb	r2, [r2, #0]
    5768:	72da      	strb	r2, [r3, #11]
			break;
    576a:	e001      	b.n	5770 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    576c:	2317      	movs	r3, #23
    576e:	e000      	b.n	5772 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    5770:	2300      	movs	r3, #0
}
    5772:	1c18      	adds	r0, r3, #0
    5774:	46bd      	mov	sp, r7
    5776:	b002      	add	sp, #8
    5778:	bd80      	pop	{r7, pc}
    577a:	46c0      	nop			; (mov r8, r8)
    577c:	40000400 	.word	0x40000400

00005780 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    5780:	b580      	push	{r7, lr}
    5782:	b082      	sub	sp, #8
    5784:	af00      	add	r7, sp, #0
    5786:	1c02      	adds	r2, r0, #0
    5788:	1dfb      	adds	r3, r7, #7
    578a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    578c:	4b08      	ldr	r3, [pc, #32]	; (57b0 <system_flash_set_waitstates+0x30>)
    578e:	1dfa      	adds	r2, r7, #7
    5790:	7811      	ldrb	r1, [r2, #0]
    5792:	220f      	movs	r2, #15
    5794:	400a      	ands	r2, r1
    5796:	b2d1      	uxtb	r1, r2
    5798:	220f      	movs	r2, #15
    579a:	400a      	ands	r2, r1
    579c:	0052      	lsls	r2, r2, #1
    579e:	6859      	ldr	r1, [r3, #4]
    57a0:	201e      	movs	r0, #30
    57a2:	4381      	bics	r1, r0
    57a4:	430a      	orrs	r2, r1
    57a6:	605a      	str	r2, [r3, #4]
}
    57a8:	46bd      	mov	sp, r7
    57aa:	b002      	add	sp, #8
    57ac:	bd80      	pop	{r7, pc}
    57ae:	46c0      	nop			; (mov r8, r8)
    57b0:	41004000 	.word	0x41004000

000057b4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    57b4:	b580      	push	{r7, lr}
    57b6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    57b8:	46c0      	nop			; (mov r8, r8)
    57ba:	4b03      	ldr	r3, [pc, #12]	; (57c8 <_system_dfll_wait_for_sync+0x14>)
    57bc:	68da      	ldr	r2, [r3, #12]
    57be:	2310      	movs	r3, #16
    57c0:	4013      	ands	r3, r2
    57c2:	d0fa      	beq.n	57ba <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    57c4:	46bd      	mov	sp, r7
    57c6:	bd80      	pop	{r7, pc}
    57c8:	40000800 	.word	0x40000800

000057cc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    57cc:	b580      	push	{r7, lr}
    57ce:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    57d0:	4a0c      	ldr	r2, [pc, #48]	; (5804 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    57d2:	4b0d      	ldr	r3, [pc, #52]	; (5808 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    57d4:	681b      	ldr	r3, [r3, #0]
    57d6:	b29b      	uxth	r3, r3
    57d8:	2180      	movs	r1, #128	; 0x80
    57da:	438b      	bics	r3, r1
    57dc:	b29b      	uxth	r3, r3
    57de:	8493      	strh	r3, [r2, #36]	; 0x24
	_system_dfll_wait_for_sync();
    57e0:	4b0a      	ldr	r3, [pc, #40]	; (580c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    57e2:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    57e4:	4b07      	ldr	r3, [pc, #28]	; (5804 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    57e6:	4a08      	ldr	r2, [pc, #32]	; (5808 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    57e8:	6892      	ldr	r2, [r2, #8]
    57ea:	62da      	str	r2, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    57ec:	4b05      	ldr	r3, [pc, #20]	; (5804 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    57ee:	4a06      	ldr	r2, [pc, #24]	; (5808 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    57f0:	6852      	ldr	r2, [r2, #4]
    57f2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    57f4:	4a03      	ldr	r2, [pc, #12]	; (5804 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    57f6:	4b04      	ldr	r3, [pc, #16]	; (5808 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    57f8:	681b      	ldr	r3, [r3, #0]
    57fa:	b29b      	uxth	r3, r3
    57fc:	8493      	strh	r3, [r2, #36]	; 0x24
}
    57fe:	46bd      	mov	sp, r7
    5800:	bd80      	pop	{r7, pc}
    5802:	46c0      	nop			; (mov r8, r8)
    5804:	40000800 	.word	0x40000800
    5808:	20000754 	.word	0x20000754
    580c:	000057b5 	.word	0x000057b5

00005810 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5810:	b580      	push	{r7, lr}
    5812:	b082      	sub	sp, #8
    5814:	af00      	add	r7, sp, #0
    5816:	1c02      	adds	r2, r0, #0
    5818:	1dfb      	adds	r3, r7, #7
    581a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    581c:	1dfb      	adds	r3, r7, #7
    581e:	781b      	ldrb	r3, [r3, #0]
    5820:	2b08      	cmp	r3, #8
    5822:	d843      	bhi.n	58ac <system_clock_source_get_hz+0x9c>
    5824:	009a      	lsls	r2, r3, #2
    5826:	4b24      	ldr	r3, [pc, #144]	; (58b8 <system_clock_source_get_hz+0xa8>)
    5828:	18d3      	adds	r3, r2, r3
    582a:	681b      	ldr	r3, [r3, #0]
    582c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    582e:	4b23      	ldr	r3, [pc, #140]	; (58bc <system_clock_source_get_hz+0xac>)
    5830:	691b      	ldr	r3, [r3, #16]
    5832:	e03c      	b.n	58ae <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5834:	4b22      	ldr	r3, [pc, #136]	; (58c0 <system_clock_source_get_hz+0xb0>)
    5836:	6a1b      	ldr	r3, [r3, #32]
    5838:	0a1b      	lsrs	r3, r3, #8
    583a:	1c1a      	adds	r2, r3, #0
    583c:	2303      	movs	r3, #3
    583e:	4013      	ands	r3, r2
    5840:	b2db      	uxtb	r3, r3
    5842:	4a20      	ldr	r2, [pc, #128]	; (58c4 <system_clock_source_get_hz+0xb4>)
    5844:	1c11      	adds	r1, r2, #0
    5846:	40d9      	lsrs	r1, r3
    5848:	1c0b      	adds	r3, r1, #0
    584a:	e030      	b.n	58ae <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    584c:	2380      	movs	r3, #128	; 0x80
    584e:	021b      	lsls	r3, r3, #8
    5850:	e02d      	b.n	58ae <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    5852:	2380      	movs	r3, #128	; 0x80
    5854:	021b      	lsls	r3, r3, #8
    5856:	e02a      	b.n	58ae <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    5858:	4b18      	ldr	r3, [pc, #96]	; (58bc <system_clock_source_get_hz+0xac>)
    585a:	695b      	ldr	r3, [r3, #20]
    585c:	e027      	b.n	58ae <system_clock_source_get_hz+0x9e>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    585e:	4b17      	ldr	r3, [pc, #92]	; (58bc <system_clock_source_get_hz+0xac>)
    5860:	681a      	ldr	r2, [r3, #0]
    5862:	2302      	movs	r3, #2
    5864:	4013      	ands	r3, r2
    5866:	d101      	bne.n	586c <system_clock_source_get_hz+0x5c>
			return 0;
    5868:	2300      	movs	r3, #0
    586a:	e020      	b.n	58ae <system_clock_source_get_hz+0x9e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    586c:	4b16      	ldr	r3, [pc, #88]	; (58c8 <system_clock_source_get_hz+0xb8>)
    586e:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    5870:	4b12      	ldr	r3, [pc, #72]	; (58bc <system_clock_source_get_hz+0xac>)
    5872:	681a      	ldr	r2, [r3, #0]
    5874:	2304      	movs	r3, #4
    5876:	4013      	ands	r3, r2
    5878:	d009      	beq.n	588e <system_clock_source_get_hz+0x7e>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    587a:	2000      	movs	r0, #0
    587c:	4b13      	ldr	r3, [pc, #76]	; (58cc <system_clock_source_get_hz+0xbc>)
    587e:	4798      	blx	r3
    5880:	1c02      	adds	r2, r0, #0
					(_system_clock_inst.dfll.mul & 0xffff);
    5882:	4b0e      	ldr	r3, [pc, #56]	; (58bc <system_clock_source_get_hz+0xac>)
    5884:	689b      	ldr	r3, [r3, #8]
    5886:	041b      	lsls	r3, r3, #16
    5888:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    588a:	4353      	muls	r3, r2
    588c:	e00f      	b.n	58ae <system_clock_source_get_hz+0x9e>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    588e:	4b10      	ldr	r3, [pc, #64]	; (58d0 <system_clock_source_get_hz+0xc0>)
    5890:	e00d      	b.n	58ae <system_clock_source_get_hz+0x9e>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5892:	4a0b      	ldr	r2, [pc, #44]	; (58c0 <system_clock_source_get_hz+0xb0>)
    5894:	2350      	movs	r3, #80	; 0x50
    5896:	5cd3      	ldrb	r3, [r2, r3]
    5898:	b2db      	uxtb	r3, r3
    589a:	1c1a      	adds	r2, r3, #0
    589c:	2304      	movs	r3, #4
    589e:	4013      	ands	r3, r2
    58a0:	d101      	bne.n	58a6 <system_clock_source_get_hz+0x96>
			return 0;
    58a2:	2300      	movs	r3, #0
    58a4:	e003      	b.n	58ae <system_clock_source_get_hz+0x9e>
		}

		return _system_clock_inst.dpll.frequency;
    58a6:	4b05      	ldr	r3, [pc, #20]	; (58bc <system_clock_source_get_hz+0xac>)
    58a8:	68db      	ldr	r3, [r3, #12]
    58aa:	e000      	b.n	58ae <system_clock_source_get_hz+0x9e>
#endif

	default:
		return 0;
    58ac:	2300      	movs	r3, #0
	}
}
    58ae:	1c18      	adds	r0, r3, #0
    58b0:	46bd      	mov	sp, r7
    58b2:	b002      	add	sp, #8
    58b4:	bd80      	pop	{r7, pc}
    58b6:	46c0      	nop			; (mov r8, r8)
    58b8:	00006824 	.word	0x00006824
    58bc:	20000754 	.word	0x20000754
    58c0:	40000800 	.word	0x40000800
    58c4:	007a1200 	.word	0x007a1200
    58c8:	000057b5 	.word	0x000057b5
    58cc:	00006159 	.word	0x00006159
    58d0:	02dc6c00 	.word	0x02dc6c00

000058d4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    58d4:	b580      	push	{r7, lr}
    58d6:	b084      	sub	sp, #16
    58d8:	af00      	add	r7, sp, #0
    58da:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    58dc:	4b16      	ldr	r3, [pc, #88]	; (5938 <system_clock_source_osc8m_set_config+0x64>)
    58de:	6a1b      	ldr	r3, [r3, #32]
    58e0:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    58e2:	687b      	ldr	r3, [r7, #4]
    58e4:	781b      	ldrb	r3, [r3, #0]
    58e6:	1c1a      	adds	r2, r3, #0
    58e8:	2303      	movs	r3, #3
    58ea:	4013      	ands	r3, r2
    58ec:	b2d9      	uxtb	r1, r3
    58ee:	1c3b      	adds	r3, r7, #0
    58f0:	330d      	adds	r3, #13
    58f2:	2203      	movs	r2, #3
    58f4:	400a      	ands	r2, r1
    58f6:	7819      	ldrb	r1, [r3, #0]
    58f8:	2003      	movs	r0, #3
    58fa:	4381      	bics	r1, r0
    58fc:	430a      	orrs	r2, r1
    58fe:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5900:	687b      	ldr	r3, [r7, #4]
    5902:	789a      	ldrb	r2, [r3, #2]
    5904:	1c3b      	adds	r3, r7, #0
    5906:	330c      	adds	r3, #12
    5908:	01d2      	lsls	r2, r2, #7
    590a:	7818      	ldrb	r0, [r3, #0]
    590c:	217f      	movs	r1, #127	; 0x7f
    590e:	4001      	ands	r1, r0
    5910:	430a      	orrs	r2, r1
    5912:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5914:	687b      	ldr	r3, [r7, #4]
    5916:	7859      	ldrb	r1, [r3, #1]
    5918:	1c3b      	adds	r3, r7, #0
    591a:	330c      	adds	r3, #12
    591c:	2201      	movs	r2, #1
    591e:	400a      	ands	r2, r1
    5920:	0192      	lsls	r2, r2, #6
    5922:	7819      	ldrb	r1, [r3, #0]
    5924:	2040      	movs	r0, #64	; 0x40
    5926:	4381      	bics	r1, r0
    5928:	430a      	orrs	r2, r1
    592a:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    592c:	4b02      	ldr	r3, [pc, #8]	; (5938 <system_clock_source_osc8m_set_config+0x64>)
    592e:	68fa      	ldr	r2, [r7, #12]
    5930:	621a      	str	r2, [r3, #32]
}
    5932:	46bd      	mov	sp, r7
    5934:	b004      	add	sp, #16
    5936:	bd80      	pop	{r7, pc}
    5938:	40000800 	.word	0x40000800

0000593c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    593c:	b580      	push	{r7, lr}
    593e:	b082      	sub	sp, #8
    5940:	af00      	add	r7, sp, #0
    5942:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5944:	687b      	ldr	r3, [r7, #4]
    5946:	7a1b      	ldrb	r3, [r3, #8]
    5948:	029b      	lsls	r3, r3, #10
    594a:	041b      	lsls	r3, r3, #16
    594c:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    594e:	687b      	ldr	r3, [r7, #4]
    5950:	895b      	ldrh	r3, [r3, #10]
    5952:	059b      	lsls	r3, r3, #22
    5954:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5956:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    5958:	4b22      	ldr	r3, [pc, #136]	; (59e4 <system_clock_source_dfll_set_config+0xa8>)
    595a:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    595c:	687b      	ldr	r3, [r7, #4]
    595e:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    5960:	687b      	ldr	r3, [r7, #4]
    5962:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5964:	4313      	orrs	r3, r2
    5966:	b2db      	uxtb	r3, r3
    5968:	1c1a      	adds	r2, r3, #0
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    596a:	687b      	ldr	r3, [r7, #4]
    596c:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    596e:	431a      	orrs	r2, r3
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    5970:	687b      	ldr	r3, [r7, #4]
    5972:	889b      	ldrh	r3, [r3, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5974:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5976:	687b      	ldr	r3, [r7, #4]
    5978:	785b      	ldrb	r3, [r3, #1]
    597a:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    597c:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    597e:	4b19      	ldr	r3, [pc, #100]	; (59e4 <system_clock_source_dfll_set_config+0xa8>)
    5980:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5982:	687b      	ldr	r3, [r7, #4]
    5984:	781b      	ldrb	r3, [r3, #0]
    5986:	2b04      	cmp	r3, #4
    5988:	d116      	bne.n	59b8 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    598a:	687b      	ldr	r3, [r7, #4]
    598c:	7b1b      	ldrb	r3, [r3, #12]
    598e:	069b      	lsls	r3, r3, #26
    5990:	1c1a      	adds	r2, r3, #0
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5992:	687b      	ldr	r3, [r7, #4]
    5994:	89db      	ldrh	r3, [r3, #14]
    5996:	041b      	lsls	r3, r3, #16
    5998:	1c19      	adds	r1, r3, #0
    599a:	4b13      	ldr	r3, [pc, #76]	; (59e8 <system_clock_source_dfll_set_config+0xac>)
    599c:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    599e:	431a      	orrs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    59a0:	687b      	ldr	r3, [r7, #4]
    59a2:	8a1b      	ldrh	r3, [r3, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    59a4:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    59a6:	4b0f      	ldr	r3, [pc, #60]	; (59e4 <system_clock_source_dfll_set_config+0xa8>)
    59a8:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    59aa:	4b0e      	ldr	r3, [pc, #56]	; (59e4 <system_clock_source_dfll_set_config+0xa8>)
    59ac:	681a      	ldr	r2, [r3, #0]
    59ae:	687b      	ldr	r3, [r7, #4]
    59b0:	781b      	ldrb	r3, [r3, #0]
    59b2:	431a      	orrs	r2, r3
    59b4:	4b0b      	ldr	r3, [pc, #44]	; (59e4 <system_clock_source_dfll_set_config+0xa8>)
    59b6:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    59b8:	687b      	ldr	r3, [r7, #4]
    59ba:	781b      	ldrb	r3, [r3, #0]
    59bc:	2b20      	cmp	r3, #32
    59be:	d10e      	bne.n	59de <system_clock_source_dfll_set_config+0xa2>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    59c0:	687b      	ldr	r3, [r7, #4]
    59c2:	8a1b      	ldrh	r3, [r3, #16]
    59c4:	1c1a      	adds	r2, r3, #0
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    59c6:	4b07      	ldr	r3, [pc, #28]	; (59e4 <system_clock_source_dfll_set_config+0xa8>)
    59c8:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    59ca:	4b06      	ldr	r3, [pc, #24]	; (59e4 <system_clock_source_dfll_set_config+0xa8>)
    59cc:	681a      	ldr	r2, [r3, #0]
    59ce:	687b      	ldr	r3, [r7, #4]
    59d0:	781b      	ldrb	r3, [r3, #0]
    59d2:	4313      	orrs	r3, r2
    59d4:	2280      	movs	r2, #128	; 0x80
    59d6:	00d2      	lsls	r2, r2, #3
    59d8:	431a      	orrs	r2, r3
    59da:	4b02      	ldr	r3, [pc, #8]	; (59e4 <system_clock_source_dfll_set_config+0xa8>)
    59dc:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    59de:	46bd      	mov	sp, r7
    59e0:	b002      	add	sp, #8
    59e2:	bd80      	pop	{r7, pc}
    59e4:	20000754 	.word	0x20000754
    59e8:	03ff0000 	.word	0x03ff0000

000059ec <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    59ec:	b580      	push	{r7, lr}
    59ee:	b082      	sub	sp, #8
    59f0:	af00      	add	r7, sp, #0
    59f2:	1c02      	adds	r2, r0, #0
    59f4:	1dfb      	adds	r3, r7, #7
    59f6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    59f8:	1dfb      	adds	r3, r7, #7
    59fa:	781b      	ldrb	r3, [r3, #0]
    59fc:	2b08      	cmp	r3, #8
    59fe:	d83b      	bhi.n	5a78 <system_clock_source_enable+0x8c>
    5a00:	009a      	lsls	r2, r3, #2
    5a02:	4b21      	ldr	r3, [pc, #132]	; (5a88 <system_clock_source_enable+0x9c>)
    5a04:	18d3      	adds	r3, r2, r3
    5a06:	681b      	ldr	r3, [r3, #0]
    5a08:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5a0a:	4b20      	ldr	r3, [pc, #128]	; (5a8c <system_clock_source_enable+0xa0>)
    5a0c:	4a1f      	ldr	r2, [pc, #124]	; (5a8c <system_clock_source_enable+0xa0>)
    5a0e:	6a12      	ldr	r2, [r2, #32]
    5a10:	2102      	movs	r1, #2
    5a12:	430a      	orrs	r2, r1
    5a14:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    5a16:	2300      	movs	r3, #0
    5a18:	e031      	b.n	5a7e <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5a1a:	4b1c      	ldr	r3, [pc, #112]	; (5a8c <system_clock_source_enable+0xa0>)
    5a1c:	4a1b      	ldr	r2, [pc, #108]	; (5a8c <system_clock_source_enable+0xa0>)
    5a1e:	6992      	ldr	r2, [r2, #24]
    5a20:	2102      	movs	r1, #2
    5a22:	430a      	orrs	r2, r1
    5a24:	619a      	str	r2, [r3, #24]
		break;
    5a26:	e029      	b.n	5a7c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5a28:	4b18      	ldr	r3, [pc, #96]	; (5a8c <system_clock_source_enable+0xa0>)
    5a2a:	4a18      	ldr	r2, [pc, #96]	; (5a8c <system_clock_source_enable+0xa0>)
    5a2c:	8a12      	ldrh	r2, [r2, #16]
    5a2e:	b292      	uxth	r2, r2
    5a30:	2102      	movs	r1, #2
    5a32:	430a      	orrs	r2, r1
    5a34:	b292      	uxth	r2, r2
    5a36:	821a      	strh	r2, [r3, #16]
		break;
    5a38:	e020      	b.n	5a7c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5a3a:	4b14      	ldr	r3, [pc, #80]	; (5a8c <system_clock_source_enable+0xa0>)
    5a3c:	4a13      	ldr	r2, [pc, #76]	; (5a8c <system_clock_source_enable+0xa0>)
    5a3e:	8a92      	ldrh	r2, [r2, #20]
    5a40:	b292      	uxth	r2, r2
    5a42:	2102      	movs	r1, #2
    5a44:	430a      	orrs	r2, r1
    5a46:	b292      	uxth	r2, r2
    5a48:	829a      	strh	r2, [r3, #20]
		break;
    5a4a:	e017      	b.n	5a7c <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5a4c:	4b10      	ldr	r3, [pc, #64]	; (5a90 <system_clock_source_enable+0xa4>)
    5a4e:	681b      	ldr	r3, [r3, #0]
    5a50:	2202      	movs	r2, #2
    5a52:	431a      	orrs	r2, r3
    5a54:	4b0e      	ldr	r3, [pc, #56]	; (5a90 <system_clock_source_enable+0xa4>)
    5a56:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    5a58:	4b0e      	ldr	r3, [pc, #56]	; (5a94 <system_clock_source_enable+0xa8>)
    5a5a:	4798      	blx	r3
		break;
    5a5c:	e00e      	b.n	5a7c <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5a5e:	4a0b      	ldr	r2, [pc, #44]	; (5a8c <system_clock_source_enable+0xa0>)
    5a60:	490a      	ldr	r1, [pc, #40]	; (5a8c <system_clock_source_enable+0xa0>)
    5a62:	2344      	movs	r3, #68	; 0x44
    5a64:	5ccb      	ldrb	r3, [r1, r3]
    5a66:	b2db      	uxtb	r3, r3
    5a68:	2102      	movs	r1, #2
    5a6a:	430b      	orrs	r3, r1
    5a6c:	b2d9      	uxtb	r1, r3
    5a6e:	2344      	movs	r3, #68	; 0x44
    5a70:	54d1      	strb	r1, [r2, r3]
		break;
    5a72:	e003      	b.n	5a7c <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    5a74:	2300      	movs	r3, #0
    5a76:	e002      	b.n	5a7e <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5a78:	2317      	movs	r3, #23
    5a7a:	e000      	b.n	5a7e <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    5a7c:	2300      	movs	r3, #0
}
    5a7e:	1c18      	adds	r0, r3, #0
    5a80:	46bd      	mov	sp, r7
    5a82:	b002      	add	sp, #8
    5a84:	bd80      	pop	{r7, pc}
    5a86:	46c0      	nop			; (mov r8, r8)
    5a88:	00006848 	.word	0x00006848
    5a8c:	40000800 	.word	0x40000800
    5a90:	20000754 	.word	0x20000754
    5a94:	000057cd 	.word	0x000057cd

00005a98 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    5a98:	b580      	push	{r7, lr}
    5a9a:	b084      	sub	sp, #16
    5a9c:	af00      	add	r7, sp, #0
    5a9e:	1c02      	adds	r2, r0, #0
    5aa0:	1dfb      	adds	r3, r7, #7
    5aa2:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    5aa4:	2300      	movs	r3, #0
    5aa6:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    5aa8:	1dfb      	adds	r3, r7, #7
    5aaa:	781b      	ldrb	r3, [r3, #0]
    5aac:	2b08      	cmp	r3, #8
    5aae:	d821      	bhi.n	5af4 <system_clock_source_is_ready+0x5c>
    5ab0:	009a      	lsls	r2, r3, #2
    5ab2:	4b18      	ldr	r3, [pc, #96]	; (5b14 <system_clock_source_is_ready+0x7c>)
    5ab4:	18d3      	adds	r3, r2, r3
    5ab6:	681b      	ldr	r3, [r3, #0]
    5ab8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    5aba:	2308      	movs	r3, #8
    5abc:	60fb      	str	r3, [r7, #12]
		break;
    5abe:	e01b      	b.n	5af8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    5ac0:	2304      	movs	r3, #4
    5ac2:	60fb      	str	r3, [r7, #12]
		break;
    5ac4:	e018      	b.n	5af8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    5ac6:	2301      	movs	r3, #1
    5ac8:	60fb      	str	r3, [r7, #12]
		break;
    5aca:	e015      	b.n	5af8 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    5acc:	2302      	movs	r3, #2
    5ace:	60fb      	str	r3, [r7, #12]
		break;
    5ad0:	e012      	b.n	5af8 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
    5ad2:	2310      	movs	r3, #16
    5ad4:	60fb      	str	r3, [r7, #12]
		}
		break;
    5ad6:	e00f      	b.n	5af8 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    5ad8:	4a0f      	ldr	r2, [pc, #60]	; (5b18 <system_clock_source_is_ready+0x80>)
    5ada:	2350      	movs	r3, #80	; 0x50
    5adc:	5cd3      	ldrb	r3, [r2, r3]
    5ade:	b2db      	uxtb	r3, r3
    5ae0:	1c1a      	adds	r2, r3, #0
    5ae2:	2303      	movs	r3, #3
    5ae4:	4013      	ands	r3, r2
    5ae6:	3b03      	subs	r3, #3
    5ae8:	425a      	negs	r2, r3
    5aea:	4153      	adcs	r3, r2
    5aec:	b2db      	uxtb	r3, r3
    5aee:	e00c      	b.n	5b0a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    5af0:	2301      	movs	r3, #1
    5af2:	e00a      	b.n	5b0a <system_clock_source_is_ready+0x72>

	default:
		return false;
    5af4:	2300      	movs	r3, #0
    5af6:	e008      	b.n	5b0a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5af8:	4b07      	ldr	r3, [pc, #28]	; (5b18 <system_clock_source_is_ready+0x80>)
    5afa:	68db      	ldr	r3, [r3, #12]
    5afc:	68fa      	ldr	r2, [r7, #12]
    5afe:	401a      	ands	r2, r3
    5b00:	68fb      	ldr	r3, [r7, #12]
    5b02:	1ad3      	subs	r3, r2, r3
    5b04:	425a      	negs	r2, r3
    5b06:	4153      	adcs	r3, r2
    5b08:	b2db      	uxtb	r3, r3
}
    5b0a:	1c18      	adds	r0, r3, #0
    5b0c:	46bd      	mov	sp, r7
    5b0e:	b004      	add	sp, #16
    5b10:	bd80      	pop	{r7, pc}
    5b12:	46c0      	nop			; (mov r8, r8)
    5b14:	0000686c 	.word	0x0000686c
    5b18:	40000800 	.word	0x40000800

00005b1c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    5b1c:	b580      	push	{r7, lr}
    5b1e:	b082      	sub	sp, #8
    5b20:	af00      	add	r7, sp, #0
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    5b22:	1c3b      	adds	r3, r7, #0
    5b24:	2201      	movs	r2, #1
    5b26:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5b28:	2300      	movs	r3, #0
    5b2a:	607b      	str	r3, [r7, #4]
    5b2c:	e009      	b.n	5b42 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    5b2e:	687b      	ldr	r3, [r7, #4]
    5b30:	b2da      	uxtb	r2, r3
    5b32:	1c3b      	adds	r3, r7, #0
    5b34:	1c10      	adds	r0, r2, #0
    5b36:	1c19      	adds	r1, r3, #0
    5b38:	4b05      	ldr	r3, [pc, #20]	; (5b50 <_switch_peripheral_gclk+0x34>)
    5b3a:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5b3c:	687b      	ldr	r3, [r7, #4]
    5b3e:	3301      	adds	r3, #1
    5b40:	607b      	str	r3, [r7, #4]
    5b42:	687b      	ldr	r3, [r7, #4]
    5b44:	2b24      	cmp	r3, #36	; 0x24
    5b46:	d9f2      	bls.n	5b2e <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    5b48:	46bd      	mov	sp, r7
    5b4a:	b002      	add	sp, #8
    5b4c:	bd80      	pop	{r7, pc}
    5b4e:	46c0      	nop			; (mov r8, r8)
    5b50:	0000603d 	.word	0x0000603d

00005b54 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5b54:	b580      	push	{r7, lr}
    5b56:	b0a6      	sub	sp, #152	; 0x98
    5b58:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5b5a:	4b5c      	ldr	r3, [pc, #368]	; (5ccc <system_clock_init+0x178>)
    5b5c:	22c2      	movs	r2, #194	; 0xc2
    5b5e:	00d2      	lsls	r2, r2, #3
    5b60:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    5b62:	2002      	movs	r0, #2
    5b64:	4b5a      	ldr	r3, [pc, #360]	; (5cd0 <system_clock_init+0x17c>)
    5b66:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    5b68:	4b5a      	ldr	r3, [pc, #360]	; (5cd4 <system_clock_init+0x180>)
    5b6a:	4798      	blx	r3


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    5b6c:	1c3b      	adds	r3, r7, #0
    5b6e:	3380      	adds	r3, #128	; 0x80
    5b70:	1c18      	adds	r0, r3, #0
    5b72:	4b59      	ldr	r3, [pc, #356]	; (5cd8 <system_clock_init+0x184>)
    5b74:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5b76:	1c3b      	adds	r3, r7, #0
    5b78:	3380      	adds	r3, #128	; 0x80
    5b7a:	2220      	movs	r2, #32
    5b7c:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    5b7e:	1c3b      	adds	r3, r7, #0
    5b80:	3380      	adds	r3, #128	; 0x80
    5b82:	2200      	movs	r2, #0
    5b84:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    5b86:	4b55      	ldr	r3, [pc, #340]	; (5cdc <system_clock_init+0x188>)
    5b88:	681b      	ldr	r3, [r3, #0]
    5b8a:	0e9b      	lsrs	r3, r3, #26
    5b8c:	2294      	movs	r2, #148	; 0x94
    5b8e:	19d2      	adds	r2, r2, r7
    5b90:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    5b92:	2294      	movs	r2, #148	; 0x94
    5b94:	19d2      	adds	r2, r2, r7
    5b96:	6813      	ldr	r3, [r2, #0]
    5b98:	2b3f      	cmp	r3, #63	; 0x3f
    5b9a:	d103      	bne.n	5ba4 <system_clock_init+0x50>
		coarse = 0x1f;
    5b9c:	231f      	movs	r3, #31
    5b9e:	2294      	movs	r2, #148	; 0x94
    5ba0:	19d2      	adds	r2, r2, r7
    5ba2:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    5ba4:	2294      	movs	r2, #148	; 0x94
    5ba6:	19d2      	adds	r2, r2, r7
    5ba8:	6813      	ldr	r3, [r2, #0]
    5baa:	b2da      	uxtb	r2, r3
    5bac:	1c3b      	adds	r3, r7, #0
    5bae:	3380      	adds	r3, #128	; 0x80
    5bb0:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5bb2:	1c3b      	adds	r3, r7, #0
    5bb4:	3380      	adds	r3, #128	; 0x80
    5bb6:	2200      	movs	r2, #0
    5bb8:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5bba:	1c3b      	adds	r3, r7, #0
    5bbc:	3380      	adds	r3, #128	; 0x80
    5bbe:	2200      	movs	r2, #0
    5bc0:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5bc2:	1c3b      	adds	r3, r7, #0
    5bc4:	3380      	adds	r3, #128	; 0x80
    5bc6:	2200      	movs	r2, #0
    5bc8:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5bca:	1c3b      	adds	r3, r7, #0
    5bcc:	3380      	adds	r3, #128	; 0x80
    5bce:	2200      	movs	r2, #0
    5bd0:	809a      	strh	r2, [r3, #4]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    5bd2:	1c3b      	adds	r3, r7, #0
    5bd4:	3380      	adds	r3, #128	; 0x80
    5bd6:	2207      	movs	r2, #7
    5bd8:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    5bda:	1c3b      	adds	r3, r7, #0
    5bdc:	3380      	adds	r3, #128	; 0x80
    5bde:	223f      	movs	r2, #63	; 0x3f
    5be0:	81da      	strh	r2, [r3, #14]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
		dfll_conf.fine_value   = 0x1ff;
    5be2:	1c3b      	adds	r3, r7, #0
    5be4:	3380      	adds	r3, #128	; 0x80
    5be6:	4a3e      	ldr	r2, [pc, #248]	; (5ce0 <system_clock_init+0x18c>)
    5be8:	815a      	strh	r2, [r3, #10]
		dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5bea:	1c3b      	adds	r3, r7, #0
    5bec:	3380      	adds	r3, #128	; 0x80
    5bee:	2200      	movs	r2, #0
    5bf0:	805a      	strh	r2, [r3, #2]
		dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
    5bf2:	1c3b      	adds	r3, r7, #0
    5bf4:	3380      	adds	r3, #128	; 0x80
    5bf6:	2208      	movs	r2, #8
    5bf8:	71da      	strb	r2, [r3, #7]
		dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5bfa:	1c3b      	adds	r3, r7, #0
    5bfc:	3380      	adds	r3, #128	; 0x80
    5bfe:	2200      	movs	r2, #0
    5c00:	719a      	strb	r2, [r3, #6]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
    5c02:	1c3b      	adds	r3, r7, #0
    5c04:	3380      	adds	r3, #128	; 0x80
    5c06:	2280      	movs	r2, #128	; 0x80
    5c08:	0052      	lsls	r2, r2, #1
    5c0a:	809a      	strh	r2, [r3, #4]

		dfll_conf.multiply_factor = 48000;
    5c0c:	1c3b      	adds	r3, r7, #0
    5c0e:	3380      	adds	r3, #128	; 0x80
    5c10:	4a34      	ldr	r2, [pc, #208]	; (5ce4 <system_clock_init+0x190>)
    5c12:	821a      	strh	r2, [r3, #16]
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    5c14:	1c3b      	adds	r3, r7, #0
    5c16:	3380      	adds	r3, #128	; 0x80
    5c18:	1c18      	adds	r0, r3, #0
    5c1a:	4b33      	ldr	r3, [pc, #204]	; (5ce8 <system_clock_init+0x194>)
    5c1c:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    5c1e:	1c3b      	adds	r3, r7, #0
    5c20:	337c      	adds	r3, #124	; 0x7c
    5c22:	1c18      	adds	r0, r3, #0
    5c24:	4b31      	ldr	r3, [pc, #196]	; (5cec <system_clock_init+0x198>)
    5c26:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    5c28:	1c3b      	adds	r3, r7, #0
    5c2a:	337c      	adds	r3, #124	; 0x7c
    5c2c:	2200      	movs	r2, #0
    5c2e:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    5c30:	1c3b      	adds	r3, r7, #0
    5c32:	337c      	adds	r3, #124	; 0x7c
    5c34:	2201      	movs	r2, #1
    5c36:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    5c38:	1c3b      	adds	r3, r7, #0
    5c3a:	337c      	adds	r3, #124	; 0x7c
    5c3c:	2200      	movs	r2, #0
    5c3e:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    5c40:	1c3b      	adds	r3, r7, #0
    5c42:	337c      	adds	r3, #124	; 0x7c
    5c44:	1c18      	adds	r0, r3, #0
    5c46:	4b2a      	ldr	r3, [pc, #168]	; (5cf0 <system_clock_init+0x19c>)
    5c48:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5c4a:	2006      	movs	r0, #6
    5c4c:	4b29      	ldr	r3, [pc, #164]	; (5cf4 <system_clock_init+0x1a0>)
    5c4e:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5c50:	4b29      	ldr	r3, [pc, #164]	; (5cf8 <system_clock_init+0x1a4>)
    5c52:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    5c54:	2007      	movs	r0, #7
    5c56:	4b27      	ldr	r3, [pc, #156]	; (5cf4 <system_clock_init+0x1a0>)
    5c58:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    5c5a:	46c0      	nop			; (mov r8, r8)
    5c5c:	2007      	movs	r0, #7
    5c5e:	4b27      	ldr	r3, [pc, #156]	; (5cfc <system_clock_init+0x1a8>)
    5c60:	4798      	blx	r3
    5c62:	1c03      	adds	r3, r0, #0
    5c64:	2201      	movs	r2, #1
    5c66:	4053      	eors	r3, r2
    5c68:	b2db      	uxtb	r3, r3
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	d1f6      	bne.n	5c5c <system_clock_init+0x108>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    5c6e:	4b17      	ldr	r3, [pc, #92]	; (5ccc <system_clock_init+0x178>)
    5c70:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
    5c72:	2180      	movs	r1, #128	; 0x80
    5c74:	430a      	orrs	r2, r1
    5c76:	849a      	strh	r2, [r3, #36]	; 0x24

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    5c78:	2000      	movs	r0, #0
    5c7a:	4b21      	ldr	r3, [pc, #132]	; (5d00 <system_clock_init+0x1ac>)
    5c7c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    5c7e:	2000      	movs	r0, #0
    5c80:	2100      	movs	r1, #0
    5c82:	4b20      	ldr	r3, [pc, #128]	; (5d04 <system_clock_init+0x1b0>)
    5c84:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    5c86:	2001      	movs	r0, #1
    5c88:	2100      	movs	r1, #0
    5c8a:	4b1e      	ldr	r3, [pc, #120]	; (5d04 <system_clock_init+0x1b0>)
    5c8c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    5c8e:	2002      	movs	r0, #2
    5c90:	2100      	movs	r1, #0
    5c92:	4b1c      	ldr	r3, [pc, #112]	; (5d04 <system_clock_init+0x1b0>)
    5c94:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    5c96:	1c3b      	adds	r3, r7, #0
    5c98:	1c18      	adds	r0, r3, #0
    5c9a:	4b1b      	ldr	r3, [pc, #108]	; (5d08 <system_clock_init+0x1b4>)
    5c9c:	4798      	blx	r3
    5c9e:	1c3b      	adds	r3, r7, #0
    5ca0:	2207      	movs	r2, #7
    5ca2:	701a      	strb	r2, [r3, #0]
    5ca4:	1c3b      	adds	r3, r7, #0
    5ca6:	2201      	movs	r2, #1
    5ca8:	605a      	str	r2, [r3, #4]
    5caa:	1c3b      	adds	r3, r7, #0
    5cac:	2200      	movs	r2, #0
    5cae:	721a      	strb	r2, [r3, #8]
    5cb0:	1c3b      	adds	r3, r7, #0
    5cb2:	2200      	movs	r2, #0
    5cb4:	725a      	strb	r2, [r3, #9]
    5cb6:	1c3b      	adds	r3, r7, #0
    5cb8:	2000      	movs	r0, #0
    5cba:	1c19      	adds	r1, r3, #0
    5cbc:	4b13      	ldr	r3, [pc, #76]	; (5d0c <system_clock_init+0x1b8>)
    5cbe:	4798      	blx	r3
    5cc0:	2000      	movs	r0, #0
    5cc2:	4b13      	ldr	r3, [pc, #76]	; (5d10 <system_clock_init+0x1bc>)
    5cc4:	4798      	blx	r3
#endif
}
    5cc6:	46bd      	mov	sp, r7
    5cc8:	b026      	add	sp, #152	; 0x98
    5cca:	bd80      	pop	{r7, pc}
    5ccc:	40000800 	.word	0x40000800
    5cd0:	00005781 	.word	0x00005781
    5cd4:	00005b1d 	.word	0x00005b1d
    5cd8:	000056bd 	.word	0x000056bd
    5cdc:	00806024 	.word	0x00806024
    5ce0:	000001ff 	.word	0x000001ff
    5ce4:	ffffbb80 	.word	0xffffbb80
    5ce8:	0000593d 	.word	0x0000593d
    5cec:	0000569d 	.word	0x0000569d
    5cf0:	000058d5 	.word	0x000058d5
    5cf4:	000059ed 	.word	0x000059ed
    5cf8:	00005db5 	.word	0x00005db5
    5cfc:	00005a99 	.word	0x00005a99
    5d00:	0000570d 	.word	0x0000570d
    5d04:	0000572d 	.word	0x0000572d
    5d08:	00005671 	.word	0x00005671
    5d0c:	00005de5 	.word	0x00005de5
    5d10:	00005ef5 	.word	0x00005ef5

00005d14 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    5d14:	b580      	push	{r7, lr}
    5d16:	b082      	sub	sp, #8
    5d18:	af00      	add	r7, sp, #0
    5d1a:	1c02      	adds	r2, r0, #0
    5d1c:	6039      	str	r1, [r7, #0]
    5d1e:	1dfb      	adds	r3, r7, #7
    5d20:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5d22:	1dfb      	adds	r3, r7, #7
    5d24:	781b      	ldrb	r3, [r3, #0]
    5d26:	2b01      	cmp	r3, #1
    5d28:	d00a      	beq.n	5d40 <system_apb_clock_set_mask+0x2c>
    5d2a:	2b02      	cmp	r3, #2
    5d2c:	d00f      	beq.n	5d4e <system_apb_clock_set_mask+0x3a>
    5d2e:	2b00      	cmp	r3, #0
    5d30:	d114      	bne.n	5d5c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    5d32:	4b0e      	ldr	r3, [pc, #56]	; (5d6c <system_apb_clock_set_mask+0x58>)
    5d34:	4a0d      	ldr	r2, [pc, #52]	; (5d6c <system_apb_clock_set_mask+0x58>)
    5d36:	6991      	ldr	r1, [r2, #24]
    5d38:	683a      	ldr	r2, [r7, #0]
    5d3a:	430a      	orrs	r2, r1
    5d3c:	619a      	str	r2, [r3, #24]
			break;
    5d3e:	e00f      	b.n	5d60 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    5d40:	4b0a      	ldr	r3, [pc, #40]	; (5d6c <system_apb_clock_set_mask+0x58>)
    5d42:	4a0a      	ldr	r2, [pc, #40]	; (5d6c <system_apb_clock_set_mask+0x58>)
    5d44:	69d1      	ldr	r1, [r2, #28]
    5d46:	683a      	ldr	r2, [r7, #0]
    5d48:	430a      	orrs	r2, r1
    5d4a:	61da      	str	r2, [r3, #28]
			break;
    5d4c:	e008      	b.n	5d60 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    5d4e:	4b07      	ldr	r3, [pc, #28]	; (5d6c <system_apb_clock_set_mask+0x58>)
    5d50:	4a06      	ldr	r2, [pc, #24]	; (5d6c <system_apb_clock_set_mask+0x58>)
    5d52:	6a11      	ldr	r1, [r2, #32]
    5d54:	683a      	ldr	r2, [r7, #0]
    5d56:	430a      	orrs	r2, r1
    5d58:	621a      	str	r2, [r3, #32]
			break;
    5d5a:	e001      	b.n	5d60 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5d5c:	2317      	movs	r3, #23
    5d5e:	e000      	b.n	5d62 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5d60:	2300      	movs	r3, #0
}
    5d62:	1c18      	adds	r0, r3, #0
    5d64:	46bd      	mov	sp, r7
    5d66:	b002      	add	sp, #8
    5d68:	bd80      	pop	{r7, pc}
    5d6a:	46c0      	nop			; (mov r8, r8)
    5d6c:	40000400 	.word	0x40000400

00005d70 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    5d70:	b580      	push	{r7, lr}
    5d72:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    5d74:	4b01      	ldr	r3, [pc, #4]	; (5d7c <system_interrupt_enter_critical_section+0xc>)
    5d76:	4798      	blx	r3
}
    5d78:	46bd      	mov	sp, r7
    5d7a:	bd80      	pop	{r7, pc}
    5d7c:	000055e5 	.word	0x000055e5

00005d80 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    5d80:	b580      	push	{r7, lr}
    5d82:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    5d84:	4b01      	ldr	r3, [pc, #4]	; (5d8c <system_interrupt_leave_critical_section+0xc>)
    5d86:	4798      	blx	r3
}
    5d88:	46bd      	mov	sp, r7
    5d8a:	bd80      	pop	{r7, pc}
    5d8c:	00005635 	.word	0x00005635

00005d90 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    5d90:	b580      	push	{r7, lr}
    5d92:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5d94:	4b06      	ldr	r3, [pc, #24]	; (5db0 <system_gclk_is_syncing+0x20>)
    5d96:	785b      	ldrb	r3, [r3, #1]
    5d98:	b2db      	uxtb	r3, r3
    5d9a:	b2db      	uxtb	r3, r3
    5d9c:	b25b      	sxtb	r3, r3
    5d9e:	2b00      	cmp	r3, #0
    5da0:	da01      	bge.n	5da6 <system_gclk_is_syncing+0x16>
		return true;
    5da2:	2301      	movs	r3, #1
    5da4:	e000      	b.n	5da8 <system_gclk_is_syncing+0x18>
	}

	return false;
    5da6:	2300      	movs	r3, #0
}
    5da8:	1c18      	adds	r0, r3, #0
    5daa:	46bd      	mov	sp, r7
    5dac:	bd80      	pop	{r7, pc}
    5dae:	46c0      	nop			; (mov r8, r8)
    5db0:	40000c00 	.word	0x40000c00

00005db4 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    5db4:	b580      	push	{r7, lr}
    5db6:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    5db8:	2000      	movs	r0, #0
    5dba:	2108      	movs	r1, #8
    5dbc:	4b07      	ldr	r3, [pc, #28]	; (5ddc <system_gclk_init+0x28>)
    5dbe:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    5dc0:	4b07      	ldr	r3, [pc, #28]	; (5de0 <system_gclk_init+0x2c>)
    5dc2:	2201      	movs	r2, #1
    5dc4:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    5dc6:	46c0      	nop			; (mov r8, r8)
    5dc8:	4b05      	ldr	r3, [pc, #20]	; (5de0 <system_gclk_init+0x2c>)
    5dca:	781b      	ldrb	r3, [r3, #0]
    5dcc:	b2db      	uxtb	r3, r3
    5dce:	1c1a      	adds	r2, r3, #0
    5dd0:	2301      	movs	r3, #1
    5dd2:	4013      	ands	r3, r2
    5dd4:	d1f8      	bne.n	5dc8 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    5dd6:	46bd      	mov	sp, r7
    5dd8:	bd80      	pop	{r7, pc}
    5dda:	46c0      	nop			; (mov r8, r8)
    5ddc:	00005d15 	.word	0x00005d15
    5de0:	40000c00 	.word	0x40000c00

00005de4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    5de4:	b580      	push	{r7, lr}
    5de6:	b086      	sub	sp, #24
    5de8:	af00      	add	r7, sp, #0
    5dea:	1c02      	adds	r2, r0, #0
    5dec:	6039      	str	r1, [r7, #0]
    5dee:	1dfb      	adds	r3, r7, #7
    5df0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    5df2:	1dfb      	adds	r3, r7, #7
    5df4:	781b      	ldrb	r3, [r3, #0]
    5df6:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    5df8:	1dfb      	adds	r3, r7, #7
    5dfa:	781b      	ldrb	r3, [r3, #0]
    5dfc:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    5dfe:	683b      	ldr	r3, [r7, #0]
    5e00:	781b      	ldrb	r3, [r3, #0]
    5e02:	021b      	lsls	r3, r3, #8
    5e04:	697a      	ldr	r2, [r7, #20]
    5e06:	4313      	orrs	r3, r2
    5e08:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    5e0a:	683b      	ldr	r3, [r7, #0]
    5e0c:	785b      	ldrb	r3, [r3, #1]
    5e0e:	2b00      	cmp	r3, #0
    5e10:	d004      	beq.n	5e1c <system_gclk_gen_set_config+0x38>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5e12:	697b      	ldr	r3, [r7, #20]
    5e14:	2280      	movs	r2, #128	; 0x80
    5e16:	02d2      	lsls	r2, r2, #11
    5e18:	4313      	orrs	r3, r2
    5e1a:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5e1c:	683b      	ldr	r3, [r7, #0]
    5e1e:	7a5b      	ldrb	r3, [r3, #9]
    5e20:	2b00      	cmp	r3, #0
    5e22:	d004      	beq.n	5e2e <system_gclk_gen_set_config+0x4a>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    5e24:	697b      	ldr	r3, [r7, #20]
    5e26:	2280      	movs	r2, #128	; 0x80
    5e28:	0312      	lsls	r2, r2, #12
    5e2a:	4313      	orrs	r3, r2
    5e2c:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5e2e:	683b      	ldr	r3, [r7, #0]
    5e30:	685b      	ldr	r3, [r3, #4]
    5e32:	2b01      	cmp	r3, #1
    5e34:	d92c      	bls.n	5e90 <system_gclk_gen_set_config+0xac>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5e36:	683b      	ldr	r3, [r7, #0]
    5e38:	685a      	ldr	r2, [r3, #4]
    5e3a:	683b      	ldr	r3, [r7, #0]
    5e3c:	685b      	ldr	r3, [r3, #4]
    5e3e:	3b01      	subs	r3, #1
    5e40:	4013      	ands	r3, r2
    5e42:	d11a      	bne.n	5e7a <system_gclk_gen_set_config+0x96>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    5e44:	2300      	movs	r3, #0
    5e46:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5e48:	2302      	movs	r3, #2
    5e4a:	60bb      	str	r3, [r7, #8]
    5e4c:	e005      	b.n	5e5a <system_gclk_gen_set_config+0x76>
						mask <<= 1) {
				div2_count++;
    5e4e:	68fb      	ldr	r3, [r7, #12]
    5e50:	3301      	adds	r3, #1
    5e52:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    5e54:	68bb      	ldr	r3, [r7, #8]
    5e56:	005b      	lsls	r3, r3, #1
    5e58:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    5e5a:	683b      	ldr	r3, [r7, #0]
    5e5c:	685a      	ldr	r2, [r3, #4]
    5e5e:	68bb      	ldr	r3, [r7, #8]
    5e60:	429a      	cmp	r2, r3
    5e62:	d8f4      	bhi.n	5e4e <system_gclk_gen_set_config+0x6a>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    5e64:	68fb      	ldr	r3, [r7, #12]
    5e66:	021b      	lsls	r3, r3, #8
    5e68:	693a      	ldr	r2, [r7, #16]
    5e6a:	4313      	orrs	r3, r2
    5e6c:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5e6e:	697b      	ldr	r3, [r7, #20]
    5e70:	2280      	movs	r2, #128	; 0x80
    5e72:	0352      	lsls	r2, r2, #13
    5e74:	4313      	orrs	r3, r2
    5e76:	617b      	str	r3, [r7, #20]
    5e78:	e00a      	b.n	5e90 <system_gclk_gen_set_config+0xac>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5e7a:	683b      	ldr	r3, [r7, #0]
    5e7c:	685b      	ldr	r3, [r3, #4]
    5e7e:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    5e80:	693a      	ldr	r2, [r7, #16]
    5e82:	4313      	orrs	r3, r2
    5e84:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5e86:	697b      	ldr	r3, [r7, #20]
    5e88:	2280      	movs	r2, #128	; 0x80
    5e8a:	0292      	lsls	r2, r2, #10
    5e8c:	4313      	orrs	r3, r2
    5e8e:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    5e90:	683b      	ldr	r3, [r7, #0]
    5e92:	7a1b      	ldrb	r3, [r3, #8]
    5e94:	2b00      	cmp	r3, #0
    5e96:	d005      	beq.n	5ea4 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5e98:	697b      	ldr	r3, [r7, #20]
    5e9a:	2280      	movs	r2, #128	; 0x80
    5e9c:	0392      	lsls	r2, r2, #14
    5e9e:	4313      	orrs	r3, r2
    5ea0:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    5ea2:	e7ff      	b.n	5ea4 <system_gclk_gen_set_config+0xc0>
    5ea4:	46c0      	nop			; (mov r8, r8)
    5ea6:	4b0f      	ldr	r3, [pc, #60]	; (5ee4 <system_gclk_gen_set_config+0x100>)
    5ea8:	4798      	blx	r3
    5eaa:	1c03      	adds	r3, r0, #0
    5eac:	2b00      	cmp	r3, #0
    5eae:	d1fa      	bne.n	5ea6 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5eb0:	4b0d      	ldr	r3, [pc, #52]	; (5ee8 <system_gclk_gen_set_config+0x104>)
    5eb2:	4798      	blx	r3

	GCLK->GENDIV.reg  = new_gendiv_config;
    5eb4:	4b0d      	ldr	r3, [pc, #52]	; (5eec <system_gclk_gen_set_config+0x108>)
    5eb6:	693a      	ldr	r2, [r7, #16]
    5eb8:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    5eba:	46c0      	nop			; (mov r8, r8)
    5ebc:	4b09      	ldr	r3, [pc, #36]	; (5ee4 <system_gclk_gen_set_config+0x100>)
    5ebe:	4798      	blx	r3
    5ec0:	1c03      	adds	r3, r0, #0
    5ec2:	2b00      	cmp	r3, #0
    5ec4:	d1fa      	bne.n	5ebc <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5ec6:	4b09      	ldr	r3, [pc, #36]	; (5eec <system_gclk_gen_set_config+0x108>)
    5ec8:	4a08      	ldr	r2, [pc, #32]	; (5eec <system_gclk_gen_set_config+0x108>)
    5eca:	6851      	ldr	r1, [r2, #4]
    5ecc:	2280      	movs	r2, #128	; 0x80
    5ece:	0252      	lsls	r2, r2, #9
    5ed0:	4011      	ands	r1, r2
    5ed2:	697a      	ldr	r2, [r7, #20]
    5ed4:	430a      	orrs	r2, r1
    5ed6:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    5ed8:	4b05      	ldr	r3, [pc, #20]	; (5ef0 <system_gclk_gen_set_config+0x10c>)
    5eda:	4798      	blx	r3
}
    5edc:	46bd      	mov	sp, r7
    5ede:	b006      	add	sp, #24
    5ee0:	bd80      	pop	{r7, pc}
    5ee2:	46c0      	nop			; (mov r8, r8)
    5ee4:	00005d91 	.word	0x00005d91
    5ee8:	00005d71 	.word	0x00005d71
    5eec:	40000c00 	.word	0x40000c00
    5ef0:	00005d81 	.word	0x00005d81

00005ef4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5ef4:	b580      	push	{r7, lr}
    5ef6:	b082      	sub	sp, #8
    5ef8:	af00      	add	r7, sp, #0
    5efa:	1c02      	adds	r2, r0, #0
    5efc:	1dfb      	adds	r3, r7, #7
    5efe:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    5f00:	46c0      	nop			; (mov r8, r8)
    5f02:	4b0e      	ldr	r3, [pc, #56]	; (5f3c <system_gclk_gen_enable+0x48>)
    5f04:	4798      	blx	r3
    5f06:	1c03      	adds	r3, r0, #0
    5f08:	2b00      	cmp	r3, #0
    5f0a:	d1fa      	bne.n	5f02 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5f0c:	4b0c      	ldr	r3, [pc, #48]	; (5f40 <system_gclk_gen_enable+0x4c>)
    5f0e:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5f10:	4b0c      	ldr	r3, [pc, #48]	; (5f44 <system_gclk_gen_enable+0x50>)
    5f12:	1dfa      	adds	r2, r7, #7
    5f14:	7812      	ldrb	r2, [r2, #0]
    5f16:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    5f18:	46c0      	nop			; (mov r8, r8)
    5f1a:	4b08      	ldr	r3, [pc, #32]	; (5f3c <system_gclk_gen_enable+0x48>)
    5f1c:	4798      	blx	r3
    5f1e:	1c03      	adds	r3, r0, #0
    5f20:	2b00      	cmp	r3, #0
    5f22:	d1fa      	bne.n	5f1a <system_gclk_gen_enable+0x26>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    5f24:	4b08      	ldr	r3, [pc, #32]	; (5f48 <system_gclk_gen_enable+0x54>)
    5f26:	4a08      	ldr	r2, [pc, #32]	; (5f48 <system_gclk_gen_enable+0x54>)
    5f28:	6852      	ldr	r2, [r2, #4]
    5f2a:	2180      	movs	r1, #128	; 0x80
    5f2c:	0249      	lsls	r1, r1, #9
    5f2e:	430a      	orrs	r2, r1
    5f30:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    5f32:	4b06      	ldr	r3, [pc, #24]	; (5f4c <system_gclk_gen_enable+0x58>)
    5f34:	4798      	blx	r3
}
    5f36:	46bd      	mov	sp, r7
    5f38:	b002      	add	sp, #8
    5f3a:	bd80      	pop	{r7, pc}
    5f3c:	00005d91 	.word	0x00005d91
    5f40:	00005d71 	.word	0x00005d71
    5f44:	40000c04 	.word	0x40000c04
    5f48:	40000c00 	.word	0x40000c00
    5f4c:	00005d81 	.word	0x00005d81

00005f50 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5f50:	b580      	push	{r7, lr}
    5f52:	b086      	sub	sp, #24
    5f54:	af00      	add	r7, sp, #0
    5f56:	1c02      	adds	r2, r0, #0
    5f58:	1dfb      	adds	r3, r7, #7
    5f5a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    5f5c:	46c0      	nop			; (mov r8, r8)
    5f5e:	4b2f      	ldr	r3, [pc, #188]	; (601c <system_gclk_gen_get_hz+0xcc>)
    5f60:	4798      	blx	r3
    5f62:	1c03      	adds	r3, r0, #0
    5f64:	2b00      	cmp	r3, #0
    5f66:	d1fa      	bne.n	5f5e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    5f68:	4b2d      	ldr	r3, [pc, #180]	; (6020 <system_gclk_gen_get_hz+0xd0>)
    5f6a:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5f6c:	4b2d      	ldr	r3, [pc, #180]	; (6024 <system_gclk_gen_get_hz+0xd4>)
    5f6e:	1dfa      	adds	r2, r7, #7
    5f70:	7812      	ldrb	r2, [r2, #0]
    5f72:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    5f74:	46c0      	nop			; (mov r8, r8)
    5f76:	4b29      	ldr	r3, [pc, #164]	; (601c <system_gclk_gen_get_hz+0xcc>)
    5f78:	4798      	blx	r3
    5f7a:	1c03      	adds	r3, r0, #0
    5f7c:	2b00      	cmp	r3, #0
    5f7e:	d1fa      	bne.n	5f76 <system_gclk_gen_get_hz+0x26>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    5f80:	4b29      	ldr	r3, [pc, #164]	; (6028 <system_gclk_gen_get_hz+0xd8>)
    5f82:	685b      	ldr	r3, [r3, #4]
    5f84:	0a1b      	lsrs	r3, r3, #8
    5f86:	1c1a      	adds	r2, r3, #0
    5f88:	231f      	movs	r3, #31
    5f8a:	4013      	ands	r3, r2
    5f8c:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5f8e:	1c18      	adds	r0, r3, #0
    5f90:	4b26      	ldr	r3, [pc, #152]	; (602c <system_gclk_gen_get_hz+0xdc>)
    5f92:	4798      	blx	r3
    5f94:	1c03      	adds	r3, r0, #0
    5f96:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5f98:	4b22      	ldr	r3, [pc, #136]	; (6024 <system_gclk_gen_get_hz+0xd4>)
    5f9a:	1dfa      	adds	r2, r7, #7
    5f9c:	7812      	ldrb	r2, [r2, #0]
    5f9e:	701a      	strb	r2, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    5fa0:	4b21      	ldr	r3, [pc, #132]	; (6028 <system_gclk_gen_get_hz+0xd8>)
    5fa2:	685b      	ldr	r3, [r3, #4]
    5fa4:	0d1b      	lsrs	r3, r3, #20
    5fa6:	1c1a      	adds	r2, r3, #0
    5fa8:	2301      	movs	r3, #1
    5faa:	4013      	ands	r3, r2
    5fac:	b2da      	uxtb	r2, r3
    5fae:	1c3b      	adds	r3, r7, #0
    5fb0:	3313      	adds	r3, #19
    5fb2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5fb4:	4b1e      	ldr	r3, [pc, #120]	; (6030 <system_gclk_gen_get_hz+0xe0>)
    5fb6:	1dfa      	adds	r2, r7, #7
    5fb8:	7812      	ldrb	r2, [r2, #0]
    5fba:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    5fbc:	46c0      	nop			; (mov r8, r8)
    5fbe:	4b17      	ldr	r3, [pc, #92]	; (601c <system_gclk_gen_get_hz+0xcc>)
    5fc0:	4798      	blx	r3
    5fc2:	1c03      	adds	r3, r0, #0
    5fc4:	2b00      	cmp	r3, #0
    5fc6:	d1fa      	bne.n	5fbe <system_gclk_gen_get_hz+0x6e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    5fc8:	4b17      	ldr	r3, [pc, #92]	; (6028 <system_gclk_gen_get_hz+0xd8>)
    5fca:	689b      	ldr	r3, [r3, #8]
    5fcc:	0a1b      	lsrs	r3, r3, #8
    5fce:	2200      	movs	r2, #0
    5fd0:	4393      	bics	r3, r2
    5fd2:	b29b      	uxth	r3, r3
    5fd4:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    5fd6:	4b17      	ldr	r3, [pc, #92]	; (6034 <system_gclk_gen_get_hz+0xe4>)
    5fd8:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    5fda:	1c3b      	adds	r3, r7, #0
    5fdc:	3313      	adds	r3, #19
    5fde:	781b      	ldrb	r3, [r3, #0]
    5fe0:	2b00      	cmp	r3, #0
    5fe2:	d109      	bne.n	5ff8 <system_gclk_gen_get_hz+0xa8>
    5fe4:	68fb      	ldr	r3, [r7, #12]
    5fe6:	2b01      	cmp	r3, #1
    5fe8:	d906      	bls.n	5ff8 <system_gclk_gen_get_hz+0xa8>
		gen_input_hz /= divider;
    5fea:	4b13      	ldr	r3, [pc, #76]	; (6038 <system_gclk_gen_get_hz+0xe8>)
    5fec:	6978      	ldr	r0, [r7, #20]
    5fee:	68f9      	ldr	r1, [r7, #12]
    5ff0:	4798      	blx	r3
    5ff2:	1c03      	adds	r3, r0, #0
    5ff4:	617b      	str	r3, [r7, #20]
    5ff6:	e00b      	b.n	6010 <system_gclk_gen_get_hz+0xc0>
	} else if (divsel) {
    5ff8:	1c3b      	adds	r3, r7, #0
    5ffa:	3313      	adds	r3, #19
    5ffc:	781b      	ldrb	r3, [r3, #0]
    5ffe:	2b00      	cmp	r3, #0
    6000:	d006      	beq.n	6010 <system_gclk_gen_get_hz+0xc0>
		gen_input_hz >>= (divider+1);
    6002:	68fb      	ldr	r3, [r7, #12]
    6004:	3301      	adds	r3, #1
    6006:	697a      	ldr	r2, [r7, #20]
    6008:	1c11      	adds	r1, r2, #0
    600a:	40d9      	lsrs	r1, r3
    600c:	1c0b      	adds	r3, r1, #0
    600e:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    6010:	697b      	ldr	r3, [r7, #20]
}
    6012:	1c18      	adds	r0, r3, #0
    6014:	46bd      	mov	sp, r7
    6016:	b006      	add	sp, #24
    6018:	bd80      	pop	{r7, pc}
    601a:	46c0      	nop			; (mov r8, r8)
    601c:	00005d91 	.word	0x00005d91
    6020:	00005d71 	.word	0x00005d71
    6024:	40000c04 	.word	0x40000c04
    6028:	40000c00 	.word	0x40000c00
    602c:	00005811 	.word	0x00005811
    6030:	40000c08 	.word	0x40000c08
    6034:	00005d81 	.word	0x00005d81
    6038:	00006595 	.word	0x00006595

0000603c <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    603c:	b580      	push	{r7, lr}
    603e:	b084      	sub	sp, #16
    6040:	af00      	add	r7, sp, #0
    6042:	1c02      	adds	r2, r0, #0
    6044:	6039      	str	r1, [r7, #0]
    6046:	1dfb      	adds	r3, r7, #7
    6048:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    604a:	1dfb      	adds	r3, r7, #7
    604c:	781b      	ldrb	r3, [r3, #0]
    604e:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6050:	683b      	ldr	r3, [r7, #0]
    6052:	781b      	ldrb	r3, [r3, #0]
    6054:	021b      	lsls	r3, r3, #8
    6056:	68fa      	ldr	r2, [r7, #12]
    6058:	4313      	orrs	r3, r2
    605a:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    605c:	1dfb      	adds	r3, r7, #7
    605e:	781b      	ldrb	r3, [r3, #0]
    6060:	1c18      	adds	r0, r3, #0
    6062:	4b04      	ldr	r3, [pc, #16]	; (6074 <system_gclk_chan_set_config+0x38>)
    6064:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6066:	4b04      	ldr	r3, [pc, #16]	; (6078 <system_gclk_chan_set_config+0x3c>)
    6068:	68fa      	ldr	r2, [r7, #12]
    606a:	b292      	uxth	r2, r2
    606c:	805a      	strh	r2, [r3, #2]
}
    606e:	46bd      	mov	sp, r7
    6070:	b004      	add	sp, #16
    6072:	bd80      	pop	{r7, pc}
    6074:	000060c1 	.word	0x000060c1
    6078:	40000c00 	.word	0x40000c00

0000607c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    607c:	b580      	push	{r7, lr}
    607e:	b082      	sub	sp, #8
    6080:	af00      	add	r7, sp, #0
    6082:	1c02      	adds	r2, r0, #0
    6084:	1dfb      	adds	r3, r7, #7
    6086:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6088:	4b09      	ldr	r3, [pc, #36]	; (60b0 <system_gclk_chan_enable+0x34>)
    608a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    608c:	4b09      	ldr	r3, [pc, #36]	; (60b4 <system_gclk_chan_enable+0x38>)
    608e:	1dfa      	adds	r2, r7, #7
    6090:	7812      	ldrb	r2, [r2, #0]
    6092:	701a      	strb	r2, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6094:	4b08      	ldr	r3, [pc, #32]	; (60b8 <system_gclk_chan_enable+0x3c>)
    6096:	4a08      	ldr	r2, [pc, #32]	; (60b8 <system_gclk_chan_enable+0x3c>)
    6098:	8852      	ldrh	r2, [r2, #2]
    609a:	b292      	uxth	r2, r2
    609c:	2180      	movs	r1, #128	; 0x80
    609e:	01c9      	lsls	r1, r1, #7
    60a0:	430a      	orrs	r2, r1
    60a2:	b292      	uxth	r2, r2
    60a4:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    60a6:	4b05      	ldr	r3, [pc, #20]	; (60bc <system_gclk_chan_enable+0x40>)
    60a8:	4798      	blx	r3
}
    60aa:	46bd      	mov	sp, r7
    60ac:	b002      	add	sp, #8
    60ae:	bd80      	pop	{r7, pc}
    60b0:	00005d71 	.word	0x00005d71
    60b4:	40000c02 	.word	0x40000c02
    60b8:	40000c00 	.word	0x40000c00
    60bc:	00005d81 	.word	0x00005d81

000060c0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    60c0:	b580      	push	{r7, lr}
    60c2:	b084      	sub	sp, #16
    60c4:	af00      	add	r7, sp, #0
    60c6:	1c02      	adds	r2, r0, #0
    60c8:	1dfb      	adds	r3, r7, #7
    60ca:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    60cc:	4b1c      	ldr	r3, [pc, #112]	; (6140 <system_gclk_chan_disable+0x80>)
    60ce:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    60d0:	4b1c      	ldr	r3, [pc, #112]	; (6144 <system_gclk_chan_disable+0x84>)
    60d2:	1dfa      	adds	r2, r7, #7
    60d4:	7812      	ldrb	r2, [r2, #0]
    60d6:	701a      	strb	r2, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    60d8:	4b1b      	ldr	r3, [pc, #108]	; (6148 <system_gclk_chan_disable+0x88>)
    60da:	885b      	ldrh	r3, [r3, #2]
    60dc:	b29b      	uxth	r3, r3
    60de:	0a1b      	lsrs	r3, r3, #8
    60e0:	1c1a      	adds	r2, r3, #0
    60e2:	230f      	movs	r3, #15
    60e4:	4013      	ands	r3, r2
    60e6:	b2db      	uxtb	r3, r3
    60e8:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    60ea:	4b17      	ldr	r3, [pc, #92]	; (6148 <system_gclk_chan_disable+0x88>)
    60ec:	8859      	ldrh	r1, [r3, #2]
    60ee:	4a17      	ldr	r2, [pc, #92]	; (614c <system_gclk_chan_disable+0x8c>)
    60f0:	400a      	ands	r2, r1
    60f2:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    60f4:	4b14      	ldr	r3, [pc, #80]	; (6148 <system_gclk_chan_disable+0x88>)
    60f6:	4a14      	ldr	r2, [pc, #80]	; (6148 <system_gclk_chan_disable+0x88>)
    60f8:	8852      	ldrh	r2, [r2, #2]
    60fa:	b291      	uxth	r1, r2
    60fc:	4a14      	ldr	r2, [pc, #80]	; (6150 <system_gclk_chan_disable+0x90>)
    60fe:	400a      	ands	r2, r1
    6100:	b292      	uxth	r2, r2
    6102:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    6104:	46c0      	nop			; (mov r8, r8)
    6106:	4b10      	ldr	r3, [pc, #64]	; (6148 <system_gclk_chan_disable+0x88>)
    6108:	885b      	ldrh	r3, [r3, #2]
    610a:	b29b      	uxth	r3, r3
    610c:	1c1a      	adds	r2, r3, #0
    610e:	2380      	movs	r3, #128	; 0x80
    6110:	01db      	lsls	r3, r3, #7
    6112:	4013      	ands	r3, r2
    6114:	d1f7      	bne.n	6106 <system_gclk_chan_disable+0x46>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6116:	4b0c      	ldr	r3, [pc, #48]	; (6148 <system_gclk_chan_disable+0x88>)
    6118:	68fa      	ldr	r2, [r7, #12]
    611a:	b2d2      	uxtb	r2, r2
    611c:	1c11      	adds	r1, r2, #0
    611e:	220f      	movs	r2, #15
    6120:	400a      	ands	r2, r1
    6122:	b2d1      	uxtb	r1, r2
    6124:	220f      	movs	r2, #15
    6126:	400a      	ands	r2, r1
    6128:	0212      	lsls	r2, r2, #8
    612a:	8858      	ldrh	r0, [r3, #2]
    612c:	4907      	ldr	r1, [pc, #28]	; (614c <system_gclk_chan_disable+0x8c>)
    612e:	4001      	ands	r1, r0
    6130:	430a      	orrs	r2, r1
    6132:	805a      	strh	r2, [r3, #2]

	system_interrupt_leave_critical_section();
    6134:	4b07      	ldr	r3, [pc, #28]	; (6154 <system_gclk_chan_disable+0x94>)
    6136:	4798      	blx	r3
}
    6138:	46bd      	mov	sp, r7
    613a:	b004      	add	sp, #16
    613c:	bd80      	pop	{r7, pc}
    613e:	46c0      	nop			; (mov r8, r8)
    6140:	00005d71 	.word	0x00005d71
    6144:	40000c02 	.word	0x40000c02
    6148:	40000c00 	.word	0x40000c00
    614c:	fffff0ff 	.word	0xfffff0ff
    6150:	ffffbfff 	.word	0xffffbfff
    6154:	00005d81 	.word	0x00005d81

00006158 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6158:	b580      	push	{r7, lr}
    615a:	b084      	sub	sp, #16
    615c:	af00      	add	r7, sp, #0
    615e:	1c02      	adds	r2, r0, #0
    6160:	1dfb      	adds	r3, r7, #7
    6162:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6164:	4b0e      	ldr	r3, [pc, #56]	; (61a0 <system_gclk_chan_get_hz+0x48>)
    6166:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6168:	4b0e      	ldr	r3, [pc, #56]	; (61a4 <system_gclk_chan_get_hz+0x4c>)
    616a:	1dfa      	adds	r2, r7, #7
    616c:	7812      	ldrb	r2, [r2, #0]
    616e:	701a      	strb	r2, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6170:	4b0d      	ldr	r3, [pc, #52]	; (61a8 <system_gclk_chan_get_hz+0x50>)
    6172:	885b      	ldrh	r3, [r3, #2]
    6174:	b29b      	uxth	r3, r3
    6176:	0a1b      	lsrs	r3, r3, #8
    6178:	1c1a      	adds	r2, r3, #0
    617a:	230f      	movs	r3, #15
    617c:	4013      	ands	r3, r2
    617e:	b2da      	uxtb	r2, r3
    6180:	1c3b      	adds	r3, r7, #0
    6182:	330f      	adds	r3, #15
    6184:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6186:	4b09      	ldr	r3, [pc, #36]	; (61ac <system_gclk_chan_get_hz+0x54>)
    6188:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    618a:	1c3b      	adds	r3, r7, #0
    618c:	330f      	adds	r3, #15
    618e:	781b      	ldrb	r3, [r3, #0]
    6190:	1c18      	adds	r0, r3, #0
    6192:	4b07      	ldr	r3, [pc, #28]	; (61b0 <system_gclk_chan_get_hz+0x58>)
    6194:	4798      	blx	r3
    6196:	1c03      	adds	r3, r0, #0
}
    6198:	1c18      	adds	r0, r3, #0
    619a:	46bd      	mov	sp, r7
    619c:	b004      	add	sp, #16
    619e:	bd80      	pop	{r7, pc}
    61a0:	00005d71 	.word	0x00005d71
    61a4:	40000c02 	.word	0x40000c02
    61a8:	40000c00 	.word	0x40000c00
    61ac:	00005d81 	.word	0x00005d81
    61b0:	00005f51 	.word	0x00005f51

000061b4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    61b4:	b580      	push	{r7, lr}
    61b6:	b084      	sub	sp, #16
    61b8:	af00      	add	r7, sp, #0
    61ba:	1c02      	adds	r2, r0, #0
    61bc:	1dfb      	adds	r3, r7, #7
    61be:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    61c0:	1c3b      	adds	r3, r7, #0
    61c2:	330f      	adds	r3, #15
    61c4:	1dfa      	adds	r2, r7, #7
    61c6:	7812      	ldrb	r2, [r2, #0]
    61c8:	09d2      	lsrs	r2, r2, #7
    61ca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    61cc:	1c3b      	adds	r3, r7, #0
    61ce:	330e      	adds	r3, #14
    61d0:	1dfa      	adds	r2, r7, #7
    61d2:	7812      	ldrb	r2, [r2, #0]
    61d4:	0952      	lsrs	r2, r2, #5
    61d6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    61d8:	4b0d      	ldr	r3, [pc, #52]	; (6210 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    61da:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    61dc:	1c3b      	adds	r3, r7, #0
    61de:	330f      	adds	r3, #15
    61e0:	781b      	ldrb	r3, [r3, #0]
    61e2:	2b00      	cmp	r3, #0
    61e4:	d10e      	bne.n	6204 <system_pinmux_get_group_from_gpio_pin+0x50>
		return &(ports[port_index]->Group[group_index]);
    61e6:	1c3b      	adds	r3, r7, #0
    61e8:	330f      	adds	r3, #15
    61ea:	781b      	ldrb	r3, [r3, #0]
    61ec:	009b      	lsls	r3, r3, #2
    61ee:	2210      	movs	r2, #16
    61f0:	19d2      	adds	r2, r2, r7
    61f2:	18d3      	adds	r3, r2, r3
    61f4:	3b08      	subs	r3, #8
    61f6:	681a      	ldr	r2, [r3, #0]
    61f8:	1c3b      	adds	r3, r7, #0
    61fa:	330e      	adds	r3, #14
    61fc:	781b      	ldrb	r3, [r3, #0]
    61fe:	01db      	lsls	r3, r3, #7
    6200:	18d3      	adds	r3, r2, r3
    6202:	e000      	b.n	6206 <system_pinmux_get_group_from_gpio_pin+0x52>
	} else {
		Assert(false);
		return NULL;
    6204:	2300      	movs	r3, #0
	}
}
    6206:	1c18      	adds	r0, r3, #0
    6208:	46bd      	mov	sp, r7
    620a:	b004      	add	sp, #16
    620c:	bd80      	pop	{r7, pc}
    620e:	46c0      	nop			; (mov r8, r8)
    6210:	41004400 	.word	0x41004400

00006214 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6214:	b580      	push	{r7, lr}
    6216:	b088      	sub	sp, #32
    6218:	af00      	add	r7, sp, #0
    621a:	60f8      	str	r0, [r7, #12]
    621c:	60b9      	str	r1, [r7, #8]
    621e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    6220:	2300      	movs	r3, #0
    6222:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6224:	687b      	ldr	r3, [r7, #4]
    6226:	78db      	ldrb	r3, [r3, #3]
    6228:	2201      	movs	r2, #1
    622a:	4053      	eors	r3, r2
    622c:	b2db      	uxtb	r3, r3
    622e:	2b00      	cmp	r3, #0
    6230:	d034      	beq.n	629c <_system_pinmux_config+0x88>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6232:	687b      	ldr	r3, [r7, #4]
    6234:	781b      	ldrb	r3, [r3, #0]
    6236:	2b80      	cmp	r3, #128	; 0x80
    6238:	d00a      	beq.n	6250 <_system_pinmux_config+0x3c>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    623a:	69fb      	ldr	r3, [r7, #28]
    623c:	2280      	movs	r2, #128	; 0x80
    623e:	0252      	lsls	r2, r2, #9
    6240:	4313      	orrs	r3, r2
    6242:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6244:	687b      	ldr	r3, [r7, #4]
    6246:	781b      	ldrb	r3, [r3, #0]
    6248:	061b      	lsls	r3, r3, #24
    624a:	69fa      	ldr	r2, [r7, #28]
    624c:	4313      	orrs	r3, r2
    624e:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6250:	687b      	ldr	r3, [r7, #4]
    6252:	785b      	ldrb	r3, [r3, #1]
    6254:	2b00      	cmp	r3, #0
    6256:	d003      	beq.n	6260 <_system_pinmux_config+0x4c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6258:	687b      	ldr	r3, [r7, #4]
    625a:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    625c:	2b02      	cmp	r3, #2
    625e:	d110      	bne.n	6282 <_system_pinmux_config+0x6e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    6260:	69fb      	ldr	r3, [r7, #28]
    6262:	2280      	movs	r2, #128	; 0x80
    6264:	0292      	lsls	r2, r2, #10
    6266:	4313      	orrs	r3, r2
    6268:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    626a:	687b      	ldr	r3, [r7, #4]
    626c:	789b      	ldrb	r3, [r3, #2]
    626e:	2b00      	cmp	r3, #0
    6270:	d004      	beq.n	627c <_system_pinmux_config+0x68>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6272:	69fb      	ldr	r3, [r7, #28]
    6274:	2280      	movs	r2, #128	; 0x80
    6276:	02d2      	lsls	r2, r2, #11
    6278:	4313      	orrs	r3, r2
    627a:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    627c:	68fb      	ldr	r3, [r7, #12]
    627e:	68ba      	ldr	r2, [r7, #8]
    6280:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6282:	687b      	ldr	r3, [r7, #4]
    6284:	785b      	ldrb	r3, [r3, #1]
    6286:	2b01      	cmp	r3, #1
    6288:	d003      	beq.n	6292 <_system_pinmux_config+0x7e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    628a:	687b      	ldr	r3, [r7, #4]
    628c:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    628e:	2b02      	cmp	r3, #2
    6290:	d107      	bne.n	62a2 <_system_pinmux_config+0x8e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6292:	69fa      	ldr	r2, [r7, #28]
    6294:	4b21      	ldr	r3, [pc, #132]	; (631c <_system_pinmux_config+0x108>)
    6296:	4013      	ands	r3, r2
    6298:	61fb      	str	r3, [r7, #28]
    629a:	e002      	b.n	62a2 <_system_pinmux_config+0x8e>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    629c:	68fb      	ldr	r3, [r7, #12]
    629e:	68ba      	ldr	r2, [r7, #8]
    62a0:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    62a2:	68bb      	ldr	r3, [r7, #8]
    62a4:	041b      	lsls	r3, r3, #16
    62a6:	0c1b      	lsrs	r3, r3, #16
    62a8:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    62aa:	68bb      	ldr	r3, [r7, #8]
    62ac:	0c1b      	lsrs	r3, r3, #16
    62ae:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    62b0:	69ba      	ldr	r2, [r7, #24]
    62b2:	69fb      	ldr	r3, [r7, #28]
    62b4:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    62b6:	22a0      	movs	r2, #160	; 0xa0
    62b8:	05d2      	lsls	r2, r2, #23
    62ba:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    62bc:	68fb      	ldr	r3, [r7, #12]
    62be:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    62c0:	697a      	ldr	r2, [r7, #20]
    62c2:	69fb      	ldr	r3, [r7, #28]
    62c4:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    62c6:	22d0      	movs	r2, #208	; 0xd0
    62c8:	0612      	lsls	r2, r2, #24
    62ca:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    62cc:	68fb      	ldr	r3, [r7, #12]
    62ce:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    62d0:	687b      	ldr	r3, [r7, #4]
    62d2:	78db      	ldrb	r3, [r3, #3]
    62d4:	2201      	movs	r2, #1
    62d6:	4053      	eors	r3, r2
    62d8:	b2db      	uxtb	r3, r3
    62da:	2b00      	cmp	r3, #0
    62dc:	d01a      	beq.n	6314 <_system_pinmux_config+0x100>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    62de:	69fa      	ldr	r2, [r7, #28]
    62e0:	2380      	movs	r3, #128	; 0x80
    62e2:	02db      	lsls	r3, r3, #11
    62e4:	4013      	ands	r3, r2
    62e6:	d00a      	beq.n	62fe <_system_pinmux_config+0xea>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    62e8:	687b      	ldr	r3, [r7, #4]
    62ea:	789b      	ldrb	r3, [r3, #2]
    62ec:	2b01      	cmp	r3, #1
    62ee:	d103      	bne.n	62f8 <_system_pinmux_config+0xe4>
				port->OUTSET.reg = pin_mask;
    62f0:	68fb      	ldr	r3, [r7, #12]
    62f2:	68ba      	ldr	r2, [r7, #8]
    62f4:	619a      	str	r2, [r3, #24]
    62f6:	e002      	b.n	62fe <_system_pinmux_config+0xea>
			} else {
				port->OUTCLR.reg = pin_mask;
    62f8:	68fb      	ldr	r3, [r7, #12]
    62fa:	68ba      	ldr	r2, [r7, #8]
    62fc:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    62fe:	687b      	ldr	r3, [r7, #4]
    6300:	785b      	ldrb	r3, [r3, #1]
    6302:	2b01      	cmp	r3, #1
    6304:	d003      	beq.n	630e <_system_pinmux_config+0xfa>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6306:	687b      	ldr	r3, [r7, #4]
    6308:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    630a:	2b02      	cmp	r3, #2
    630c:	d102      	bne.n	6314 <_system_pinmux_config+0x100>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    630e:	68fb      	ldr	r3, [r7, #12]
    6310:	68ba      	ldr	r2, [r7, #8]
    6312:	609a      	str	r2, [r3, #8]
		}
	}
}
    6314:	46bd      	mov	sp, r7
    6316:	b008      	add	sp, #32
    6318:	bd80      	pop	{r7, pc}
    631a:	46c0      	nop			; (mov r8, r8)
    631c:	fffbffff 	.word	0xfffbffff

00006320 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6320:	b580      	push	{r7, lr}
    6322:	b084      	sub	sp, #16
    6324:	af00      	add	r7, sp, #0
    6326:	1c02      	adds	r2, r0, #0
    6328:	6039      	str	r1, [r7, #0]
    632a:	1dfb      	adds	r3, r7, #7
    632c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    632e:	1dfb      	adds	r3, r7, #7
    6330:	781b      	ldrb	r3, [r3, #0]
    6332:	1c18      	adds	r0, r3, #0
    6334:	4b0b      	ldr	r3, [pc, #44]	; (6364 <system_pinmux_pin_set_config+0x44>)
    6336:	4798      	blx	r3
    6338:	1c03      	adds	r3, r0, #0
    633a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    633c:	1dfb      	adds	r3, r7, #7
    633e:	781a      	ldrb	r2, [r3, #0]
    6340:	231f      	movs	r3, #31
    6342:	4013      	ands	r3, r2
    6344:	2201      	movs	r2, #1
    6346:	1c11      	adds	r1, r2, #0
    6348:	4099      	lsls	r1, r3
    634a:	1c0b      	adds	r3, r1, #0
    634c:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    634e:	68f9      	ldr	r1, [r7, #12]
    6350:	68ba      	ldr	r2, [r7, #8]
    6352:	683b      	ldr	r3, [r7, #0]
    6354:	1c08      	adds	r0, r1, #0
    6356:	1c11      	adds	r1, r2, #0
    6358:	1c1a      	adds	r2, r3, #0
    635a:	4b03      	ldr	r3, [pc, #12]	; (6368 <system_pinmux_pin_set_config+0x48>)
    635c:	4798      	blx	r3
}
    635e:	46bd      	mov	sp, r7
    6360:	b004      	add	sp, #16
    6362:	bd80      	pop	{r7, pc}
    6364:	000061b5 	.word	0x000061b5
    6368:	00006215 	.word	0x00006215

0000636c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    636c:	b580      	push	{r7, lr}
    636e:	af00      	add	r7, sp, #0
	return;
    6370:	46c0      	nop			; (mov r8, r8)
}
    6372:	46bd      	mov	sp, r7
    6374:	bd80      	pop	{r7, pc}
    6376:	46c0      	nop			; (mov r8, r8)

00006378 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6378:	b580      	push	{r7, lr}
    637a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    637c:	4b05      	ldr	r3, [pc, #20]	; (6394 <system_init+0x1c>)
    637e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6380:	4b05      	ldr	r3, [pc, #20]	; (6398 <system_init+0x20>)
    6382:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6384:	4b05      	ldr	r3, [pc, #20]	; (639c <system_init+0x24>)
    6386:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6388:	4b05      	ldr	r3, [pc, #20]	; (63a0 <system_init+0x28>)
    638a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    638c:	4b05      	ldr	r3, [pc, #20]	; (63a4 <system_init+0x2c>)
    638e:	4798      	blx	r3
}
    6390:	46bd      	mov	sp, r7
    6392:	bd80      	pop	{r7, pc}
    6394:	00005b55 	.word	0x00005b55
    6398:	000055dd 	.word	0x000055dd
    639c:	0000636d 	.word	0x0000636d
    63a0:	00001c85 	.word	0x00001c85
    63a4:	0000636d 	.word	0x0000636d

000063a8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    63a8:	b580      	push	{r7, lr}
    63aa:	b082      	sub	sp, #8
    63ac:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    63ae:	4b2d      	ldr	r3, [pc, #180]	; (6464 <Reset_Handler+0xbc>)
    63b0:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    63b2:	4b2d      	ldr	r3, [pc, #180]	; (6468 <Reset_Handler+0xc0>)
    63b4:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    63b6:	687a      	ldr	r2, [r7, #4]
    63b8:	683b      	ldr	r3, [r7, #0]
    63ba:	429a      	cmp	r2, r3
    63bc:	d00c      	beq.n	63d8 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    63be:	e007      	b.n	63d0 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    63c0:	683b      	ldr	r3, [r7, #0]
    63c2:	1d1a      	adds	r2, r3, #4
    63c4:	603a      	str	r2, [r7, #0]
    63c6:	687a      	ldr	r2, [r7, #4]
    63c8:	1d11      	adds	r1, r2, #4
    63ca:	6079      	str	r1, [r7, #4]
    63cc:	6812      	ldr	r2, [r2, #0]
    63ce:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    63d0:	683a      	ldr	r2, [r7, #0]
    63d2:	4b26      	ldr	r3, [pc, #152]	; (646c <Reset_Handler+0xc4>)
    63d4:	429a      	cmp	r2, r3
    63d6:	d3f3      	bcc.n	63c0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    63d8:	4b25      	ldr	r3, [pc, #148]	; (6470 <Reset_Handler+0xc8>)
    63da:	603b      	str	r3, [r7, #0]
    63dc:	e004      	b.n	63e8 <Reset_Handler+0x40>
                *pDest++ = 0;
    63de:	683b      	ldr	r3, [r7, #0]
    63e0:	1d1a      	adds	r2, r3, #4
    63e2:	603a      	str	r2, [r7, #0]
    63e4:	2200      	movs	r2, #0
    63e6:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    63e8:	683a      	ldr	r2, [r7, #0]
    63ea:	4b22      	ldr	r3, [pc, #136]	; (6474 <Reset_Handler+0xcc>)
    63ec:	429a      	cmp	r2, r3
    63ee:	d3f6      	bcc.n	63de <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    63f0:	4b21      	ldr	r3, [pc, #132]	; (6478 <Reset_Handler+0xd0>)
    63f2:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    63f4:	4b21      	ldr	r3, [pc, #132]	; (647c <Reset_Handler+0xd4>)
    63f6:	687a      	ldr	r2, [r7, #4]
    63f8:	21ff      	movs	r1, #255	; 0xff
    63fa:	438a      	bics	r2, r1
    63fc:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    63fe:	4a20      	ldr	r2, [pc, #128]	; (6480 <Reset_Handler+0xd8>)
    6400:	2390      	movs	r3, #144	; 0x90
    6402:	005b      	lsls	r3, r3, #1
    6404:	2102      	movs	r1, #2
    6406:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6408:	4b1e      	ldr	r3, [pc, #120]	; (6484 <Reset_Handler+0xdc>)
    640a:	78da      	ldrb	r2, [r3, #3]
    640c:	2103      	movs	r1, #3
    640e:	438a      	bics	r2, r1
    6410:	2102      	movs	r1, #2
    6412:	430a      	orrs	r2, r1
    6414:	70da      	strb	r2, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6416:	4b1b      	ldr	r3, [pc, #108]	; (6484 <Reset_Handler+0xdc>)
    6418:	78da      	ldrb	r2, [r3, #3]
    641a:	210c      	movs	r1, #12
    641c:	438a      	bics	r2, r1
    641e:	2108      	movs	r1, #8
    6420:	430a      	orrs	r2, r1
    6422:	70da      	strb	r2, [r3, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    6424:	4b18      	ldr	r3, [pc, #96]	; (6488 <Reset_Handler+0xe0>)
    6426:	7b9a      	ldrb	r2, [r3, #14]
    6428:	2130      	movs	r1, #48	; 0x30
    642a:	438a      	bics	r2, r1
    642c:	2120      	movs	r1, #32
    642e:	430a      	orrs	r2, r1
    6430:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6432:	4b15      	ldr	r3, [pc, #84]	; (6488 <Reset_Handler+0xe0>)
    6434:	7b9a      	ldrb	r2, [r3, #14]
    6436:	210c      	movs	r1, #12
    6438:	438a      	bics	r2, r1
    643a:	2108      	movs	r1, #8
    643c:	430a      	orrs	r2, r1
    643e:	739a      	strb	r2, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6440:	4b11      	ldr	r3, [pc, #68]	; (6488 <Reset_Handler+0xe0>)
    6442:	7b9a      	ldrb	r2, [r3, #14]
    6444:	2103      	movs	r1, #3
    6446:	438a      	bics	r2, r1
    6448:	2102      	movs	r1, #2
    644a:	430a      	orrs	r2, r1
    644c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    644e:	4b0f      	ldr	r3, [pc, #60]	; (648c <Reset_Handler+0xe4>)
    6450:	685a      	ldr	r2, [r3, #4]
    6452:	2180      	movs	r1, #128	; 0x80
    6454:	430a      	orrs	r2, r1
    6456:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    6458:	4b0d      	ldr	r3, [pc, #52]	; (6490 <Reset_Handler+0xe8>)
    645a:	4798      	blx	r3

        /* Branch to main function */
        main();
    645c:	4b0d      	ldr	r3, [pc, #52]	; (6494 <Reset_Handler+0xec>)
    645e:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    6460:	e7fe      	b.n	6460 <Reset_Handler+0xb8>
    6462:	46c0      	nop			; (mov r8, r8)
    6464:	000068b0 	.word	0x000068b0
    6468:	20000000 	.word	0x20000000
    646c:	200003b8 	.word	0x200003b8
    6470:	200003b8 	.word	0x200003b8
    6474:	20000df8 	.word	0x20000df8
    6478:	00000000 	.word	0x00000000
    647c:	e000ed00 	.word	0xe000ed00
    6480:	41007000 	.word	0x41007000
    6484:	41005000 	.word	0x41005000
    6488:	41004800 	.word	0x41004800
    648c:	41004000 	.word	0x41004000
    6490:	00006735 	.word	0x00006735
    6494:	000064a1 	.word	0x000064a1

00006498 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    6498:	b580      	push	{r7, lr}
    649a:	af00      	add	r7, sp, #0
        while (1) {
        }
    649c:	e7fe      	b.n	649c <Dummy_Handler+0x4>
    649e:	46c0      	nop			; (mov r8, r8)

000064a0 <main>:
#include <string.h>
#include "main.h"
#include "multi_hid_generic.h"

int main (void)
{
    64a0:	b580      	push	{r7, lr}
    64a2:	af00      	add	r7, sp, #0
	system_init();
    64a4:	4b28      	ldr	r3, [pc, #160]	; (6548 <main+0xa8>)
    64a6:	4798      	blx	r3
	delay_init();
    64a8:	4b28      	ldr	r3, [pc, #160]	; (654c <main+0xac>)
    64aa:	4798      	blx	r3
	// Start USB stack to authorize VBus monitoring
	udc_start();
    64ac:	4b28      	ldr	r3, [pc, #160]	; (6550 <main+0xb0>)
    64ae:	4798      	blx	r3
	memset(ui_hid_charger_in_report, 1, sizeof(ui_hid_charger_in_report));
    64b0:	4b28      	ldr	r3, [pc, #160]	; (6554 <main+0xb4>)
    64b2:	1c18      	adds	r0, r3, #0
    64b4:	2101      	movs	r1, #1
    64b6:	2240      	movs	r2, #64	; 0x40
    64b8:	4b27      	ldr	r3, [pc, #156]	; (6558 <main+0xb8>)
    64ba:	4798      	blx	r3
	memset(ui_hid_battery1_in_report, 2, sizeof(ui_hid_battery1_in_report));
    64bc:	4b27      	ldr	r3, [pc, #156]	; (655c <main+0xbc>)
    64be:	1c18      	adds	r0, r3, #0
    64c0:	2102      	movs	r1, #2
    64c2:	2240      	movs	r2, #64	; 0x40
    64c4:	4b24      	ldr	r3, [pc, #144]	; (6558 <main+0xb8>)
    64c6:	4798      	blx	r3
	memset(ui_hid_battery2_in_report, 3, sizeof(ui_hid_battery2_in_report));
    64c8:	4b25      	ldr	r3, [pc, #148]	; (6560 <main+0xc0>)
    64ca:	1c18      	adds	r0, r3, #0
    64cc:	2103      	movs	r1, #3
    64ce:	2240      	movs	r2, #64	; 0x40
    64d0:	4b21      	ldr	r3, [pc, #132]	; (6558 <main+0xb8>)
    64d2:	4798      	blx	r3
	memset(ui_hid_battery3_in_report, 4, sizeof(ui_hid_battery3_in_report));
    64d4:	4b23      	ldr	r3, [pc, #140]	; (6564 <main+0xc4>)
    64d6:	1c18      	adds	r0, r3, #0
    64d8:	2104      	movs	r1, #4
    64da:	2240      	movs	r2, #64	; 0x40
    64dc:	4b1e      	ldr	r3, [pc, #120]	; (6558 <main+0xb8>)
    64de:	4798      	blx	r3
	memset(ui_hid_battery4_in_report, 5, sizeof(ui_hid_battery4_in_report));
    64e0:	4b21      	ldr	r3, [pc, #132]	; (6568 <main+0xc8>)
    64e2:	1c18      	adds	r0, r3, #0
    64e4:	2105      	movs	r1, #5
    64e6:	2240      	movs	r2, #64	; 0x40
    64e8:	4b1b      	ldr	r3, [pc, #108]	; (6558 <main+0xb8>)
    64ea:	4798      	blx	r3
	memset(ui_hid_battery5_in_report, 6, sizeof(ui_hid_battery5_in_report));
    64ec:	4b1f      	ldr	r3, [pc, #124]	; (656c <main+0xcc>)
    64ee:	1c18      	adds	r0, r3, #0
    64f0:	2106      	movs	r1, #6
    64f2:	2240      	movs	r2, #64	; 0x40
    64f4:	4b18      	ldr	r3, [pc, #96]	; (6558 <main+0xb8>)
    64f6:	4798      	blx	r3
	memset(ui_hid_battery6_in_report, 7, sizeof(ui_hid_battery6_in_report));
    64f8:	4b1d      	ldr	r3, [pc, #116]	; (6570 <main+0xd0>)
    64fa:	1c18      	adds	r0, r3, #0
    64fc:	2107      	movs	r1, #7
    64fe:	2240      	movs	r2, #64	; 0x40
    6500:	4b15      	ldr	r3, [pc, #84]	; (6558 <main+0xb8>)
    6502:	4798      	blx	r3
	/* Insert application code here, after the board has been initialized. */
	while(1)
	{
		udi_hid_generic_charger_send_report_in(ui_hid_charger_in_report);
    6504:	4b13      	ldr	r3, [pc, #76]	; (6554 <main+0xb4>)
    6506:	1c18      	adds	r0, r3, #0
    6508:	4b1a      	ldr	r3, [pc, #104]	; (6574 <main+0xd4>)
    650a:	4798      	blx	r3
		udi_hid_generic_battery1_send_report_in(ui_hid_battery1_in_report);
    650c:	4b13      	ldr	r3, [pc, #76]	; (655c <main+0xbc>)
    650e:	1c18      	adds	r0, r3, #0
    6510:	4b19      	ldr	r3, [pc, #100]	; (6578 <main+0xd8>)
    6512:	4798      	blx	r3
		udi_hid_generic_battery2_send_report_in(ui_hid_battery2_in_report);
    6514:	4b12      	ldr	r3, [pc, #72]	; (6560 <main+0xc0>)
    6516:	1c18      	adds	r0, r3, #0
    6518:	4b18      	ldr	r3, [pc, #96]	; (657c <main+0xdc>)
    651a:	4798      	blx	r3
		udi_hid_generic_battery3_send_report_in(ui_hid_battery3_in_report);
    651c:	4b11      	ldr	r3, [pc, #68]	; (6564 <main+0xc4>)
    651e:	1c18      	adds	r0, r3, #0
    6520:	4b17      	ldr	r3, [pc, #92]	; (6580 <main+0xe0>)
    6522:	4798      	blx	r3
		udi_hid_generic_battery4_send_report_in(ui_hid_battery4_in_report);
    6524:	4b10      	ldr	r3, [pc, #64]	; (6568 <main+0xc8>)
    6526:	1c18      	adds	r0, r3, #0
    6528:	4b16      	ldr	r3, [pc, #88]	; (6584 <main+0xe4>)
    652a:	4798      	blx	r3
		udi_hid_generic_battery5_send_report_in(ui_hid_battery5_in_report);
    652c:	4b0f      	ldr	r3, [pc, #60]	; (656c <main+0xcc>)
    652e:	1c18      	adds	r0, r3, #0
    6530:	4b15      	ldr	r3, [pc, #84]	; (6588 <main+0xe8>)
    6532:	4798      	blx	r3
		udi_hid_generic_battery6_send_report_in(ui_hid_battery6_in_report);
    6534:	4b0e      	ldr	r3, [pc, #56]	; (6570 <main+0xd0>)
    6536:	1c18      	adds	r0, r3, #0
    6538:	4b14      	ldr	r3, [pc, #80]	; (658c <main+0xec>)
    653a:	4798      	blx	r3
		delay_s(1);
    653c:	23fa      	movs	r3, #250	; 0xfa
    653e:	009b      	lsls	r3, r3, #2
    6540:	1c18      	adds	r0, r3, #0
    6542:	4b13      	ldr	r3, [pc, #76]	; (6590 <main+0xf0>)
    6544:	4798      	blx	r3
	}
    6546:	e7dd      	b.n	6504 <main+0x64>
    6548:	00006379 	.word	0x00006379
    654c:	00000145 	.word	0x00000145
    6550:	000011a1 	.word	0x000011a1
    6554:	2000076c 	.word	0x2000076c
    6558:	00006793 	.word	0x00006793
    655c:	200007ac 	.word	0x200007ac
    6560:	200007ec 	.word	0x200007ec
    6564:	2000082c 	.word	0x2000082c
    6568:	2000086c 	.word	0x2000086c
    656c:	200008ac 	.word	0x200008ac
    6570:	200008ec 	.word	0x200008ec
    6574:	000007d9 	.word	0x000007d9
    6578:	00000891 	.word	0x00000891
    657c:	00000949 	.word	0x00000949
    6580:	00000a01 	.word	0x00000a01
    6584:	00000ab9 	.word	0x00000ab9
    6588:	00000b71 	.word	0x00000b71
    658c:	00000c29 	.word	0x00000c29
    6590:	000001a1 	.word	0x000001a1

00006594 <__aeabi_uidiv>:
    6594:	2900      	cmp	r1, #0
    6596:	d034      	beq.n	6602 <.udivsi3_skip_div0_test+0x6a>

00006598 <.udivsi3_skip_div0_test>:
    6598:	2301      	movs	r3, #1
    659a:	2200      	movs	r2, #0
    659c:	b410      	push	{r4}
    659e:	4288      	cmp	r0, r1
    65a0:	d32c      	bcc.n	65fc <.udivsi3_skip_div0_test+0x64>
    65a2:	2401      	movs	r4, #1
    65a4:	0724      	lsls	r4, r4, #28
    65a6:	42a1      	cmp	r1, r4
    65a8:	d204      	bcs.n	65b4 <.udivsi3_skip_div0_test+0x1c>
    65aa:	4281      	cmp	r1, r0
    65ac:	d202      	bcs.n	65b4 <.udivsi3_skip_div0_test+0x1c>
    65ae:	0109      	lsls	r1, r1, #4
    65b0:	011b      	lsls	r3, r3, #4
    65b2:	e7f8      	b.n	65a6 <.udivsi3_skip_div0_test+0xe>
    65b4:	00e4      	lsls	r4, r4, #3
    65b6:	42a1      	cmp	r1, r4
    65b8:	d204      	bcs.n	65c4 <.udivsi3_skip_div0_test+0x2c>
    65ba:	4281      	cmp	r1, r0
    65bc:	d202      	bcs.n	65c4 <.udivsi3_skip_div0_test+0x2c>
    65be:	0049      	lsls	r1, r1, #1
    65c0:	005b      	lsls	r3, r3, #1
    65c2:	e7f8      	b.n	65b6 <.udivsi3_skip_div0_test+0x1e>
    65c4:	4288      	cmp	r0, r1
    65c6:	d301      	bcc.n	65cc <.udivsi3_skip_div0_test+0x34>
    65c8:	1a40      	subs	r0, r0, r1
    65ca:	431a      	orrs	r2, r3
    65cc:	084c      	lsrs	r4, r1, #1
    65ce:	42a0      	cmp	r0, r4
    65d0:	d302      	bcc.n	65d8 <.udivsi3_skip_div0_test+0x40>
    65d2:	1b00      	subs	r0, r0, r4
    65d4:	085c      	lsrs	r4, r3, #1
    65d6:	4322      	orrs	r2, r4
    65d8:	088c      	lsrs	r4, r1, #2
    65da:	42a0      	cmp	r0, r4
    65dc:	d302      	bcc.n	65e4 <.udivsi3_skip_div0_test+0x4c>
    65de:	1b00      	subs	r0, r0, r4
    65e0:	089c      	lsrs	r4, r3, #2
    65e2:	4322      	orrs	r2, r4
    65e4:	08cc      	lsrs	r4, r1, #3
    65e6:	42a0      	cmp	r0, r4
    65e8:	d302      	bcc.n	65f0 <.udivsi3_skip_div0_test+0x58>
    65ea:	1b00      	subs	r0, r0, r4
    65ec:	08dc      	lsrs	r4, r3, #3
    65ee:	4322      	orrs	r2, r4
    65f0:	2800      	cmp	r0, #0
    65f2:	d003      	beq.n	65fc <.udivsi3_skip_div0_test+0x64>
    65f4:	091b      	lsrs	r3, r3, #4
    65f6:	d001      	beq.n	65fc <.udivsi3_skip_div0_test+0x64>
    65f8:	0909      	lsrs	r1, r1, #4
    65fa:	e7e3      	b.n	65c4 <.udivsi3_skip_div0_test+0x2c>
    65fc:	1c10      	adds	r0, r2, #0
    65fe:	bc10      	pop	{r4}
    6600:	4770      	bx	lr
    6602:	2800      	cmp	r0, #0
    6604:	d001      	beq.n	660a <.udivsi3_skip_div0_test+0x72>
    6606:	2000      	movs	r0, #0
    6608:	43c0      	mvns	r0, r0
    660a:	b407      	push	{r0, r1, r2}
    660c:	4802      	ldr	r0, [pc, #8]	; (6618 <.udivsi3_skip_div0_test+0x80>)
    660e:	a102      	add	r1, pc, #8	; (adr r1, 6618 <.udivsi3_skip_div0_test+0x80>)
    6610:	1840      	adds	r0, r0, r1
    6612:	9002      	str	r0, [sp, #8]
    6614:	bd03      	pop	{r0, r1, pc}
    6616:	46c0      	nop			; (mov r8, r8)
    6618:	000000d9 	.word	0x000000d9

0000661c <__aeabi_uidivmod>:
    661c:	2900      	cmp	r1, #0
    661e:	d0f0      	beq.n	6602 <.udivsi3_skip_div0_test+0x6a>
    6620:	b503      	push	{r0, r1, lr}
    6622:	f7ff ffb9 	bl	6598 <.udivsi3_skip_div0_test>
    6626:	bc0e      	pop	{r1, r2, r3}
    6628:	4342      	muls	r2, r0
    662a:	1a89      	subs	r1, r1, r2
    662c:	4718      	bx	r3
    662e:	46c0      	nop			; (mov r8, r8)

00006630 <__aeabi_idiv>:
    6630:	2900      	cmp	r1, #0
    6632:	d041      	beq.n	66b8 <.divsi3_skip_div0_test+0x84>

00006634 <.divsi3_skip_div0_test>:
    6634:	b410      	push	{r4}
    6636:	1c04      	adds	r4, r0, #0
    6638:	404c      	eors	r4, r1
    663a:	46a4      	mov	ip, r4
    663c:	2301      	movs	r3, #1
    663e:	2200      	movs	r2, #0
    6640:	2900      	cmp	r1, #0
    6642:	d500      	bpl.n	6646 <.divsi3_skip_div0_test+0x12>
    6644:	4249      	negs	r1, r1
    6646:	2800      	cmp	r0, #0
    6648:	d500      	bpl.n	664c <.divsi3_skip_div0_test+0x18>
    664a:	4240      	negs	r0, r0
    664c:	4288      	cmp	r0, r1
    664e:	d32c      	bcc.n	66aa <.divsi3_skip_div0_test+0x76>
    6650:	2401      	movs	r4, #1
    6652:	0724      	lsls	r4, r4, #28
    6654:	42a1      	cmp	r1, r4
    6656:	d204      	bcs.n	6662 <.divsi3_skip_div0_test+0x2e>
    6658:	4281      	cmp	r1, r0
    665a:	d202      	bcs.n	6662 <.divsi3_skip_div0_test+0x2e>
    665c:	0109      	lsls	r1, r1, #4
    665e:	011b      	lsls	r3, r3, #4
    6660:	e7f8      	b.n	6654 <.divsi3_skip_div0_test+0x20>
    6662:	00e4      	lsls	r4, r4, #3
    6664:	42a1      	cmp	r1, r4
    6666:	d204      	bcs.n	6672 <.divsi3_skip_div0_test+0x3e>
    6668:	4281      	cmp	r1, r0
    666a:	d202      	bcs.n	6672 <.divsi3_skip_div0_test+0x3e>
    666c:	0049      	lsls	r1, r1, #1
    666e:	005b      	lsls	r3, r3, #1
    6670:	e7f8      	b.n	6664 <.divsi3_skip_div0_test+0x30>
    6672:	4288      	cmp	r0, r1
    6674:	d301      	bcc.n	667a <.divsi3_skip_div0_test+0x46>
    6676:	1a40      	subs	r0, r0, r1
    6678:	431a      	orrs	r2, r3
    667a:	084c      	lsrs	r4, r1, #1
    667c:	42a0      	cmp	r0, r4
    667e:	d302      	bcc.n	6686 <.divsi3_skip_div0_test+0x52>
    6680:	1b00      	subs	r0, r0, r4
    6682:	085c      	lsrs	r4, r3, #1
    6684:	4322      	orrs	r2, r4
    6686:	088c      	lsrs	r4, r1, #2
    6688:	42a0      	cmp	r0, r4
    668a:	d302      	bcc.n	6692 <.divsi3_skip_div0_test+0x5e>
    668c:	1b00      	subs	r0, r0, r4
    668e:	089c      	lsrs	r4, r3, #2
    6690:	4322      	orrs	r2, r4
    6692:	08cc      	lsrs	r4, r1, #3
    6694:	42a0      	cmp	r0, r4
    6696:	d302      	bcc.n	669e <.divsi3_skip_div0_test+0x6a>
    6698:	1b00      	subs	r0, r0, r4
    669a:	08dc      	lsrs	r4, r3, #3
    669c:	4322      	orrs	r2, r4
    669e:	2800      	cmp	r0, #0
    66a0:	d003      	beq.n	66aa <.divsi3_skip_div0_test+0x76>
    66a2:	091b      	lsrs	r3, r3, #4
    66a4:	d001      	beq.n	66aa <.divsi3_skip_div0_test+0x76>
    66a6:	0909      	lsrs	r1, r1, #4
    66a8:	e7e3      	b.n	6672 <.divsi3_skip_div0_test+0x3e>
    66aa:	1c10      	adds	r0, r2, #0
    66ac:	4664      	mov	r4, ip
    66ae:	2c00      	cmp	r4, #0
    66b0:	d500      	bpl.n	66b4 <.divsi3_skip_div0_test+0x80>
    66b2:	4240      	negs	r0, r0
    66b4:	bc10      	pop	{r4}
    66b6:	4770      	bx	lr
    66b8:	2800      	cmp	r0, #0
    66ba:	d006      	beq.n	66ca <.divsi3_skip_div0_test+0x96>
    66bc:	db03      	blt.n	66c6 <.divsi3_skip_div0_test+0x92>
    66be:	2000      	movs	r0, #0
    66c0:	43c0      	mvns	r0, r0
    66c2:	0840      	lsrs	r0, r0, #1
    66c4:	e001      	b.n	66ca <.divsi3_skip_div0_test+0x96>
    66c6:	2080      	movs	r0, #128	; 0x80
    66c8:	0600      	lsls	r0, r0, #24
    66ca:	b407      	push	{r0, r1, r2}
    66cc:	4802      	ldr	r0, [pc, #8]	; (66d8 <.divsi3_skip_div0_test+0xa4>)
    66ce:	a102      	add	r1, pc, #8	; (adr r1, 66d8 <.divsi3_skip_div0_test+0xa4>)
    66d0:	1840      	adds	r0, r0, r1
    66d2:	9002      	str	r0, [sp, #8]
    66d4:	bd03      	pop	{r0, r1, pc}
    66d6:	46c0      	nop			; (mov r8, r8)
    66d8:	00000019 	.word	0x00000019

000066dc <__aeabi_idivmod>:
    66dc:	2900      	cmp	r1, #0
    66de:	d0eb      	beq.n	66b8 <.divsi3_skip_div0_test+0x84>
    66e0:	b503      	push	{r0, r1, lr}
    66e2:	f7ff ffa7 	bl	6634 <.divsi3_skip_div0_test>
    66e6:	bc0e      	pop	{r1, r2, r3}
    66e8:	4342      	muls	r2, r0
    66ea:	1a89      	subs	r1, r1, r2
    66ec:	4718      	bx	r3
    66ee:	46c0      	nop			; (mov r8, r8)

000066f0 <__aeabi_idiv0>:
    66f0:	4770      	bx	lr
    66f2:	46c0      	nop			; (mov r8, r8)

000066f4 <__ctzsi2>:
    66f4:	4241      	negs	r1, r0
    66f6:	4008      	ands	r0, r1
    66f8:	211c      	movs	r1, #28
    66fa:	2301      	movs	r3, #1
    66fc:	041b      	lsls	r3, r3, #16
    66fe:	4298      	cmp	r0, r3
    6700:	d301      	bcc.n	6706 <__ctzsi2+0x12>
    6702:	0c00      	lsrs	r0, r0, #16
    6704:	3910      	subs	r1, #16
    6706:	0a1b      	lsrs	r3, r3, #8
    6708:	4298      	cmp	r0, r3
    670a:	d301      	bcc.n	6710 <__ctzsi2+0x1c>
    670c:	0a00      	lsrs	r0, r0, #8
    670e:	3908      	subs	r1, #8
    6710:	091b      	lsrs	r3, r3, #4
    6712:	4298      	cmp	r0, r3
    6714:	d301      	bcc.n	671a <__ctzsi2+0x26>
    6716:	0900      	lsrs	r0, r0, #4
    6718:	3904      	subs	r1, #4
    671a:	a202      	add	r2, pc, #8	; (adr r2, 6724 <__ctzsi2+0x30>)
    671c:	5c10      	ldrb	r0, [r2, r0]
    671e:	1a40      	subs	r0, r0, r1
    6720:	4770      	bx	lr
    6722:	46c0      	nop			; (mov r8, r8)
    6724:	1d1d1c1b 	.word	0x1d1d1c1b
    6728:	1e1e1e1e 	.word	0x1e1e1e1e
    672c:	1f1f1f1f 	.word	0x1f1f1f1f
    6730:	1f1f1f1f 	.word	0x1f1f1f1f

00006734 <__libc_init_array>:
    6734:	b570      	push	{r4, r5, r6, lr}
    6736:	4b0e      	ldr	r3, [pc, #56]	; (6770 <__libc_init_array+0x3c>)
    6738:	4d0e      	ldr	r5, [pc, #56]	; (6774 <__libc_init_array+0x40>)
    673a:	2400      	movs	r4, #0
    673c:	1aed      	subs	r5, r5, r3
    673e:	10ad      	asrs	r5, r5, #2
    6740:	1c1e      	adds	r6, r3, #0
    6742:	42ac      	cmp	r4, r5
    6744:	d004      	beq.n	6750 <__libc_init_array+0x1c>
    6746:	00a3      	lsls	r3, r4, #2
    6748:	58f3      	ldr	r3, [r6, r3]
    674a:	4798      	blx	r3
    674c:	3401      	adds	r4, #1
    674e:	e7f8      	b.n	6742 <__libc_init_array+0xe>
    6750:	f000 f89e 	bl	6890 <_init>
    6754:	4b08      	ldr	r3, [pc, #32]	; (6778 <__libc_init_array+0x44>)
    6756:	4d09      	ldr	r5, [pc, #36]	; (677c <__libc_init_array+0x48>)
    6758:	2400      	movs	r4, #0
    675a:	1aed      	subs	r5, r5, r3
    675c:	10ad      	asrs	r5, r5, #2
    675e:	1c1e      	adds	r6, r3, #0
    6760:	42ac      	cmp	r4, r5
    6762:	d004      	beq.n	676e <__libc_init_array+0x3a>
    6764:	00a3      	lsls	r3, r4, #2
    6766:	58f3      	ldr	r3, [r6, r3]
    6768:	4798      	blx	r3
    676a:	3401      	adds	r4, #1
    676c:	e7f8      	b.n	6760 <__libc_init_array+0x2c>
    676e:	bd70      	pop	{r4, r5, r6, pc}
    6770:	0000689c 	.word	0x0000689c
    6774:	0000689c 	.word	0x0000689c
    6778:	0000689c 	.word	0x0000689c
    677c:	000068a0 	.word	0x000068a0

00006780 <memcpy>:
    6780:	b510      	push	{r4, lr}
    6782:	2300      	movs	r3, #0
    6784:	4293      	cmp	r3, r2
    6786:	d003      	beq.n	6790 <memcpy+0x10>
    6788:	5ccc      	ldrb	r4, [r1, r3]
    678a:	54c4      	strb	r4, [r0, r3]
    678c:	3301      	adds	r3, #1
    678e:	e7f9      	b.n	6784 <memcpy+0x4>
    6790:	bd10      	pop	{r4, pc}

00006792 <memset>:
    6792:	1c03      	adds	r3, r0, #0
    6794:	1882      	adds	r2, r0, r2
    6796:	4293      	cmp	r3, r2
    6798:	d002      	beq.n	67a0 <memset+0xe>
    679a:	7019      	strb	r1, [r3, #0]
    679c:	3301      	adds	r3, #1
    679e:	e7fa      	b.n	6796 <memset+0x4>
    67a0:	4770      	bx	lr
    67a2:	0000      	movs	r0, r0
    67a4:	78796e6f 	.word	0x78796e6f
    67a8:	6168435f 	.word	0x6168435f
    67ac:	72656772 	.word	0x72656772
    67b0:	00000000 	.word	0x00000000
    67b4:	0000193e 	.word	0x0000193e
    67b8:	00001926 	.word	0x00001926
    67bc:	0000193e 	.word	0x0000193e
    67c0:	0000192e 	.word	0x0000192e
    67c4:	0000193e 	.word	0x0000193e
    67c8:	0000191e 	.word	0x0000191e
    67cc:	0000193e 	.word	0x0000193e
    67d0:	0000193e 	.word	0x0000193e
    67d4:	0000193e 	.word	0x0000193e
    67d8:	00001936 	.word	0x00001936
    67dc:	01020300 	.word	0x01020300
    67e0:	000033aa 	.word	0x000033aa
    67e4:	000033b6 	.word	0x000033b6
    67e8:	000033c2 	.word	0x000033c2
    67ec:	000033ce 	.word	0x000033ce
    67f0:	000033da 	.word	0x000033da
    67f4:	000033e6 	.word	0x000033e6
    67f8:	000033f2 	.word	0x000033f2

000067fc <_usb_device_irq_bits>:
    67fc:	00080004 00800070 01000001 00000200     ....p...........

0000680c <_usb_endpoint_irq_bits>:
    680c:	60100c03 0000415c 00004172 000042d2     ...`\A..rA...B..
    681c:	0000439a 00004462 0000582e 000058ac     .C..bD...X...X..
    682c:	000058ac 00005852 0000584c 00005858     .X..RX..LX..XX..
    683c:	00005834 0000585e 00005892 00005a28     4X..^X...X..(Z..
    684c:	00005a78 00005a78 00005a74 00005a1a     xZ..xZ..tZ...Z..
    685c:	00005a3a 00005a0a 00005a4c 00005a5e     :Z...Z..LZ..^Z..
    686c:	00005ac6 00005af4 00005af4 00005af0     .Z...Z...Z...Z..
    687c:	00005ac0 00005acc 00005aba 00005ad2     .Z...Z...Z...Z..
    688c:	00005ad8                                .Z..

00006890 <_init>:
    6890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6892:	46c0      	nop			; (mov r8, r8)
    6894:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6896:	bc08      	pop	{r3}
    6898:	469e      	mov	lr, r3
    689a:	4770      	bx	lr

0000689c <__init_array_start>:
    689c:	000000d9 	.word	0x000000d9

000068a0 <_fini>:
    68a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68a2:	46c0      	nop			; (mov r8, r8)
    68a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    68a6:	bc08      	pop	{r3}
    68a8:	469e      	mov	lr, r3
    68aa:	4770      	bx	lr

000068ac <__fini_array_start>:
    68ac:	000000b1 	.word	0x000000b1
